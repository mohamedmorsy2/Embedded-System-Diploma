
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00004bd8  00004c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000f8  008000f8  00004d04  2**0
                  ALLOC
  3 .stab         00003894  00000000  00000000  00004d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b3  00000000  00000000  00008598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000974b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000988b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000099fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:




int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cf 56       	subi	r28, 0x6F	; 111
     b54:	d1 40       	sbci	r29, 0x01	; 1
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

	uint8 data,condition  ;
	USART_ConfigType uart_config = {asynch , disabled ,one_bit ,eight_bit ,9600};
     b60:	ce 01       	movw	r24, r28
     b62:	81 5b       	subi	r24, 0xB1	; 177
     b64:	9e 4f       	sbci	r25, 0xFE	; 254
     b66:	c5 59       	subi	r28, 0x95	; 149
     b68:	de 4f       	sbci	r29, 0xFE	; 254
     b6a:	99 83       	std	Y+1, r25	; 0x01
     b6c:	88 83       	st	Y, r24
     b6e:	cb 56       	subi	r28, 0x6B	; 107
     b70:	d1 40       	sbci	r29, 0x01	; 1
     b72:	8f ee       	ldi	r24, 0xEF	; 239
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	c3 59       	subi	r28, 0x93	; 147
     b78:	de 4f       	sbci	r29, 0xFE	; 254
     b7a:	99 83       	std	Y+1, r25	; 0x01
     b7c:	88 83       	st	Y, r24
     b7e:	cd 56       	subi	r28, 0x6D	; 109
     b80:	d1 40       	sbci	r29, 0x01	; 1
     b82:	98 e0       	ldi	r25, 0x08	; 8
     b84:	c1 59       	subi	r28, 0x91	; 145
     b86:	de 4f       	sbci	r29, 0xFE	; 254
     b88:	98 83       	st	Y, r25
     b8a:	cf 56       	subi	r28, 0x6F	; 111
     b8c:	d1 40       	sbci	r29, 0x01	; 1
     b8e:	c3 59       	subi	r28, 0x93	; 147
     b90:	de 4f       	sbci	r29, 0xFE	; 254
     b92:	a8 81       	ld	r26, Y
     b94:	b9 81       	ldd	r27, Y+1	; 0x01
     b96:	cd 56       	subi	r28, 0x6D	; 109
     b98:	d1 40       	sbci	r29, 0x01	; 1
     b9a:	0c 90       	ld	r0, X
     b9c:	c3 59       	subi	r28, 0x93	; 147
     b9e:	de 4f       	sbci	r29, 0xFE	; 254
     ba0:	e8 81       	ld	r30, Y
     ba2:	f9 81       	ldd	r31, Y+1	; 0x01
     ba4:	cd 56       	subi	r28, 0x6D	; 109
     ba6:	d1 40       	sbci	r29, 0x01	; 1
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	c3 59       	subi	r28, 0x93	; 147
     bac:	de 4f       	sbci	r29, 0xFE	; 254
     bae:	f9 83       	std	Y+1, r31	; 0x01
     bb0:	e8 83       	st	Y, r30
     bb2:	cd 56       	subi	r28, 0x6D	; 109
     bb4:	d1 40       	sbci	r29, 0x01	; 1
     bb6:	c5 59       	subi	r28, 0x95	; 149
     bb8:	de 4f       	sbci	r29, 0xFE	; 254
     bba:	a8 81       	ld	r26, Y
     bbc:	b9 81       	ldd	r27, Y+1	; 0x01
     bbe:	cb 56       	subi	r28, 0x6B	; 107
     bc0:	d1 40       	sbci	r29, 0x01	; 1
     bc2:	0c 92       	st	X, r0
     bc4:	c5 59       	subi	r28, 0x95	; 149
     bc6:	de 4f       	sbci	r29, 0xFE	; 254
     bc8:	e8 81       	ld	r30, Y
     bca:	f9 81       	ldd	r31, Y+1	; 0x01
     bcc:	cb 56       	subi	r28, 0x6B	; 107
     bce:	d1 40       	sbci	r29, 0x01	; 1
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	c5 59       	subi	r28, 0x95	; 149
     bd4:	de 4f       	sbci	r29, 0xFE	; 254
     bd6:	f9 83       	std	Y+1, r31	; 0x01
     bd8:	e8 83       	st	Y, r30
     bda:	cb 56       	subi	r28, 0x6B	; 107
     bdc:	d1 40       	sbci	r29, 0x01	; 1
     bde:	c1 59       	subi	r28, 0x91	; 145
     be0:	de 4f       	sbci	r29, 0xFE	; 254
     be2:	f8 81       	ld	r31, Y
     be4:	cf 56       	subi	r28, 0x6F	; 111
     be6:	d1 40       	sbci	r29, 0x01	; 1
     be8:	f1 50       	subi	r31, 0x01	; 1
     bea:	c1 59       	subi	r28, 0x91	; 145
     bec:	de 4f       	sbci	r29, 0xFE	; 254
     bee:	f8 83       	st	Y, r31
     bf0:	cf 56       	subi	r28, 0x6F	; 111
     bf2:	d1 40       	sbci	r29, 0x01	; 1
     bf4:	c1 59       	subi	r28, 0x91	; 145
     bf6:	de 4f       	sbci	r29, 0xFE	; 254
     bf8:	88 81       	ld	r24, Y
     bfa:	cf 56       	subi	r28, 0x6F	; 111
     bfc:	d1 40       	sbci	r29, 0x01	; 1
     bfe:	88 23       	and	r24, r24
     c00:	31 f6       	brne	.-116    	; 0xb8e <main+0x48>
	LCD_init();
     c02:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <LCD_init>

	UART_init(&uart_config);
     c06:	ce 01       	movw	r24, r28
     c08:	81 5b       	subi	r24, 0xB1	; 177
     c0a:	9e 4f       	sbci	r25, 0xFE	; 254
     c0c:	0e 94 0e 24 	call	0x481c	; 0x481c <UART_init>
	LCD_displayString("plz enter pass :");
     c10:	80 e6       	ldi	r24, 0x60	; 96
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
	int pass1[5]={0};
     c18:	ce 01       	movw	r24, r28
     c1a:	89 5a       	subi	r24, 0xA9	; 169
     c1c:	9e 4f       	sbci	r25, 0xFE	; 254
     c1e:	2a e0       	ldi	r18, 0x0A	; 10
     c20:	fc 01       	movw	r30, r24
     c22:	df 01       	movw	r26, r30
     c24:	82 2f       	mov	r24, r18
     c26:	1d 92       	st	X+, r1
     c28:	8a 95       	dec	r24
     c2a:	e9 f7       	brne	.-6      	; 0xc26 <main+0xe0>
	int pass1_confirm[5]={0};
     c2c:	ce 01       	movw	r24, r28
     c2e:	8f 59       	subi	r24, 0x9F	; 159
     c30:	9e 4f       	sbci	r25, 0xFE	; 254
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	fc 01       	movw	r30, r24
     c36:	df 01       	movw	r26, r30
     c38:	82 2f       	mov	r24, r18
     c3a:	1d 92       	st	X+, r1
     c3c:	8a 95       	dec	r24
     c3e:	e9 f7       	brne	.-6      	; 0xc3a <main+0xf4>
	int i,pass_check=0 ;
     c40:	fe 01       	movw	r30, r28
     c42:	e7 5b       	subi	r30, 0xB7	; 183
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	11 82       	std	Z+1, r1	; 0x01
     c48:	10 82       	st	Z, r1
	int door_pass=0 , change_pass =0 ;
     c4a:	fe 01       	movw	r30, r28
     c4c:	e9 5b       	subi	r30, 0xB9	; 185
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	11 82       	std	Z+1, r1	; 0x01
     c52:	10 82       	st	Z, r1
     c54:	fe 01       	movw	r30, r28
     c56:	eb 5b       	subi	r30, 0xBB	; 187
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	11 82       	std	Z+1, r1	; 0x01
     c5c:	10 82       	st	Z, r1
	int error=0; /* for error*/
     c5e:	fe 01       	movw	r30, r28
     c60:	ed 5b       	subi	r30, 0xBD	; 189
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	11 82       	std	Z+1, r1	; 0x01
     c66:	10 82       	st	Z, r1
     c68:	65 c6       	rjmp	.+3274   	; 0x1934 <main+0xdee>

		/******************************** FIRST OPTION TO SET PASSWORD********************************************/

		while(pass_check == 0)
		{
			UART_sendByte('*');  /*set password*/
     c6a:	8a e2       	ldi	r24, 0x2A	; 42
     c6c:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
     c70:	fe 01       	movw	r30, r28
     c72:	e5 5b       	subi	r30, 0xB5	; 181
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	11 82       	std	Z+1, r1	; 0x01
     c78:	10 82       	st	Z, r1
     c7a:	1b c0       	rjmp	.+54     	; 0xcb2 <main+0x16c>
			{

				pass1[i] = 0;
     c7c:	fe 01       	movw	r30, r28
     c7e:	e5 5b       	subi	r30, 0xB5	; 181
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	9e 01       	movw	r18, r28
     c88:	29 5a       	subi	r18, 0xA9	; 169
     c8a:	3e 4f       	sbci	r19, 0xFE	; 254
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	f9 01       	movw	r30, r18
     c92:	e8 0f       	add	r30, r24
     c94:	f9 1f       	adc	r31, r25
     c96:	11 82       	std	Z+1, r1	; 0x01
     c98:	10 82       	st	Z, r1

		while(pass_check == 0)
		{
			UART_sendByte('*');  /*set password*/
			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
     c9a:	de 01       	movw	r26, r28
     c9c:	a5 5b       	subi	r26, 0xB5	; 181
     c9e:	be 4f       	sbci	r27, 0xFE	; 254
     ca0:	fe 01       	movw	r30, r28
     ca2:	e5 5b       	subi	r30, 0xB5	; 181
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	9c 93       	st	X, r25
     cb0:	8e 93       	st	-X, r24
     cb2:	fe 01       	movw	r30, r28
     cb4:	e5 5b       	subi	r30, 0xB5	; 181
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	80 81       	ld	r24, Z
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	85 30       	cpi	r24, 0x05	; 5
     cbe:	91 05       	cpc	r25, r1
     cc0:	ec f2       	brlt	.-70     	; 0xc7c <main+0x136>
			{

				pass1[i] = 0;

			}
			i=0;
     cc2:	fe 01       	movw	r30, r28
     cc4:	e5 5b       	subi	r30, 0xB5	; 181
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	11 82       	std	Z+1, r1	; 0x01
     cca:	10 82       	st	Z, r1
			//UART_sendByte('*');  /*set password*/

			LCD_clearScreen();
     ccc:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>

			LCD_displayString("plz enter pass :");
     cd0:	80 e6       	ldi	r24, 0x60	; 96
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
     cd8:	fe 01       	movw	r30, r28
     cda:	e1 5c       	subi	r30, 0xC1	; 193
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a6 e1       	ldi	r26, 0x16	; 22
     ce4:	b4 e4       	ldi	r27, 0x44	; 68
     ce6:	80 83       	st	Z, r24
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	a2 83       	std	Z+2, r26	; 0x02
     cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	8e 01       	movw	r16, r28
     cf0:	05 5c       	subi	r16, 0xC5	; 197
     cf2:	1e 4f       	sbci	r17, 0xFE	; 254
     cf4:	fe 01       	movw	r30, r28
     cf6:	e1 5c       	subi	r30, 0xC1	; 193
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a ef       	ldi	r20, 0xFA	; 250
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	f8 01       	movw	r30, r16
     d14:	80 83       	st	Z, r24
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	a2 83       	std	Z+2, r26	; 0x02
     d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d1c:	fe 01       	movw	r30, r28
     d1e:	e5 5c       	subi	r30, 0xC5	; 197
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	44 f4       	brge	.+16     	; 0xd4a <main+0x204>
		__ticks = 1;
     d3a:	fe 01       	movw	r30, r28
     d3c:	e7 5c       	subi	r30, 0xC7	; 199
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	64 c0       	rjmp	.+200    	; 0xe12 <main+0x2cc>
	else if (__tmp > 65535)
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5c       	subi	r30, 0xC5	; 197
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d64:	18 16       	cp	r1, r24
     d66:	0c f0       	brlt	.+2      	; 0xd6a <main+0x224>
     d68:	43 c0       	rjmp	.+134    	; 0xdf0 <main+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	fe 01       	movw	r30, r28
     d6c:	e1 5c       	subi	r30, 0xC1	; 193
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e2       	ldi	r20, 0x20	; 32
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8e 01       	movw	r16, r28
     d8a:	07 5c       	subi	r16, 0xC7	; 199
     d8c:	1e 4f       	sbci	r17, 0xFE	; 254
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	f8 01       	movw	r30, r16
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <main+0x29a>
     da2:	fe 01       	movw	r30, r28
     da4:	e9 5c       	subi	r30, 0xC9	; 201
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	88 ec       	ldi	r24, 0xC8	; 200
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db0:	fe 01       	movw	r30, r28
     db2:	e9 5c       	subi	r30, 0xC9	; 201
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <main+0x274>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e9 5c       	subi	r30, 0xC9	; 201
     dc2:	fe 4f       	sbci	r31, 0xFE	; 254
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc8:	de 01       	movw	r26, r28
     dca:	a7 5c       	subi	r26, 0xC7	; 199
     dcc:	be 4f       	sbci	r27, 0xFE	; 254
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 5c       	subi	r30, 0xC7	; 199
     dd2:	fe 4f       	sbci	r31, 0xFE	; 254
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	9c 93       	st	X, r25
     dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	fe 01       	movw	r30, r28
     de2:	e7 5c       	subi	r30, 0xC7	; 199
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	d1 f6       	brne	.-76     	; 0xda2 <main+0x25c>
     dee:	27 c0       	rjmp	.+78     	; 0xe3e <main+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	8e 01       	movw	r16, r28
     df2:	07 5c       	subi	r16, 0xC7	; 199
     df4:	1e 4f       	sbci	r17, 0xFE	; 254
     df6:	fe 01       	movw	r30, r28
     df8:	e5 5c       	subi	r30, 0xC5	; 197
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	de 01       	movw	r26, r28
     e14:	ab 5c       	subi	r26, 0xCB	; 203
     e16:	be 4f       	sbci	r27, 0xFE	; 254
     e18:	fe 01       	movw	r30, r28
     e1a:	e7 5c       	subi	r30, 0xC7	; 199
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	8d 93       	st	X+, r24
     e24:	9c 93       	st	X, r25
     e26:	fe 01       	movw	r30, r28
     e28:	eb 5c       	subi	r30, 0xCB	; 203
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <main+0x2ea>
     e34:	fe 01       	movw	r30, r28
     e36:	eb 5c       	subi	r30, 0xCB	; 203
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24

			_delay_ms(600);


			data = KEYPAD_getPressedKey();
     e3e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
     e42:	fe 01       	movw	r30, r28
     e44:	e2 5b       	subi	r30, 0xB2	; 178
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	80 83       	st	Z, r24
     e4a:	64 c2       	rjmp	.+1224   	; 0x1314 <main+0x7ce>


			/*first time enter pass of size 5 and display and store it in array*/
			while(data != '=')
			{
				if (i==5)
     e4c:	fe 01       	movw	r30, r28
     e4e:	e5 5b       	subi	r30, 0xB5	; 181
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	85 30       	cpi	r24, 0x05	; 5
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <main+0x318>
     e5c:	a1 c1       	rjmp	.+834    	; 0x11a0 <main+0x65a>
				{
					/* do nothing*/
				}

				else if (data != '=')
     e5e:	fe 01       	movw	r30, r28
     e60:	e2 5b       	subi	r30, 0xB2	; 178
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	80 81       	ld	r24, Z
     e66:	8d 33       	cpi	r24, 0x3D	; 61
     e68:	09 f4       	brne	.+2      	; 0xe6c <main+0x326>
     e6a:	9a c1       	rjmp	.+820    	; 0x11a0 <main+0x65a>
				{
					LCD_intgerToString(data);
     e6c:	fe 01       	movw	r30, r28
     e6e:	e2 5b       	subi	r30, 0xB2	; 178
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	80 81       	ld	r24, Z
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 0f 23 	call	0x461e	; 0x461e <LCD_intgerToString>
					LCD_moveCursor(1,i);
     e7c:	fe 01       	movw	r30, r28
     e7e:	e5 5b       	subi	r30, 0xB5	; 181
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	90 81       	ld	r25, Z
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	69 2f       	mov	r22, r25
     e88:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
     e8c:	fe 01       	movw	r30, r28
     e8e:	ef 5c       	subi	r30, 0xCF	; 207
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	aa e7       	ldi	r26, 0x7A	; 122
     e98:	b3 e4       	ldi	r27, 0x43	; 67
     e9a:	80 83       	st	Z, r24
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	a2 83       	std	Z+2, r26	; 0x02
     ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea2:	8e 01       	movw	r16, r28
     ea4:	03 5d       	subi	r16, 0xD3	; 211
     ea6:	1e 4f       	sbci	r17, 0xFE	; 254
     ea8:	fe 01       	movw	r30, r28
     eaa:	ef 5c       	subi	r30, 0xCF	; 207
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a ef       	ldi	r20, 0xFA	; 250
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	f8 01       	movw	r30, r16
     ec8:	80 83       	st	Z, r24
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	a2 83       	std	Z+2, r26	; 0x02
     ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ed0:	fe 01       	movw	r30, r28
     ed2:	e3 5d       	subi	r30, 0xD3	; 211
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	60 81       	ld	r22, Z
     ed8:	71 81       	ldd	r23, Z+1	; 0x01
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	93 81       	ldd	r25, Z+3	; 0x03
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eea:	88 23       	and	r24, r24
     eec:	44 f4       	brge	.+16     	; 0xefe <main+0x3b8>
		__ticks = 1;
     eee:	fe 01       	movw	r30, r28
     ef0:	e5 5d       	subi	r30, 0xD5	; 213
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
     efc:	64 c0       	rjmp	.+200    	; 0xfc6 <main+0x480>
	else if (__tmp > 65535)
     efe:	fe 01       	movw	r30, r28
     f00:	e3 5d       	subi	r30, 0xD3	; 211
     f02:	fe 4f       	sbci	r31, 0xFE	; 254
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	0c f0       	brlt	.+2      	; 0xf1e <main+0x3d8>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <main+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1e:	fe 01       	movw	r30, r28
     f20:	ef 5c       	subi	r30, 0xCF	; 207
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8e 01       	movw	r16, r28
     f3e:	05 5d       	subi	r16, 0xD5	; 213
     f40:	1e 4f       	sbci	r17, 0xFE	; 254
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	f8 01       	movw	r30, r16
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
     f54:	1f c0       	rjmp	.+62     	; 0xf94 <main+0x44e>
     f56:	fe 01       	movw	r30, r28
     f58:	e7 5d       	subi	r30, 0xD7	; 215
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	88 ec       	ldi	r24, 0xC8	; 200
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24
     f64:	fe 01       	movw	r30, r28
     f66:	e7 5d       	subi	r30, 0xD7	; 215
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <main+0x428>
     f72:	fe 01       	movw	r30, r28
     f74:	e7 5d       	subi	r30, 0xD7	; 215
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7c:	de 01       	movw	r26, r28
     f7e:	a5 5d       	subi	r26, 0xD5	; 213
     f80:	be 4f       	sbci	r27, 0xFE	; 254
     f82:	fe 01       	movw	r30, r28
     f84:	e5 5d       	subi	r30, 0xD5	; 213
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	9c 93       	st	X, r25
     f92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	fe 01       	movw	r30, r28
     f96:	e5 5d       	subi	r30, 0xD5	; 213
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	d1 f6       	brne	.-76     	; 0xf56 <main+0x410>
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <main+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	8e 01       	movw	r16, r28
     fa6:	05 5d       	subi	r16, 0xD5	; 213
     fa8:	1e 4f       	sbci	r17, 0xFE	; 254
     faa:	fe 01       	movw	r30, r28
     fac:	e3 5d       	subi	r30, 0xD3	; 211
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	de 01       	movw	r26, r28
     fc8:	a9 5d       	subi	r26, 0xD9	; 217
     fca:	be 4f       	sbci	r27, 0xFE	; 254
     fcc:	fe 01       	movw	r30, r28
     fce:	e5 5d       	subi	r30, 0xD5	; 213
     fd0:	fe 4f       	sbci	r31, 0xFE	; 254
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	8d 93       	st	X+, r24
     fd8:	9c 93       	st	X, r25
     fda:	fe 01       	movw	r30, r28
     fdc:	e9 5d       	subi	r30, 0xD9	; 217
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <main+0x49e>
     fe8:	fe 01       	movw	r30, r28
     fea:	e9 5d       	subi	r30, 0xD9	; 217
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
					_delay_ms(250);
					LCD_displayCharacter('*');
     ff2:	8a e2       	ldi	r24, 0x2A	; 42
     ff4:	0e 94 8f 20 	call	0x411e	; 0x411e <LCD_displayCharacter>
					pass1[i] = data;
     ff8:	fe 01       	movw	r30, r28
     ffa:	e5 5b       	subi	r30, 0xB5	; 181
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	fe 01       	movw	r30, r28
    1004:	e2 5b       	subi	r30, 0xB2	; 178
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	9e 01       	movw	r18, r28
    1010:	29 5a       	subi	r18, 0xA9	; 169
    1012:	3e 4f       	sbci	r19, 0xFE	; 254
    1014:	cb 01       	movw	r24, r22
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	f9 01       	movw	r30, r18
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	51 83       	std	Z+1, r21	; 0x01
    1022:	40 83       	st	Z, r20
    1024:	fe 01       	movw	r30, r28
    1026:	ed 5d       	subi	r30, 0xDD	; 221
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a6 e1       	ldi	r26, 0x16	; 22
    1030:	b4 e4       	ldi	r27, 0x44	; 68
    1032:	80 83       	st	Z, r24
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	a2 83       	std	Z+2, r26	; 0x02
    1038:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	8e 01       	movw	r16, r28
    103c:	01 5e       	subi	r16, 0xE1	; 225
    103e:	1e 4f       	sbci	r17, 0xFE	; 254
    1040:	fe 01       	movw	r30, r28
    1042:	ed 5d       	subi	r30, 0xDD	; 221
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a ef       	ldi	r20, 0xFA	; 250
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	f8 01       	movw	r30, r16
    1060:	80 83       	st	Z, r24
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	a2 83       	std	Z+2, r26	; 0x02
    1066:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1068:	fe 01       	movw	r30, r28
    106a:	e1 5e       	subi	r30, 0xE1	; 225
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	44 f4       	brge	.+16     	; 0x1096 <main+0x550>
		__ticks = 1;
    1086:	fe 01       	movw	r30, r28
    1088:	e3 5e       	subi	r30, 0xE3	; 227
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    1094:	64 c0       	rjmp	.+200    	; 0x115e <main+0x618>
	else if (__tmp > 65535)
    1096:	fe 01       	movw	r30, r28
    1098:	e1 5e       	subi	r30, 0xE1	; 225
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <main+0x570>
    10b4:	43 c0       	rjmp	.+134    	; 0x113c <main+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b6:	fe 01       	movw	r30, r28
    10b8:	ed 5d       	subi	r30, 0xDD	; 221
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	8e 01       	movw	r16, r28
    10d6:	03 5e       	subi	r16, 0xE3	; 227
    10d8:	1e 4f       	sbci	r17, 0xFE	; 254
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	f8 01       	movw	r30, r16
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	80 83       	st	Z, r24
    10ec:	1f c0       	rjmp	.+62     	; 0x112c <main+0x5e6>
    10ee:	fe 01       	movw	r30, r28
    10f0:	e5 5e       	subi	r30, 0xE5	; 229
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	88 ec       	ldi	r24, 0xC8	; 200
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
    10fc:	fe 01       	movw	r30, r28
    10fe:	e5 5e       	subi	r30, 0xE5	; 229
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <main+0x5c0>
    110a:	fe 01       	movw	r30, r28
    110c:	e5 5e       	subi	r30, 0xE5	; 229
    110e:	fe 4f       	sbci	r31, 0xFE	; 254
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	de 01       	movw	r26, r28
    1116:	a3 5e       	subi	r26, 0xE3	; 227
    1118:	be 4f       	sbci	r27, 0xFE	; 254
    111a:	fe 01       	movw	r30, r28
    111c:	e3 5e       	subi	r30, 0xE3	; 227
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	9c 93       	st	X, r25
    112a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	fe 01       	movw	r30, r28
    112e:	e3 5e       	subi	r30, 0xE3	; 227
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	d1 f6       	brne	.-76     	; 0x10ee <main+0x5a8>
    113a:	27 c0       	rjmp	.+78     	; 0x118a <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	8e 01       	movw	r16, r28
    113e:	03 5e       	subi	r16, 0xE3	; 227
    1140:	1e 4f       	sbci	r17, 0xFE	; 254
    1142:	fe 01       	movw	r30, r28
    1144:	e1 5e       	subi	r30, 0xE1	; 225
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	f8 01       	movw	r30, r16
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	de 01       	movw	r26, r28
    1160:	a7 5e       	subi	r26, 0xE7	; 231
    1162:	be 4f       	sbci	r27, 0xFE	; 254
    1164:	fe 01       	movw	r30, r28
    1166:	e3 5e       	subi	r30, 0xE3	; 227
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	8d 93       	st	X+, r24
    1170:	9c 93       	st	X, r25
    1172:	fe 01       	movw	r30, r28
    1174:	e7 5e       	subi	r30, 0xE7	; 231
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <main+0x636>
    1180:	fe 01       	movw	r30, r28
    1182:	e7 5e       	subi	r30, 0xE7	; 231
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	80 83       	st	Z, r24
					_delay_ms(600);
					i++;
    118a:	de 01       	movw	r26, r28
    118c:	a5 5b       	subi	r26, 0xB5	; 181
    118e:	be 4f       	sbci	r27, 0xFE	; 254
    1190:	fe 01       	movw	r30, r28
    1192:	e5 5b       	subi	r30, 0xB5	; 181
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	8d 93       	st	X+, r24
    119e:	9c 93       	st	X, r25
				}
				data = KEYPAD_getPressedKey();
    11a0:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    11a4:	fe 01       	movw	r30, r28
    11a6:	e2 5b       	subi	r30, 0xB2	; 178
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	80 83       	st	Z, r24
    11ac:	fe 01       	movw	r30, r28
    11ae:	eb 5e       	subi	r30, 0xEB	; 235
    11b0:	fe 4f       	sbci	r31, 0xFE	; 254
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a6 e1       	ldi	r26, 0x16	; 22
    11b8:	b4 e4       	ldi	r27, 0x44	; 68
    11ba:	80 83       	st	Z, r24
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	a2 83       	std	Z+2, r26	; 0x02
    11c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	8e 01       	movw	r16, r28
    11c4:	0f 5e       	subi	r16, 0xEF	; 239
    11c6:	1e 4f       	sbci	r17, 0xFE	; 254
    11c8:	fe 01       	movw	r30, r28
    11ca:	eb 5e       	subi	r30, 0xEB	; 235
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a ef       	ldi	r20, 0xFA	; 250
    11dc:	54 e4       	ldi	r21, 0x44	; 68
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	80 83       	st	Z, r24
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	a2 83       	std	Z+2, r26	; 0x02
    11ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f0:	fe 01       	movw	r30, r28
    11f2:	ef 5e       	subi	r30, 0xEF	; 239
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	44 f4       	brge	.+16     	; 0x121e <main+0x6d8>
		__ticks = 1;
    120e:	fe 01       	movw	r30, r28
    1210:	e1 5f       	subi	r30, 0xF1	; 241
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    121c:	64 c0       	rjmp	.+200    	; 0x12e6 <main+0x7a0>
	else if (__tmp > 65535)
    121e:	fe 01       	movw	r30, r28
    1220:	ef 5e       	subi	r30, 0xEF	; 239
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	3f ef       	ldi	r19, 0xFF	; 255
    1230:	4f e7       	ldi	r20, 0x7F	; 127
    1232:	57 e4       	ldi	r21, 0x47	; 71
    1234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1238:	18 16       	cp	r1, r24
    123a:	0c f0       	brlt	.+2      	; 0x123e <main+0x6f8>
    123c:	43 c0       	rjmp	.+134    	; 0x12c4 <main+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	fe 01       	movw	r30, r28
    1240:	eb 5e       	subi	r30, 0xEB	; 235
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8e 01       	movw	r16, r28
    125e:	01 5f       	subi	r16, 0xF1	; 241
    1260:	1e 4f       	sbci	r17, 0xFE	; 254
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	f8 01       	movw	r30, r16
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	1f c0       	rjmp	.+62     	; 0x12b4 <main+0x76e>
    1276:	fe 01       	movw	r30, r28
    1278:	e3 5f       	subi	r30, 0xF3	; 243
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	88 ec       	ldi	r24, 0xC8	; 200
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	91 83       	std	Z+1, r25	; 0x01
    1282:	80 83       	st	Z, r24
    1284:	fe 01       	movw	r30, r28
    1286:	e3 5f       	subi	r30, 0xF3	; 243
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <main+0x748>
    1292:	fe 01       	movw	r30, r28
    1294:	e3 5f       	subi	r30, 0xF3	; 243
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129c:	de 01       	movw	r26, r28
    129e:	a1 5f       	subi	r26, 0xF1	; 241
    12a0:	be 4f       	sbci	r27, 0xFE	; 254
    12a2:	fe 01       	movw	r30, r28
    12a4:	e1 5f       	subi	r30, 0xF1	; 241
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	fe 01       	movw	r30, r28
    12b6:	e1 5f       	subi	r30, 0xF1	; 241
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	d1 f6       	brne	.-76     	; 0x1276 <main+0x730>
    12c2:	28 c0       	rjmp	.+80     	; 0x1314 <main+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c4:	8e 01       	movw	r16, r28
    12c6:	01 5f       	subi	r16, 0xF1	; 241
    12c8:	1e 4f       	sbci	r17, 0xFE	; 254
    12ca:	fe 01       	movw	r30, r28
    12cc:	ef 5e       	subi	r30, 0xEF	; 239
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	f8 01       	movw	r30, r16
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	de 01       	movw	r26, r28
    12e8:	a5 5f       	subi	r26, 0xF5	; 245
    12ea:	be 4f       	sbci	r27, 0xFE	; 254
    12ec:	fe 01       	movw	r30, r28
    12ee:	e1 5f       	subi	r30, 0xF1	; 241
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	9c 93       	st	X, r25
    12fa:	8e 93       	st	-X, r24
    12fc:	fe 01       	movw	r30, r28
    12fe:	e5 5f       	subi	r30, 0xF5	; 245
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <main+0x7c0>
    130a:	fe 01       	movw	r30, r28
    130c:	e5 5f       	subi	r30, 0xF5	; 245
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
			data = KEYPAD_getPressedKey();



			/*first time enter pass of size 5 and display and store it in array*/
			while(data != '=')
    1314:	fe 01       	movw	r30, r28
    1316:	e2 5b       	subi	r30, 0xB2	; 178
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	80 81       	ld	r24, Z
    131c:	8d 33       	cpi	r24, 0x3D	; 61
    131e:	09 f0       	breq	.+2      	; 0x1322 <main+0x7dc>
    1320:	95 cd       	rjmp	.-1238   	; 0xe4c <main+0x306>
				_delay_ms(600);
			}

			/* send pass to MC */

			for(i=0 ; i<5 ; i++)
    1322:	fe 01       	movw	r30, r28
    1324:	e5 5b       	subi	r30, 0xB5	; 181
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	11 82       	std	Z+1, r1	; 0x01
    132a:	10 82       	st	Z, r1
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <main+0x822>
			{
				UART_sendByte(pass1[i]);
    132e:	fe 01       	movw	r30, r28
    1330:	e5 5b       	subi	r30, 0xB5	; 181
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	9e 01       	movw	r18, r28
    133a:	29 5a       	subi	r18, 0xA9	; 169
    133c:	3e 4f       	sbci	r19, 0xFE	; 254
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	f9 01       	movw	r30, r18
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
				_delay_ms(600);
			}

			/* send pass to MC */

			for(i=0 ; i<5 ; i++)
    1350:	de 01       	movw	r26, r28
    1352:	a5 5b       	subi	r26, 0xB5	; 181
    1354:	be 4f       	sbci	r27, 0xFE	; 254
    1356:	fe 01       	movw	r30, r28
    1358:	e5 5b       	subi	r30, 0xB5	; 181
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	9c 93       	st	X, r25
    1366:	8e 93       	st	-X, r24
    1368:	fe 01       	movw	r30, r28
    136a:	e5 5b       	subi	r30, 0xB5	; 181
    136c:	fe 4f       	sbci	r31, 0xFE	; 254
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	85 30       	cpi	r24, 0x05	; 5
    1374:	91 05       	cpc	r25, r1
    1376:	dc f2       	brlt	.-74     	; 0x132e <main+0x7e8>
			{
				UART_sendByte(pass1[i]);
			}

			/*RE_enter PASS*/
			LCD_clearScreen();
    1378:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
			LCD_displayString("plz re_enter pass :");
    137c:	81 e7       	ldi	r24, 0x71	; 113
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
			LCD_moveCursor(1,0);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>

			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
    138c:	fe 01       	movw	r30, r28
    138e:	e5 5b       	subi	r30, 0xB5	; 181
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	11 82       	std	Z+1, r1	; 0x01
    1394:	10 82       	st	Z, r1
    1396:	1b c0       	rjmp	.+54     	; 0x13ce <main+0x888>
			{

				pass1[i] = 0;
    1398:	fe 01       	movw	r30, r28
    139a:	e5 5b       	subi	r30, 0xB5	; 181
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	9e 01       	movw	r18, r28
    13a4:	29 5a       	subi	r18, 0xA9	; 169
    13a6:	3e 4f       	sbci	r19, 0xFE	; 254
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	f9 01       	movw	r30, r18
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	11 82       	std	Z+1, r1	; 0x01
    13b4:	10 82       	st	Z, r1
			LCD_clearScreen();
			LCD_displayString("plz re_enter pass :");
			LCD_moveCursor(1,0);

			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
    13b6:	de 01       	movw	r26, r28
    13b8:	a5 5b       	subi	r26, 0xB5	; 181
    13ba:	be 4f       	sbci	r27, 0xFE	; 254
    13bc:	fe 01       	movw	r30, r28
    13be:	e5 5b       	subi	r30, 0xB5	; 181
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	11 96       	adiw	r26, 0x01	; 1
    13ca:	9c 93       	st	X, r25
    13cc:	8e 93       	st	-X, r24
    13ce:	fe 01       	movw	r30, r28
    13d0:	e5 5b       	subi	r30, 0xB5	; 181
    13d2:	fe 4f       	sbci	r31, 0xFE	; 254
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	85 30       	cpi	r24, 0x05	; 5
    13da:	91 05       	cpc	r25, r1
    13dc:	ec f2       	brlt	.-70     	; 0x1398 <main+0x852>
			{

				pass1[i] = 0;

			}
			i=0;
    13de:	fe 01       	movw	r30, r28
    13e0:	e5 5b       	subi	r30, 0xB5	; 181
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	11 82       	std	Z+1, r1	; 0x01
    13e6:	10 82       	st	Z, r1
			data = KEYPAD_getPressedKey();
    13e8:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    13ec:	fe 01       	movw	r30, r28
    13ee:	e2 5b       	subi	r30, 0xB2	; 178
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	80 83       	st	Z, r24
    13f4:	64 c2       	rjmp	.+1224   	; 0x18be <main+0xd78>


			/*re_enter Password */
			while(data != '=')
			{
				if (i==5)
    13f6:	fe 01       	movw	r30, r28
    13f8:	e5 5b       	subi	r30, 0xB5	; 181
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	85 30       	cpi	r24, 0x05	; 5
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <main+0x8c2>
    1406:	a1 c1       	rjmp	.+834    	; 0x174a <main+0xc04>
				{
					/* do nothinf*/
				}

				else if (data != '=')
    1408:	fe 01       	movw	r30, r28
    140a:	e2 5b       	subi	r30, 0xB2	; 178
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	80 81       	ld	r24, Z
    1410:	8d 33       	cpi	r24, 0x3D	; 61
    1412:	09 f4       	brne	.+2      	; 0x1416 <main+0x8d0>
    1414:	9a c1       	rjmp	.+820    	; 0x174a <main+0xc04>
				{
					LCD_intgerToString(data);
    1416:	fe 01       	movw	r30, r28
    1418:	e2 5b       	subi	r30, 0xB2	; 178
    141a:	fe 4f       	sbci	r31, 0xFE	; 254
    141c:	80 81       	ld	r24, Z
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 0f 23 	call	0x461e	; 0x461e <LCD_intgerToString>
					LCD_moveCursor(1,i);
    1426:	fe 01       	movw	r30, r28
    1428:	e5 5b       	subi	r30, 0xB5	; 181
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	90 81       	ld	r25, Z
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	69 2f       	mov	r22, r25
    1432:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
    1436:	fe 01       	movw	r30, r28
    1438:	e9 5f       	subi	r30, 0xF9	; 249
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa e7       	ldi	r26, 0x7A	; 122
    1442:	b3 e4       	ldi	r27, 0x43	; 67
    1444:	80 83       	st	Z, r24
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	a2 83       	std	Z+2, r26	; 0x02
    144a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	8e 01       	movw	r16, r28
    144e:	0d 5f       	subi	r16, 0xFD	; 253
    1450:	1e 4f       	sbci	r17, 0xFE	; 254
    1452:	fe 01       	movw	r30, r28
    1454:	e9 5f       	subi	r30, 0xF9	; 249
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a ef       	ldi	r20, 0xFA	; 250
    1466:	54 e4       	ldi	r21, 0x44	; 68
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	f8 01       	movw	r30, r16
    1472:	80 83       	st	Z, r24
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	a2 83       	std	Z+2, r26	; 0x02
    1478:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    147a:	fe 01       	movw	r30, r28
    147c:	ed 5f       	subi	r30, 0xFD	; 253
    147e:	fe 4f       	sbci	r31, 0xFE	; 254
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	44 f4       	brge	.+16     	; 0x14a8 <main+0x962>
		__ticks = 1;
    1498:	fe 01       	movw	r30, r28
    149a:	ef 5f       	subi	r30, 0xFF	; 255
    149c:	fe 4f       	sbci	r31, 0xFE	; 254
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	64 c0       	rjmp	.+200    	; 0x1570 <main+0xa2a>
	else if (__tmp > 65535)
    14a8:	fe 01       	movw	r30, r28
    14aa:	ed 5f       	subi	r30, 0xFD	; 253
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <main+0x982>
    14c6:	43 c0       	rjmp	.+134    	; 0x154e <main+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	fe 01       	movw	r30, r28
    14ca:	e9 5f       	subi	r30, 0xF9	; 249
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	93 81       	ldd	r25, Z+3	; 0x03
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e2       	ldi	r20, 0x20	; 32
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8e 01       	movw	r16, r28
    14e8:	0f 5f       	subi	r16, 0xFF	; 255
    14ea:	1e 4f       	sbci	r17, 0xFE	; 254
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	f8 01       	movw	r30, r16
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
    14fe:	1f c0       	rjmp	.+62     	; 0x153e <main+0x9f8>
    1500:	fe 01       	movw	r30, r28
    1502:	e1 50       	subi	r30, 0x01	; 1
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	fe 01       	movw	r30, r28
    1510:	e1 50       	subi	r30, 0x01	; 1
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <main+0x9d2>
    151c:	fe 01       	movw	r30, r28
    151e:	e1 50       	subi	r30, 0x01	; 1
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	de 01       	movw	r26, r28
    1528:	af 5f       	subi	r26, 0xFF	; 255
    152a:	be 4f       	sbci	r27, 0xFE	; 254
    152c:	fe 01       	movw	r30, r28
    152e:	ef 5f       	subi	r30, 0xFF	; 255
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	11 96       	adiw	r26, 0x01	; 1
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	fe 01       	movw	r30, r28
    1540:	ef 5f       	subi	r30, 0xFF	; 255
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	d1 f6       	brne	.-76     	; 0x1500 <main+0x9ba>
    154c:	27 c0       	rjmp	.+78     	; 0x159c <main+0xa56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154e:	8e 01       	movw	r16, r28
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	1e 4f       	sbci	r17, 0xFE	; 254
    1554:	fe 01       	movw	r30, r28
    1556:	ed 5f       	subi	r30, 0xFD	; 253
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	80 83       	st	Z, r24
    1570:	de 01       	movw	r26, r28
    1572:	a3 50       	subi	r26, 0x03	; 3
    1574:	bf 4f       	sbci	r27, 0xFF	; 255
    1576:	fe 01       	movw	r30, r28
    1578:	ef 5f       	subi	r30, 0xFF	; 255
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	8d 93       	st	X+, r24
    1582:	9c 93       	st	X, r25
    1584:	fe 01       	movw	r30, r28
    1586:	e3 50       	subi	r30, 0x03	; 3
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <main+0xa48>
    1592:	fe 01       	movw	r30, r28
    1594:	e3 50       	subi	r30, 0x03	; 3
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
					_delay_ms(250);
					LCD_displayCharacter('*');
    159c:	8a e2       	ldi	r24, 0x2A	; 42
    159e:	0e 94 8f 20 	call	0x411e	; 0x411e <LCD_displayCharacter>
					pass1[i] = data;
    15a2:	fe 01       	movw	r30, r28
    15a4:	e5 5b       	subi	r30, 0xB5	; 181
    15a6:	fe 4f       	sbci	r31, 0xFE	; 254
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	fe 01       	movw	r30, r28
    15ae:	e2 5b       	subi	r30, 0xB2	; 178
    15b0:	fe 4f       	sbci	r31, 0xFE	; 254
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	9e 01       	movw	r18, r28
    15ba:	29 5a       	subi	r18, 0xA9	; 169
    15bc:	3e 4f       	sbci	r19, 0xFE	; 254
    15be:	cb 01       	movw	r24, r22
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	f9 01       	movw	r30, r18
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	51 83       	std	Z+1, r21	; 0x01
    15cc:	40 83       	st	Z, r20
    15ce:	fe 01       	movw	r30, r28
    15d0:	e7 50       	subi	r30, 0x07	; 7
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a6 e1       	ldi	r26, 0x16	; 22
    15da:	b4 e4       	ldi	r27, 0x44	; 68
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	8e 01       	movw	r16, r28
    15e6:	0b 50       	subi	r16, 0x0B	; 11
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	fe 01       	movw	r30, r28
    15ec:	e7 50       	subi	r30, 0x07	; 7
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1612:	fe 01       	movw	r30, r28
    1614:	eb 50       	subi	r30, 0x0B	; 11
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	44 f4       	brge	.+16     	; 0x1640 <main+0xafa>
		__ticks = 1;
    1630:	fe 01       	movw	r30, r28
    1632:	ed 50       	subi	r30, 0x0D	; 13
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	64 c0       	rjmp	.+200    	; 0x1708 <main+0xbc2>
	else if (__tmp > 65535)
    1640:	fe 01       	movw	r30, r28
    1642:	eb 50       	subi	r30, 0x0B	; 11
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	0c f0       	brlt	.+2      	; 0x1660 <main+0xb1a>
    165e:	43 c0       	rjmp	.+134    	; 0x16e6 <main+0xba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	fe 01       	movw	r30, r28
    1662:	e7 50       	subi	r30, 0x07	; 7
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8e 01       	movw	r16, r28
    1680:	0d 50       	subi	r16, 0x0D	; 13
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	1f c0       	rjmp	.+62     	; 0x16d6 <main+0xb90>
    1698:	fe 01       	movw	r30, r28
    169a:	ef 50       	subi	r30, 0x0F	; 15
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	88 ec       	ldi	r24, 0xC8	; 200
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	fe 01       	movw	r30, r28
    16a8:	ef 50       	subi	r30, 0x0F	; 15
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <main+0xb6a>
    16b4:	fe 01       	movw	r30, r28
    16b6:	ef 50       	subi	r30, 0x0F	; 15
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	de 01       	movw	r26, r28
    16c0:	ad 50       	subi	r26, 0x0D	; 13
    16c2:	bf 4f       	sbci	r27, 0xFF	; 255
    16c4:	fe 01       	movw	r30, r28
    16c6:	ed 50       	subi	r30, 0x0D	; 13
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	11 96       	adiw	r26, 0x01	; 1
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	fe 01       	movw	r30, r28
    16d8:	ed 50       	subi	r30, 0x0D	; 13
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	d1 f6       	brne	.-76     	; 0x1698 <main+0xb52>
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <main+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e6:	8e 01       	movw	r16, r28
    16e8:	0d 50       	subi	r16, 0x0D	; 13
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 50       	subi	r30, 0x0B	; 11
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	de 01       	movw	r26, r28
    170a:	a1 51       	subi	r26, 0x11	; 17
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	ed 50       	subi	r30, 0x0D	; 13
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	8d 93       	st	X+, r24
    171a:	9c 93       	st	X, r25
    171c:	fe 01       	movw	r30, r28
    171e:	e1 51       	subi	r30, 0x11	; 17
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <main+0xbe0>
    172a:	fe 01       	movw	r30, r28
    172c:	e1 51       	subi	r30, 0x11	; 17
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
					_delay_ms(600);
					i++;
    1734:	de 01       	movw	r26, r28
    1736:	a5 5b       	subi	r26, 0xB5	; 181
    1738:	be 4f       	sbci	r27, 0xFE	; 254
    173a:	fe 01       	movw	r30, r28
    173c:	e5 5b       	subi	r30, 0xB5	; 181
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	8d 93       	st	X+, r24
    1748:	9c 93       	st	X, r25
				}
				data = KEYPAD_getPressedKey();
    174a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    174e:	fe 01       	movw	r30, r28
    1750:	e2 5b       	subi	r30, 0xB2	; 178
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	80 83       	st	Z, r24
    1756:	fe 01       	movw	r30, r28
    1758:	e5 51       	subi	r30, 0x15	; 21
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a6 e1       	ldi	r26, 0x16	; 22
    1762:	b4 e4       	ldi	r27, 0x44	; 68
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	8e 01       	movw	r16, r28
    176e:	09 51       	subi	r16, 0x19	; 25
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	e5 51       	subi	r30, 0x15	; 21
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	e9 51       	subi	r30, 0x19	; 25
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	44 f4       	brge	.+16     	; 0x17c8 <main+0xc82>
		__ticks = 1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	eb 51       	subi	r30, 0x1B	; 27
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	64 c0       	rjmp	.+200    	; 0x1890 <main+0xd4a>
	else if (__tmp > 65535)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e9 51       	subi	r30, 0x19	; 25
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <main+0xca2>
    17e6:	43 c0       	rjmp	.+134    	; 0x186e <main+0xd28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	fe 01       	movw	r30, r28
    17ea:	e5 51       	subi	r30, 0x15	; 21
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8e 01       	movw	r16, r28
    1808:	0b 51       	subi	r16, 0x1B	; 27
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	1f c0       	rjmp	.+62     	; 0x185e <main+0xd18>
    1820:	fe 01       	movw	r30, r28
    1822:	ed 51       	subi	r30, 0x1D	; 29
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	88 ec       	ldi	r24, 0xC8	; 200
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	fe 01       	movw	r30, r28
    1830:	ed 51       	subi	r30, 0x1D	; 29
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <main+0xcf2>
    183c:	fe 01       	movw	r30, r28
    183e:	ed 51       	subi	r30, 0x1D	; 29
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	de 01       	movw	r26, r28
    1848:	ab 51       	subi	r26, 0x1B	; 27
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	eb 51       	subi	r30, 0x1B	; 27
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	fe 01       	movw	r30, r28
    1860:	eb 51       	subi	r30, 0x1B	; 27
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	d1 f6       	brne	.-76     	; 0x1820 <main+0xcda>
    186c:	28 c0       	rjmp	.+80     	; 0x18be <main+0xd78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	8e 01       	movw	r16, r28
    1870:	0b 51       	subi	r16, 0x1B	; 27
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e9 51       	subi	r30, 0x19	; 25
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	de 01       	movw	r26, r28
    1892:	af 51       	subi	r26, 0x1F	; 31
    1894:	bf 4f       	sbci	r27, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	eb 51       	subi	r30, 0x1B	; 27
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	9c 93       	st	X, r25
    18a4:	8e 93       	st	-X, r24
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 51       	subi	r30, 0x1F	; 31
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <main+0xd6a>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ef 51       	subi	r30, 0x1F	; 31
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
			data = KEYPAD_getPressedKey();



			/*re_enter Password */
			while(data != '=')
    18be:	fe 01       	movw	r30, r28
    18c0:	e2 5b       	subi	r30, 0xB2	; 178
    18c2:	fe 4f       	sbci	r31, 0xFE	; 254
    18c4:	80 81       	ld	r24, Z
    18c6:	8d 33       	cpi	r24, 0x3D	; 61
    18c8:	09 f0       	breq	.+2      	; 0x18cc <main+0xd86>
    18ca:	95 cd       	rjmp	.-1238   	; 0x13f6 <main+0x8b0>
			}

			//_delay_ms(600);

			/*send re_pass TO MC*/
			for(i=0 ; i<5 ; i++)
    18cc:	fe 01       	movw	r30, r28
    18ce:	e5 5b       	subi	r30, 0xB5	; 181
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	11 82       	std	Z+1, r1	; 0x01
    18d4:	10 82       	st	Z, r1
    18d6:	1d c0       	rjmp	.+58     	; 0x1912 <main+0xdcc>
			{
				UART_sendByte(pass1[i]);
    18d8:	fe 01       	movw	r30, r28
    18da:	e5 5b       	subi	r30, 0xB5	; 181
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	9e 01       	movw	r18, r28
    18e4:	29 5a       	subi	r18, 0xA9	; 169
    18e6:	3e 4f       	sbci	r19, 0xFE	; 254
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	f9 01       	movw	r30, r18
    18ee:	e8 0f       	add	r30, r24
    18f0:	f9 1f       	adc	r31, r25
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
			}

			//_delay_ms(600);

			/*send re_pass TO MC*/
			for(i=0 ; i<5 ; i++)
    18fa:	de 01       	movw	r26, r28
    18fc:	a5 5b       	subi	r26, 0xB5	; 181
    18fe:	be 4f       	sbci	r27, 0xFE	; 254
    1900:	fe 01       	movw	r30, r28
    1902:	e5 5b       	subi	r30, 0xB5	; 181
    1904:	fe 4f       	sbci	r31, 0xFE	; 254
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
    1912:	fe 01       	movw	r30, r28
    1914:	e5 5b       	subi	r30, 0xB5	; 181
    1916:	fe 4f       	sbci	r31, 0xFE	; 254
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	85 30       	cpi	r24, 0x05	; 5
    191e:	91 05       	cpc	r25, r1
    1920:	dc f2       	brlt	.-74     	; 0x18d8 <main+0xd92>
			{
				UART_sendByte(pass1[i]);
			}

			pass_check =UART_recieveByte();  /* result of password checking*/
    1922:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_recieveByte>
    1926:	fe 01       	movw	r30, r28
    1928:	e7 5b       	subi	r30, 0xB7	; 183
    192a:	fe 4f       	sbci	r31, 0xFE	; 254
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
	{


		/******************************** FIRST OPTION TO SET PASSWORD********************************************/

		while(pass_check == 0)
    1934:	fe 01       	movw	r30, r28
    1936:	e7 5b       	subi	r30, 0xB7	; 183
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	09 f4       	brne	.+2      	; 0x1944 <main+0xdfe>
    1942:	93 c9       	rjmp	.-3290   	; 0xc6a <main+0x124>
    1944:	0c 94 93 18 	jmp	0x3126	; 0x3126 <main+0x25e0>
		}
		/******************************** MAIN OPTIONS********************************************/

		while(pass_check == 1)
		{
			LCD_moveCursor(0,0);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>

			LCD_clearScreen();
    1950:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
			LCD_displayString("+ : open door");
    1954:	85 e8       	ldi	r24, 0x85	; 133
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
			LCD_moveCursor(1,0);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
			LCD_displayString("- : change pass");
    1964:	83 e9       	ldi	r24, 0x93	; 147
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    196c:	fe 01       	movw	r30, r28
    196e:	e3 52       	subi	r30, 0x23	; 35
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a6 e1       	ldi	r26, 0x16	; 22
    1978:	b4 e4       	ldi	r27, 0x44	; 68
    197a:	80 83       	st	Z, r24
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1982:	8e 01       	movw	r16, r28
    1984:	07 52       	subi	r16, 0x27	; 39
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	e3 52       	subi	r30, 0x23	; 35
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	f8 01       	movw	r30, r16
    19a8:	80 83       	st	Z, r24
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	a2 83       	std	Z+2, r26	; 0x02
    19ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b0:	fe 01       	movw	r30, r28
    19b2:	e7 52       	subi	r30, 0x27	; 39
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	44 f4       	brge	.+16     	; 0x19de <main+0xe98>
		__ticks = 1;
    19ce:	fe 01       	movw	r30, r28
    19d0:	e9 52       	subi	r30, 0x29	; 41
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	64 c0       	rjmp	.+200    	; 0x1aa6 <main+0xf60>
	else if (__tmp > 65535)
    19de:	fe 01       	movw	r30, r28
    19e0:	e7 52       	subi	r30, 0x27	; 39
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	60 81       	ld	r22, Z
    19e6:	71 81       	ldd	r23, Z+1	; 0x01
    19e8:	82 81       	ldd	r24, Z+2	; 0x02
    19ea:	93 81       	ldd	r25, Z+3	; 0x03
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <main+0xeb8>
    19fc:	43 c0       	rjmp	.+134    	; 0x1a84 <main+0xf3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	fe 01       	movw	r30, r28
    1a00:	e3 52       	subi	r30, 0x23	; 35
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	09 52       	subi	r16, 0x29	; 41
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	f8 01       	movw	r30, r16
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	1f c0       	rjmp	.+62     	; 0x1a74 <main+0xf2e>
    1a36:	fe 01       	movw	r30, r28
    1a38:	eb 52       	subi	r30, 0x2B	; 43
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	88 ec       	ldi	r24, 0xC8	; 200
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
    1a44:	fe 01       	movw	r30, r28
    1a46:	eb 52       	subi	r30, 0x2B	; 43
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <main+0xf08>
    1a52:	fe 01       	movw	r30, r28
    1a54:	eb 52       	subi	r30, 0x2B	; 43
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	de 01       	movw	r26, r28
    1a5e:	a9 52       	subi	r26, 0x29	; 41
    1a60:	bf 4f       	sbci	r27, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	e9 52       	subi	r30, 0x29	; 41
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	11 96       	adiw	r26, 0x01	; 1
    1a70:	9c 93       	st	X, r25
    1a72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	fe 01       	movw	r30, r28
    1a76:	e9 52       	subi	r30, 0x29	; 41
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	d1 f6       	brne	.-76     	; 0x1a36 <main+0xef0>
    1a82:	27 c0       	rjmp	.+78     	; 0x1ad2 <main+0xf8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	8e 01       	movw	r16, r28
    1a86:	09 52       	subi	r16, 0x29	; 41
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 52       	subi	r30, 0x27	; 39
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	de 01       	movw	r26, r28
    1aa8:	ad 52       	subi	r26, 0x2D	; 45
    1aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	e9 52       	subi	r30, 0x29	; 41
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	8d 93       	st	X+, r24
    1ab8:	9c 93       	st	X, r25
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 52       	subi	r30, 0x2D	; 45
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <main+0xf7e>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ed 52       	subi	r30, 0x2D	; 45
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
			_delay_ms(600);
			condition = KEYPAD_getPressedKey();
    1ad2:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e3 5b       	subi	r30, 0xB3	; 179
    1ada:	fe 4f       	sbci	r31, 0xFE	; 254
    1adc:	80 83       	st	Z, r24


			/************open door CASE********************/

			if(condition == '+' )
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e3 5b       	subi	r30, 0xB3	; 179
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8b 32       	cpi	r24, 0x2B	; 43
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <main+0xfa6>
    1aea:	bc c6       	rjmp	.+3448   	; 0x2864 <main+0x1d1e>
    1aec:	a4 c6       	rjmp	.+3400   	; 0x2836 <main+0x1cf0>
			{
				while(door_pass == 0)
				{
					UART_sendByte('#');  /*door code send to MC*/
    1aee:	83 e2       	ldi	r24, 0x23	; 35
    1af0:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
					LCD_clearScreen();
    1af4:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
					LCD_displayString("enter password");
    1af8:	83 ea       	ldi	r24, 0xA3	; 163
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e1 53       	subi	r30, 0x31	; 49
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a6 e1       	ldi	r26, 0x16	; 22
    1b0c:	b4 e4       	ldi	r27, 0x44	; 68
    1b0e:	80 83       	st	Z, r24
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	a2 83       	std	Z+2, r26	; 0x02
    1b14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	8e 01       	movw	r16, r28
    1b18:	05 53       	subi	r16, 0x35	; 53
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e1 53       	subi	r30, 0x31	; 49
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4a ef       	ldi	r20, 0xFA	; 250
    1b30:	54 e4       	ldi	r21, 0x44	; 68
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	80 83       	st	Z, r24
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	a2 83       	std	Z+2, r26	; 0x02
    1b42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b44:	fe 01       	movw	r30, r28
    1b46:	e5 53       	subi	r30, 0x35	; 53
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	44 f4       	brge	.+16     	; 0x1b72 <main+0x102c>
		__ticks = 1;
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 53       	subi	r30, 0x37	; 55
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	64 c0       	rjmp	.+200    	; 0x1c3a <main+0x10f4>
	else if (__tmp > 65535)
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 53       	subi	r30, 0x35	; 53
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	0c f0       	brlt	.+2      	; 0x1b92 <main+0x104c>
    1b90:	43 c0       	rjmp	.+134    	; 0x1c18 <main+0x10d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	fe 01       	movw	r30, r28
    1b94:	e1 53       	subi	r30, 0x31	; 49
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	07 53       	subi	r16, 0x37	; 55
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	1f c0       	rjmp	.+62     	; 0x1c08 <main+0x10c2>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 53       	subi	r30, 0x39	; 57
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	88 ec       	ldi	r24, 0xC8	; 200
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e9 53       	subi	r30, 0x39	; 57
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <main+0x109c>
    1be6:	fe 01       	movw	r30, r28
    1be8:	e9 53       	subi	r30, 0x39	; 57
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	de 01       	movw	r26, r28
    1bf2:	a7 53       	subi	r26, 0x37	; 55
    1bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e7 53       	subi	r30, 0x37	; 55
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	9c 93       	st	X, r25
    1c06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 53       	subi	r30, 0x37	; 55
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	d1 f6       	brne	.-76     	; 0x1bca <main+0x1084>
    1c16:	27 c0       	rjmp	.+78     	; 0x1c66 <main+0x1120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	8e 01       	movw	r16, r28
    1c1a:	07 53       	subi	r16, 0x37	; 55
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e5 53       	subi	r30, 0x35	; 53
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	f8 01       	movw	r30, r16
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
    1c3a:	de 01       	movw	r26, r28
    1c3c:	ab 53       	subi	r26, 0x3B	; 59
    1c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	e7 53       	subi	r30, 0x37	; 55
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	8d 93       	st	X+, r24
    1c4c:	9c 93       	st	X, r25
    1c4e:	fe 01       	movw	r30, r28
    1c50:	eb 53       	subi	r30, 0x3B	; 59
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <main+0x1112>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	eb 53       	subi	r30, 0x3B	; 59
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
    1c66:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e2 5b       	subi	r30, 0xB2	; 178
    1c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c70:	80 83       	st	Z, r24
					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e5 5b       	subi	r30, 0xB5	; 181
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	10 82       	st	Z, r1
    1c7c:	1b c0       	rjmp	.+54     	; 0x1cb4 <main+0x116e>
					{

						pass1[i] = 0;
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e5 5b       	subi	r30, 0xB5	; 181
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	9e 01       	movw	r18, r28
    1c8a:	29 5a       	subi	r18, 0xA9	; 169
    1c8c:	3e 4f       	sbci	r19, 0xFE	; 254
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	f9 01       	movw	r30, r18
    1c94:	e8 0f       	add	r30, r24
    1c96:	f9 1f       	adc	r31, r25
    1c98:	11 82       	std	Z+1, r1	; 0x01
    1c9a:	10 82       	st	Z, r1
					LCD_clearScreen();
					LCD_displayString("enter password");
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    1c9c:	de 01       	movw	r26, r28
    1c9e:	a5 5b       	subi	r26, 0xB5	; 181
    1ca0:	be 4f       	sbci	r27, 0xFE	; 254
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e5 5b       	subi	r30, 0xB5	; 181
    1ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	11 96       	adiw	r26, 0x01	; 1
    1cb0:	9c 93       	st	X, r25
    1cb2:	8e 93       	st	-X, r24
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e5 5b       	subi	r30, 0xB5	; 181
    1cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	85 30       	cpi	r24, 0x05	; 5
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	ec f2       	brlt	.-70     	; 0x1c7e <main+0x1138>
					{

						pass1[i] = 0;

					}
					i=0;
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 5b       	subi	r30, 0xB5	; 181
    1cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cca:	11 82       	std	Z+1, r1	; 0x01
    1ccc:	10 82       	st	Z, r1
    1cce:	6c c2       	rjmp	.+1240   	; 0x21a8 <main+0x1662>
					//LCD_moveCursor(1,i);
					while(data != '=')
					{
						if (i==5)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e5 5b       	subi	r30, 0xB5	; 181
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	85 30       	cpi	r24, 0x05	; 5
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <main+0x119c>
    1ce0:	a9 c1       	rjmp	.+850    	; 0x2034 <main+0x14ee>
						{
							/* do nothinf*/
						}

						else if (data != '=')
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e2 5b       	subi	r30, 0xB2	; 178
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	80 81       	ld	r24, Z
    1cea:	8d 33       	cpi	r24, 0x3D	; 61
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <main+0x11aa>
    1cee:	a2 c1       	rjmp	.+836    	; 0x2034 <main+0x14ee>
						{
							LCD_moveCursor(1,i);
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e5 5b       	subi	r30, 0xB5	; 181
    1cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf6:	90 81       	ld	r25, Z
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
							LCD_intgerToString(data);
    1d00:	fe 01       	movw	r30, r28
    1d02:	e2 5b       	subi	r30, 0xB2	; 178
    1d04:	fe 4f       	sbci	r31, 0xFE	; 254
    1d06:	80 81       	ld	r24, Z
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 0f 23 	call	0x461e	; 0x461e <LCD_intgerToString>
							LCD_moveCursor(1,i);
    1d10:	fe 01       	movw	r30, r28
    1d12:	e5 5b       	subi	r30, 0xB5	; 181
    1d14:	fe 4f       	sbci	r31, 0xFE	; 254
    1d16:	90 81       	ld	r25, Z
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	69 2f       	mov	r22, r25
    1d1c:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 53       	subi	r30, 0x3F	; 63
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	aa e7       	ldi	r26, 0x7A	; 122
    1d2c:	b3 e4       	ldi	r27, 0x43	; 67
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	8e 01       	movw	r16, r28
    1d38:	03 54       	subi	r16, 0x43	; 67
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 53       	subi	r30, 0x3F	; 63
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d64:	fe 01       	movw	r30, r28
    1d66:	e3 54       	subi	r30, 0x43	; 67
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <main+0x124c>
		__ticks = 1;
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 54       	subi	r30, 0x45	; 69
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <main+0x1314>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	e3 54       	subi	r30, 0x43	; 67
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <main+0x126c>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <main+0x12f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 53       	subi	r30, 0x3F	; 63
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	05 54       	subi	r16, 0x45	; 69
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	1f c0       	rjmp	.+62     	; 0x1e28 <main+0x12e2>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 54       	subi	r30, 0x47	; 71
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 54       	subi	r30, 0x47	; 71
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <main+0x12bc>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 54       	subi	r30, 0x47	; 71
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	de 01       	movw	r26, r28
    1e12:	a5 54       	subi	r26, 0x45	; 69
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 54       	subi	r30, 0x45	; 69
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e5 54       	subi	r30, 0x45	; 69
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	d1 f6       	brne	.-76     	; 0x1dea <main+0x12a4>
    1e36:	27 c0       	rjmp	.+78     	; 0x1e86 <main+0x1340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	05 54       	subi	r16, 0x45	; 69
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e3 54       	subi	r30, 0x43	; 67
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a9 54       	subi	r26, 0x49	; 73
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 54       	subi	r30, 0x45	; 69
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	8d 93       	st	X+, r24
    1e6c:	9c 93       	st	X, r25
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 54       	subi	r30, 0x49	; 73
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <main+0x1332>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 54       	subi	r30, 0x49	; 73
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
							_delay_ms(250);
							LCD_displayCharacter('*');
    1e86:	8a e2       	ldi	r24, 0x2A	; 42
    1e88:	0e 94 8f 20 	call	0x411e	; 0x411e <LCD_displayCharacter>
							pass1[i] = data;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e5 5b       	subi	r30, 0xB5	; 181
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	fe 01       	movw	r30, r28
    1e98:	e2 5b       	subi	r30, 0xB2	; 178
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	9e 01       	movw	r18, r28
    1ea4:	29 5a       	subi	r18, 0xA9	; 169
    1ea6:	3e 4f       	sbci	r19, 0xFE	; 254
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	f9 01       	movw	r30, r18
    1eb0:	e8 0f       	add	r30, r24
    1eb2:	f9 1f       	adc	r31, r25
    1eb4:	51 83       	std	Z+1, r21	; 0x01
    1eb6:	40 83       	st	Z, r20
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ed 54       	subi	r30, 0x4D	; 77
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a6 e1       	ldi	r26, 0x16	; 22
    1ec4:	b4 e4       	ldi	r27, 0x44	; 68
    1ec6:	80 83       	st	Z, r24
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	8e 01       	movw	r16, r28
    1ed0:	01 55       	subi	r16, 0x51	; 81
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ed 54       	subi	r30, 0x4D	; 77
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4a ef       	ldi	r20, 0xFA	; 250
    1ee8:	54 e4       	ldi	r21, 0x44	; 68
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efc:	fe 01       	movw	r30, r28
    1efe:	e1 55       	subi	r30, 0x51	; 81
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	44 f4       	brge	.+16     	; 0x1f2a <main+0x13e4>
		__ticks = 1;
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e3 55       	subi	r30, 0x53	; 83
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	64 c0       	rjmp	.+200    	; 0x1ff2 <main+0x14ac>
	else if (__tmp > 65535)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e1 55       	subi	r30, 0x51	; 81
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	0c f0       	brlt	.+2      	; 0x1f4a <main+0x1404>
    1f48:	43 c0       	rjmp	.+134    	; 0x1fd0 <main+0x148a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 54       	subi	r30, 0x4D	; 77
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8e 01       	movw	r16, r28
    1f6a:	03 55       	subi	r16, 0x53	; 83
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	1f c0       	rjmp	.+62     	; 0x1fc0 <main+0x147a>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e5 55       	subi	r30, 0x55	; 85
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	88 ec       	ldi	r24, 0xC8	; 200
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	fe 01       	movw	r30, r28
    1f92:	e5 55       	subi	r30, 0x55	; 85
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <main+0x1454>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e5 55       	subi	r30, 0x55	; 85
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	de 01       	movw	r26, r28
    1faa:	a3 55       	subi	r26, 0x53	; 83
    1fac:	bf 4f       	sbci	r27, 0xFF	; 255
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e3 55       	subi	r30, 0x53	; 83
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	9c 93       	st	X, r25
    1fbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e3 55       	subi	r30, 0x53	; 83
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	d1 f6       	brne	.-76     	; 0x1f82 <main+0x143c>
    1fce:	27 c0       	rjmp	.+78     	; 0x201e <main+0x14d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	03 55       	subi	r16, 0x53	; 83
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e1 55       	subi	r30, 0x51	; 81
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	de 01       	movw	r26, r28
    1ff4:	a7 55       	subi	r26, 0x57	; 87
    1ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e3 55       	subi	r30, 0x53	; 83
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	8d 93       	st	X+, r24
    2004:	9c 93       	st	X, r25
    2006:	fe 01       	movw	r30, r28
    2008:	e7 55       	subi	r30, 0x57	; 87
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <main+0x14ca>
    2014:	fe 01       	movw	r30, r28
    2016:	e7 55       	subi	r30, 0x57	; 87
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
							_delay_ms(600);
							i++;
    201e:	de 01       	movw	r26, r28
    2020:	a5 5b       	subi	r26, 0xB5	; 181
    2022:	be 4f       	sbci	r27, 0xFE	; 254
    2024:	fe 01       	movw	r30, r28
    2026:	e5 5b       	subi	r30, 0xB5	; 181
    2028:	fe 4f       	sbci	r31, 0xFE	; 254
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	8d 93       	st	X+, r24
    2032:	9c 93       	st	X, r25
						}
						data = KEYPAD_getPressedKey();
    2034:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    2038:	fe 01       	movw	r30, r28
    203a:	e2 5b       	subi	r30, 0xB2	; 178
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	80 83       	st	Z, r24
    2040:	fe 01       	movw	r30, r28
    2042:	eb 55       	subi	r30, 0x5B	; 91
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a6 e1       	ldi	r26, 0x16	; 22
    204c:	b4 e4       	ldi	r27, 0x44	; 68
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	8e 01       	movw	r16, r28
    2058:	0f 55       	subi	r16, 0x5F	; 95
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	eb 55       	subi	r30, 0x5B	; 91
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	80 83       	st	Z, r24
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	a2 83       	std	Z+2, r26	; 0x02
    2082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2084:	fe 01       	movw	r30, r28
    2086:	ef 55       	subi	r30, 0x5F	; 95
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	44 f4       	brge	.+16     	; 0x20b2 <main+0x156c>
		__ticks = 1;
    20a2:	fe 01       	movw	r30, r28
    20a4:	e1 56       	subi	r30, 0x61	; 97
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	64 c0       	rjmp	.+200    	; 0x217a <main+0x1634>
	else if (__tmp > 65535)
    20b2:	fe 01       	movw	r30, r28
    20b4:	ef 55       	subi	r30, 0x5F	; 95
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <main+0x158c>
    20d0:	43 c0       	rjmp	.+134    	; 0x2158 <main+0x1612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	fe 01       	movw	r30, r28
    20d4:	eb 55       	subi	r30, 0x5B	; 91
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8e 01       	movw	r16, r28
    20f2:	01 56       	subi	r16, 0x61	; 97
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	1f c0       	rjmp	.+62     	; 0x2148 <main+0x1602>
    210a:	fe 01       	movw	r30, r28
    210c:	e3 56       	subi	r30, 0x63	; 99
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
    2118:	fe 01       	movw	r30, r28
    211a:	e3 56       	subi	r30, 0x63	; 99
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <main+0x15dc>
    2126:	fe 01       	movw	r30, r28
    2128:	e3 56       	subi	r30, 0x63	; 99
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	de 01       	movw	r26, r28
    2132:	a1 56       	subi	r26, 0x61	; 97
    2134:	bf 4f       	sbci	r27, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	e1 56       	subi	r30, 0x61	; 97
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	9c 93       	st	X, r25
    2146:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	fe 01       	movw	r30, r28
    214a:	e1 56       	subi	r30, 0x61	; 97
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	d1 f6       	brne	.-76     	; 0x210a <main+0x15c4>
    2156:	28 c0       	rjmp	.+80     	; 0x21a8 <main+0x1662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	8e 01       	movw	r16, r28
    215a:	01 56       	subi	r16, 0x61	; 97
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	fe 01       	movw	r30, r28
    2160:	ef 55       	subi	r30, 0x5F	; 95
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	de 01       	movw	r26, r28
    217c:	a5 56       	subi	r26, 0x65	; 101
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e1 56       	subi	r30, 0x61	; 97
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
    2190:	fe 01       	movw	r30, r28
    2192:	e5 56       	subi	r30, 0x65	; 101
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <main+0x1654>
    219e:	fe 01       	movw	r30, r28
    21a0:	e5 56       	subi	r30, 0x65	; 101
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
						pass1[i] = 0;

					}
					i=0;
					//LCD_moveCursor(1,i);
					while(data != '=')
    21a8:	fe 01       	movw	r30, r28
    21aa:	e2 5b       	subi	r30, 0xB2	; 178
    21ac:	fe 4f       	sbci	r31, 0xFE	; 254
    21ae:	80 81       	ld	r24, Z
    21b0:	8d 33       	cpi	r24, 0x3D	; 61
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <main+0x1670>
    21b4:	8d cd       	rjmp	.-1254   	; 0x1cd0 <main+0x118a>
						}
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}
					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    21b6:	fe 01       	movw	r30, r28
    21b8:	e5 5b       	subi	r30, 0xB5	; 181
    21ba:	fe 4f       	sbci	r31, 0xFE	; 254
    21bc:	11 82       	std	Z+1, r1	; 0x01
    21be:	10 82       	st	Z, r1
    21c0:	1d c0       	rjmp	.+58     	; 0x21fc <main+0x16b6>
					{
						UART_sendByte(pass1[i]);
    21c2:	fe 01       	movw	r30, r28
    21c4:	e5 5b       	subi	r30, 0xB5	; 181
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	9e 01       	movw	r18, r28
    21ce:	29 5a       	subi	r18, 0xA9	; 169
    21d0:	3e 4f       	sbci	r19, 0xFE	; 254
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	f9 01       	movw	r30, r18
    21d8:	e8 0f       	add	r30, r24
    21da:	f9 1f       	adc	r31, r25
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
						}
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}
					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    21e4:	de 01       	movw	r26, r28
    21e6:	a5 5b       	subi	r26, 0xB5	; 181
    21e8:	be 4f       	sbci	r27, 0xFE	; 254
    21ea:	fe 01       	movw	r30, r28
    21ec:	e5 5b       	subi	r30, 0xB5	; 181
    21ee:	fe 4f       	sbci	r31, 0xFE	; 254
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	11 96       	adiw	r26, 0x01	; 1
    21f8:	9c 93       	st	X, r25
    21fa:	8e 93       	st	-X, r24
    21fc:	fe 01       	movw	r30, r28
    21fe:	e5 5b       	subi	r30, 0xB5	; 181
    2200:	fe 4f       	sbci	r31, 0xFE	; 254
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	85 30       	cpi	r24, 0x05	; 5
    2208:	91 05       	cpc	r25, r1
    220a:	dc f2       	brlt	.-74     	; 0x21c2 <main+0x167c>
					{
						UART_sendByte(pass1[i]);
					}
					door_pass = UART_recieveByte(); /* receive pass checking result*/
    220c:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_recieveByte>
    2210:	fe 01       	movw	r30, r28
    2212:	e9 5b       	subi	r30, 0xB9	; 185
    2214:	fe 4f       	sbci	r31, 0xFE	; 254
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
					if(door_pass)
    221e:	fe 01       	movw	r30, r28
    2220:	e9 5b       	subi	r30, 0xB9	; 185
    2222:	fe 4f       	sbci	r31, 0xFE	; 254
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	09 f4       	brne	.+2      	; 0x222e <main+0x16e8>
    222c:	2b c2       	rjmp	.+1110   	; 0x2684 <main+0x1b3e>
					{
						LCD_clearScreen();
    222e:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
						LCD_displayString("door is unlocking");
    2232:	82 eb       	ldi	r24, 0xB2	; 178
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    223a:	fe 01       	movw	r30, r28
    223c:	e9 56       	subi	r30, 0x69	; 105
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	aa e7       	ldi	r26, 0x7A	; 122
    2246:	b4 e4       	ldi	r27, 0x44	; 68
    2248:	80 83       	st	Z, r24
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	a2 83       	std	Z+2, r26	; 0x02
    224e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2250:	8e 01       	movw	r16, r28
    2252:	0d 56       	subi	r16, 0x6D	; 109
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e9 56       	subi	r30, 0x69	; 105
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a ef       	ldi	r20, 0xFA	; 250
    226a:	54 e4       	ldi	r21, 0x44	; 68
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	f8 01       	movw	r30, r16
    2276:	80 83       	st	Z, r24
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	a2 83       	std	Z+2, r26	; 0x02
    227c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    227e:	fe 01       	movw	r30, r28
    2280:	ed 56       	subi	r30, 0x6D	; 109
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	44 f4       	brge	.+16     	; 0x22ac <main+0x1766>
		__ticks = 1;
    229c:	fe 01       	movw	r30, r28
    229e:	ef 56       	subi	r30, 0x6F	; 111
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
    22aa:	64 c0       	rjmp	.+200    	; 0x2374 <main+0x182e>
	else if (__tmp > 65535)
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 56       	subi	r30, 0x6D	; 109
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	0c f0       	brlt	.+2      	; 0x22cc <main+0x1786>
    22ca:	43 c0       	rjmp	.+134    	; 0x2352 <main+0x180c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22cc:	fe 01       	movw	r30, r28
    22ce:	e9 56       	subi	r30, 0x69	; 105
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8e 01       	movw	r16, r28
    22ec:	0f 56       	subi	r16, 0x6F	; 111
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	f8 01       	movw	r30, r16
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	1f c0       	rjmp	.+62     	; 0x2342 <main+0x17fc>
    2304:	fe 01       	movw	r30, r28
    2306:	e1 57       	subi	r30, 0x71	; 113
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	fe 01       	movw	r30, r28
    2314:	e1 57       	subi	r30, 0x71	; 113
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <main+0x17d6>
    2320:	fe 01       	movw	r30, r28
    2322:	e1 57       	subi	r30, 0x71	; 113
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	de 01       	movw	r26, r28
    232c:	af 56       	subi	r26, 0x6F	; 111
    232e:	bf 4f       	sbci	r27, 0xFF	; 255
    2330:	fe 01       	movw	r30, r28
    2332:	ef 56       	subi	r30, 0x6F	; 111
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	11 96       	adiw	r26, 0x01	; 1
    233e:	9c 93       	st	X, r25
    2340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	fe 01       	movw	r30, r28
    2344:	ef 56       	subi	r30, 0x6F	; 111
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	d1 f6       	brne	.-76     	; 0x2304 <main+0x17be>
    2350:	27 c0       	rjmp	.+78     	; 0x23a0 <main+0x185a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	8e 01       	movw	r16, r28
    2354:	0f 56       	subi	r16, 0x6F	; 111
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	ed 56       	subi	r30, 0x6D	; 109
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	f8 01       	movw	r30, r16
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	80 83       	st	Z, r24
    2374:	de 01       	movw	r26, r28
    2376:	a3 57       	subi	r26, 0x73	; 115
    2378:	bf 4f       	sbci	r27, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	ef 56       	subi	r30, 0x6F	; 111
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	8d 93       	st	X+, r24
    2386:	9c 93       	st	X, r25
    2388:	fe 01       	movw	r30, r28
    238a:	e3 57       	subi	r30, 0x73	; 115
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <main+0x184c>
    2396:	fe 01       	movw	r30, r28
    2398:	e3 57       	subi	r30, 0x73	; 115
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearScreen();
    23a0:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
						LCD_displayString("door is open");
    23a4:	84 ec       	ldi	r24, 0xC4	; 196
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 57       	subi	r30, 0x77	; 119
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	aa ef       	ldi	r26, 0xFA	; 250
    23b8:	b4 e4       	ldi	r27, 0x44	; 68
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	8e 01       	movw	r16, r28
    23c4:	0b 57       	subi	r16, 0x7B	; 123
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	fe 01       	movw	r30, r28
    23ca:	e7 57       	subi	r30, 0x77	; 119
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f0:	fe 01       	movw	r30, r28
    23f2:	eb 57       	subi	r30, 0x7B	; 123
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	44 f4       	brge	.+16     	; 0x241e <main+0x18d8>
		__ticks = 1;
    240e:	fe 01       	movw	r30, r28
    2410:	ed 57       	subi	r30, 0x7D	; 125
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <main+0x19a0>
	else if (__tmp > 65535)
    241e:	fe 01       	movw	r30, r28
    2420:	eb 57       	subi	r30, 0x7B	; 123
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <main+0x18f8>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <main+0x197e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	fe 01       	movw	r30, r28
    2440:	e7 57       	subi	r30, 0x77	; 119
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	8e 01       	movw	r16, r28
    245e:	0d 57       	subi	r16, 0x7D	; 125
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	f8 01       	movw	r30, r16
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	1f c0       	rjmp	.+62     	; 0x24b4 <main+0x196e>
    2476:	fe 01       	movw	r30, r28
    2478:	ef 57       	subi	r30, 0x7F	; 127
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	fe 01       	movw	r30, r28
    2486:	ef 57       	subi	r30, 0x7F	; 127
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <main+0x1948>
    2492:	fe 01       	movw	r30, r28
    2494:	ef 57       	subi	r30, 0x7F	; 127
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	de 01       	movw	r26, r28
    249e:	ad 57       	subi	r26, 0x7D	; 125
    24a0:	bf 4f       	sbci	r27, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 57       	subi	r30, 0x7D	; 125
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 57       	subi	r30, 0x7D	; 125
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	d1 f6       	brne	.-76     	; 0x2476 <main+0x1930>
    24c2:	27 c0       	rjmp	.+78     	; 0x2512 <main+0x19cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	8e 01       	movw	r16, r28
    24c6:	0d 57       	subi	r16, 0x7D	; 125
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	eb 57       	subi	r30, 0x7B	; 123
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	de 01       	movw	r26, r28
    24e8:	a1 58       	subi	r26, 0x81	; 129
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	ed 57       	subi	r30, 0x7D	; 125
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	8d 93       	st	X+, r24
    24f8:	9c 93       	st	X, r25
    24fa:	fe 01       	movw	r30, r28
    24fc:	e1 58       	subi	r30, 0x81	; 129
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <main+0x19be>
    2508:	fe 01       	movw	r30, r28
    250a:	e1 58       	subi	r30, 0x81	; 129
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
						_delay_ms(2000);
						LCD_clearScreen();
    2512:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
						LCD_displayString("door is Locking");
    2516:	81 ed       	ldi	r24, 0xD1	; 209
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    251e:	fe 01       	movw	r30, r28
    2520:	e5 58       	subi	r30, 0x85	; 133
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	aa e7       	ldi	r26, 0x7A	; 122
    252a:	b4 e4       	ldi	r27, 0x44	; 68
    252c:	80 83       	st	Z, r24
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	a2 83       	std	Z+2, r26	; 0x02
    2532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	8e 01       	movw	r16, r28
    2536:	09 58       	subi	r16, 0x89	; 137
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	e5 58       	subi	r30, 0x85	; 133
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	80 83       	st	Z, r24
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	a2 83       	std	Z+2, r26	; 0x02
    2560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2562:	fe 01       	movw	r30, r28
    2564:	e9 58       	subi	r30, 0x89	; 137
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	44 f4       	brge	.+16     	; 0x2590 <main+0x1a4a>
		__ticks = 1;
    2580:	fe 01       	movw	r30, r28
    2582:	eb 58       	subi	r30, 0x8B	; 139
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	64 c0       	rjmp	.+200    	; 0x2658 <main+0x1b12>
	else if (__tmp > 65535)
    2590:	fe 01       	movw	r30, r28
    2592:	e9 58       	subi	r30, 0x89	; 137
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	0c f0       	brlt	.+2      	; 0x25b0 <main+0x1a6a>
    25ae:	43 c0       	rjmp	.+134    	; 0x2636 <main+0x1af0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	fe 01       	movw	r30, r28
    25b2:	e5 58       	subi	r30, 0x85	; 133
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8e 01       	movw	r16, r28
    25d0:	0b 58       	subi	r16, 0x8B	; 139
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <main+0x1ae0>
    25e8:	fe 01       	movw	r30, r28
    25ea:	ed 58       	subi	r30, 0x8D	; 141
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    25f6:	fe 01       	movw	r30, r28
    25f8:	ed 58       	subi	r30, 0x8D	; 141
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <main+0x1aba>
    2604:	fe 01       	movw	r30, r28
    2606:	ed 58       	subi	r30, 0x8D	; 141
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	de 01       	movw	r26, r28
    2610:	ab 58       	subi	r26, 0x8B	; 139
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	eb 58       	subi	r30, 0x8B	; 139
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	9c 93       	st	X, r25
    2624:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	fe 01       	movw	r30, r28
    2628:	eb 58       	subi	r30, 0x8B	; 139
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	d1 f6       	brne	.-76     	; 0x25e8 <main+0x1aa2>
    2634:	27 c0       	rjmp	.+78     	; 0x2684 <main+0x1b3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	8e 01       	movw	r16, r28
    2638:	0b 58       	subi	r16, 0x8B	; 139
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e9 58       	subi	r30, 0x89	; 137
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	de 01       	movw	r26, r28
    265a:	af 58       	subi	r26, 0x8F	; 143
    265c:	bf 4f       	sbci	r27, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	eb 58       	subi	r30, 0x8B	; 139
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	8d 93       	st	X+, r24
    266a:	9c 93       	st	X, r25
    266c:	fe 01       	movw	r30, r28
    266e:	ef 58       	subi	r30, 0x8F	; 143
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <main+0x1b30>
    267a:	fe 01       	movw	r30, r28
    267c:	ef 58       	subi	r30, 0x8F	; 143
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24

					/*if(door_pass)
					{

					}*/
					error++;
    2684:	de 01       	movw	r26, r28
    2686:	ad 5b       	subi	r26, 0xBD	; 189
    2688:	be 4f       	sbci	r27, 0xFE	; 254
    268a:	fe 01       	movw	r30, r28
    268c:	ed 5b       	subi	r30, 0xBD	; 189
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	9c 93       	st	X, r25
    269a:	8e 93       	st	-X, r24
					/******in case of error send 'E' to MC******/
					if(error==3)
    269c:	fe 01       	movw	r30, r28
    269e:	ed 5b       	subi	r30, 0xBD	; 189
    26a0:	fe 4f       	sbci	r31, 0xFE	; 254
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	83 30       	cpi	r24, 0x03	; 3
    26a8:	91 05       	cpc	r25, r1
    26aa:	09 f0       	breq	.+2      	; 0x26ae <main+0x1b68>
    26ac:	c4 c0       	rjmp	.+392    	; 0x2836 <main+0x1cf0>
					{
						UART_sendByte('E');   /* send 'E' to MC*/
    26ae:	85 e4       	ldi	r24, 0x45	; 69
    26b0:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
						LCD_clearScreen();
    26b4:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
						LCD_displayString("error");
    26b8:	81 ee       	ldi	r24, 0xE1	; 225
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
						door_pass=1;
    26c0:	fe 01       	movw	r30, r28
    26c2:	e9 5b       	subi	r30, 0xB9	; 185
    26c4:	fe 4f       	sbci	r31, 0xFE	; 254
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	fe 01       	movw	r30, r28
    26d0:	e3 59       	subi	r30, 0x93	; 147
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	aa e7       	ldi	r26, 0x7A	; 122
    26da:	b4 e4       	ldi	r27, 0x44	; 68
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	8e 01       	movw	r16, r28
    26e6:	07 59       	subi	r16, 0x97	; 151
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e3 59       	subi	r30, 0x93	; 147
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a ef       	ldi	r20, 0xFA	; 250
    26fe:	54 e4       	ldi	r21, 0x44	; 68
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	f8 01       	movw	r30, r16
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2712:	fe 01       	movw	r30, r28
    2714:	e7 59       	subi	r30, 0x97	; 151
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	44 f4       	brge	.+16     	; 0x2740 <main+0x1bfa>
		__ticks = 1;
    2730:	fe 01       	movw	r30, r28
    2732:	e9 59       	subi	r30, 0x99	; 153
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
    273e:	64 c0       	rjmp	.+200    	; 0x2808 <main+0x1cc2>
	else if (__tmp > 65535)
    2740:	fe 01       	movw	r30, r28
    2742:	e7 59       	subi	r30, 0x97	; 151
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	0c f0       	brlt	.+2      	; 0x2760 <main+0x1c1a>
    275e:	43 c0       	rjmp	.+134    	; 0x27e6 <main+0x1ca0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	fe 01       	movw	r30, r28
    2762:	e3 59       	subi	r30, 0x93	; 147
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8e 01       	movw	r16, r28
    2780:	09 59       	subi	r16, 0x99	; 153
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	1f c0       	rjmp	.+62     	; 0x27d6 <main+0x1c90>
    2798:	fe 01       	movw	r30, r28
    279a:	eb 59       	subi	r30, 0x9B	; 155
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	88 ec       	ldi	r24, 0xC8	; 200
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	fe 01       	movw	r30, r28
    27a8:	eb 59       	subi	r30, 0x9B	; 155
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0x1c6a>
    27b4:	fe 01       	movw	r30, r28
    27b6:	eb 59       	subi	r30, 0x9B	; 155
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	de 01       	movw	r26, r28
    27c0:	a9 59       	subi	r26, 0x99	; 153
    27c2:	bf 4f       	sbci	r27, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	e9 59       	subi	r30, 0x99	; 153
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	11 96       	adiw	r26, 0x01	; 1
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 59       	subi	r30, 0x99	; 153
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	d1 f6       	brne	.-76     	; 0x2798 <main+0x1c52>
    27e4:	28 c0       	rjmp	.+80     	; 0x2836 <main+0x1cf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	8e 01       	movw	r16, r28
    27e8:	09 59       	subi	r16, 0x99	; 153
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	e7 59       	subi	r30, 0x97	; 151
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
    2808:	de 01       	movw	r26, r28
    280a:	ad 59       	subi	r26, 0x9D	; 157
    280c:	bf 4f       	sbci	r27, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	e9 59       	subi	r30, 0x99	; 153
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
    281e:	fe 01       	movw	r30, r28
    2820:	ed 59       	subi	r30, 0x9D	; 157
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <main+0x1ce2>
    282c:	fe 01       	movw	r30, r28
    282e:	ed 59       	subi	r30, 0x9D	; 157
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24

			/************open door CASE********************/

			if(condition == '+' )
			{
				while(door_pass == 0)
    2836:	fe 01       	movw	r30, r28
    2838:	e9 5b       	subi	r30, 0xB9	; 185
    283a:	fe 4f       	sbci	r31, 0xFE	; 254
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	09 f4       	brne	.+2      	; 0x2846 <main+0x1d00>
    2844:	54 c9       	rjmp	.-3416   	; 0x1aee <main+0xfa8>
					}

				}


				door_pass = 0;  /* to go in  while loop of door_case  again*/
    2846:	fe 01       	movw	r30, r28
    2848:	e9 5b       	subi	r30, 0xB9	; 185
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	11 82       	std	Z+1, r1	; 0x01
    284e:	10 82       	st	Z, r1
				error=0;
    2850:	fe 01       	movw	r30, r28
    2852:	ed 5b       	subi	r30, 0xBD	; 189
    2854:	fe 4f       	sbci	r31, 0xFE	; 254
    2856:	11 82       	std	Z+1, r1	; 0x01
    2858:	10 82       	st	Z, r1
				condition=0;
    285a:	fe 01       	movw	r30, r28
    285c:	e3 5b       	subi	r30, 0xB3	; 179
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	10 82       	st	Z, r1
    2862:	61 c4       	rjmp	.+2242   	; 0x3126 <main+0x25e0>

			}
			/******************change_pass CASE *******************/
			else if(condition == '-' )
    2864:	fe 01       	movw	r30, r28
    2866:	e3 5b       	subi	r30, 0xB3	; 179
    2868:	fe 4f       	sbci	r31, 0xFE	; 254
    286a:	80 81       	ld	r24, Z
    286c:	8d 32       	cpi	r24, 0x2D	; 45
    286e:	09 f0       	breq	.+2      	; 0x2872 <main+0x1d2c>
    2870:	5a c4       	rjmp	.+2228   	; 0x3126 <main+0x25e0>
    2872:	31 c4       	rjmp	.+2146   	; 0x30d6 <main+0x2590>
				while(change_pass == 0)
				{


					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    2874:	fe 01       	movw	r30, r28
    2876:	e5 5b       	subi	r30, 0xB5	; 181
    2878:	fe 4f       	sbci	r31, 0xFE	; 254
    287a:	11 82       	std	Z+1, r1	; 0x01
    287c:	10 82       	st	Z, r1
    287e:	1b c0       	rjmp	.+54     	; 0x28b6 <main+0x1d70>
					{

						pass1[i] = 0;
    2880:	fe 01       	movw	r30, r28
    2882:	e5 5b       	subi	r30, 0xB5	; 181
    2884:	fe 4f       	sbci	r31, 0xFE	; 254
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	9e 01       	movw	r18, r28
    288c:	29 5a       	subi	r18, 0xA9	; 169
    288e:	3e 4f       	sbci	r19, 0xFE	; 254
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	f9 01       	movw	r30, r18
    2896:	e8 0f       	add	r30, r24
    2898:	f9 1f       	adc	r31, r25
    289a:	11 82       	std	Z+1, r1	; 0x01
    289c:	10 82       	st	Z, r1
				while(change_pass == 0)
				{


					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    289e:	de 01       	movw	r26, r28
    28a0:	a5 5b       	subi	r26, 0xB5	; 181
    28a2:	be 4f       	sbci	r27, 0xFE	; 254
    28a4:	fe 01       	movw	r30, r28
    28a6:	e5 5b       	subi	r30, 0xB5	; 181
    28a8:	fe 4f       	sbci	r31, 0xFE	; 254
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
    28b6:	fe 01       	movw	r30, r28
    28b8:	e5 5b       	subi	r30, 0xB5	; 181
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	85 30       	cpi	r24, 0x05	; 5
    28c2:	91 05       	cpc	r25, r1
    28c4:	ec f2       	brlt	.-70     	; 0x2880 <main+0x1d3a>
					{

						pass1[i] = 0;
					}

					UART_sendByte('$');  /*change_password code send to MC*/
    28c6:	84 e2       	ldi	r24, 0x24	; 36
    28c8:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
					LCD_clearScreen();
    28cc:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
					LCD_displayString("enter password");
    28d0:	83 ea       	ldi	r24, 0xA3	; 163
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
    28d8:	fe 01       	movw	r30, r28
    28da:	e1 5a       	subi	r30, 0xA1	; 161
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a6 e1       	ldi	r26, 0x16	; 22
    28e4:	b4 e4       	ldi	r27, 0x44	; 68
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	8e 01       	movw	r16, r28
    28f0:	05 5a       	subi	r16, 0xA5	; 165
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e1 5a       	subi	r30, 0xA1	; 161
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	e5 5a       	subi	r30, 0xA5	; 165
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	44 f4       	brge	.+16     	; 0x294a <main+0x1e04>
		__ticks = 1;
    293a:	fe 01       	movw	r30, r28
    293c:	e7 5a       	subi	r30, 0xA7	; 167
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	64 c0       	rjmp	.+200    	; 0x2a12 <main+0x1ecc>
	else if (__tmp > 65535)
    294a:	fe 01       	movw	r30, r28
    294c:	e5 5a       	subi	r30, 0xA5	; 165
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	0c f0       	brlt	.+2      	; 0x296a <main+0x1e24>
    2968:	43 c0       	rjmp	.+134    	; 0x29f0 <main+0x1eaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	fe 01       	movw	r30, r28
    296c:	e1 5a       	subi	r30, 0xA1	; 161
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8e 01       	movw	r16, r28
    298a:	07 5a       	subi	r16, 0xA7	; 167
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	1f c0       	rjmp	.+62     	; 0x29e0 <main+0x1e9a>
    29a2:	fe 01       	movw	r30, r28
    29a4:	e9 5a       	subi	r30, 0xA9	; 169
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	fe 01       	movw	r30, r28
    29b2:	e9 5a       	subi	r30, 0xA9	; 169
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <main+0x1e74>
    29be:	fe 01       	movw	r30, r28
    29c0:	e9 5a       	subi	r30, 0xA9	; 169
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	de 01       	movw	r26, r28
    29ca:	a7 5a       	subi	r26, 0xA7	; 167
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	e7 5a       	subi	r30, 0xA7	; 167
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	fe 01       	movw	r30, r28
    29e2:	e7 5a       	subi	r30, 0xA7	; 167
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	d1 f6       	brne	.-76     	; 0x29a2 <main+0x1e5c>
    29ee:	27 c0       	rjmp	.+78     	; 0x2a3e <main+0x1ef8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	8e 01       	movw	r16, r28
    29f2:	07 5a       	subi	r16, 0xA7	; 167
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	e5 5a       	subi	r30, 0xA5	; 165
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	de 01       	movw	r26, r28
    2a14:	ab 5a       	subi	r26, 0xAB	; 171
    2a16:	bf 4f       	sbci	r27, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e7 5a       	subi	r30, 0xA7	; 167
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	8d 93       	st	X+, r24
    2a24:	9c 93       	st	X, r25
    2a26:	fe 01       	movw	r30, r28
    2a28:	eb 5a       	subi	r30, 0xAB	; 171
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <main+0x1eea>
    2a34:	fe 01       	movw	r30, r28
    2a36:	eb 5a       	subi	r30, 0xAB	; 171
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
    2a3e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e2 5b       	subi	r30, 0xB2	; 178
    2a46:	fe 4f       	sbci	r31, 0xFE	; 254
    2a48:	80 83       	st	Z, r24
					/* Initialize arrays*/

					i=0;
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e5 5b       	subi	r30, 0xB5	; 181
    2a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a50:	11 82       	std	Z+1, r1	; 0x01
    2a52:	10 82       	st	Z, r1
    2a54:	fc c1       	rjmp	.+1016   	; 0x2e4e <main+0x2308>
					//LCD_moveCursor(1,i);
					while(data != '=')
					{
						if (i==5)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e5 5b       	subi	r30, 0xB5	; 181
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	85 30       	cpi	r24, 0x05	; 5
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <main+0x1f22>
    2a66:	7b c1       	rjmp	.+758    	; 0x2d5e <main+0x2218>
						{
							/* do nothinf*/
						}

						else if (data != '=')
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e2 5b       	subi	r30, 0xB2	; 178
    2a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6e:	80 81       	ld	r24, Z
    2a70:	8d 33       	cpi	r24, 0x3D	; 61
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <main+0x1f30>
    2a74:	74 c1       	rjmp	.+744    	; 0x2d5e <main+0x2218>
						{
							LCD_moveCursor(1,i);
    2a76:	fe 01       	movw	r30, r28
    2a78:	e5 5b       	subi	r30, 0xB5	; 181
    2a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7c:	90 81       	ld	r25, Z
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	69 2f       	mov	r22, r25
    2a82:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
							LCD_intgerToString(data);
    2a86:	fe 01       	movw	r30, r28
    2a88:	e2 5b       	subi	r30, 0xB2	; 178
    2a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 0f 23 	call	0x461e	; 0x461e <LCD_intgerToString>
							LCD_moveCursor(1,i);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e5 5b       	subi	r30, 0xB5	; 181
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	90 81       	ld	r25, Z
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	69 2f       	mov	r22, r25
    2aa2:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ef 5a       	subi	r30, 0xAF	; 175
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	aa e7       	ldi	r26, 0x7A	; 122
    2ab2:	b3 e4       	ldi	r27, 0x43	; 67
    2ab4:	80 83       	st	Z, r24
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	a2 83       	std	Z+2, r26	; 0x02
    2aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	8e 01       	movw	r16, r28
    2abe:	03 5b       	subi	r16, 0xB3	; 179
    2ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ef 5a       	subi	r30, 0xAF	; 175
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	4a ef       	ldi	r20, 0xFA	; 250
    2ad6:	54 e4       	ldi	r21, 0x44	; 68
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	80 83       	st	Z, r24
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	a2 83       	std	Z+2, r26	; 0x02
    2ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aea:	fe 01       	movw	r30, r28
    2aec:	e3 5b       	subi	r30, 0xB3	; 179
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e8       	ldi	r20, 0x80	; 128
    2afe:	5f e3       	ldi	r21, 0x3F	; 63
    2b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	44 f4       	brge	.+16     	; 0x2b18 <main+0x1fd2>
		__ticks = 1;
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e5 5b       	subi	r30, 0xB5	; 181
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	64 c0       	rjmp	.+200    	; 0x2be0 <main+0x209a>
	else if (__tmp > 65535)
    2b18:	fe 01       	movw	r30, r28
    2b1a:	e3 5b       	subi	r30, 0xB3	; 179
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	0c f0       	brlt	.+2      	; 0x2b38 <main+0x1ff2>
    2b36:	43 c0       	rjmp	.+134    	; 0x2bbe <main+0x2078>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	fe 01       	movw	r30, r28
    2b3a:	ef 5a       	subi	r30, 0xAF	; 175
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8e 01       	movw	r16, r28
    2b58:	05 5b       	subi	r16, 0xB5	; 181
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	1f c0       	rjmp	.+62     	; 0x2bae <main+0x2068>
    2b70:	fe 01       	movw	r30, r28
    2b72:	e7 5b       	subi	r30, 0xB7	; 183
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e7 5b       	subi	r30, 0xB7	; 183
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x2042>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e7 5b       	subi	r30, 0xB7	; 183
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	de 01       	movw	r26, r28
    2b98:	a5 5b       	subi	r26, 0xB5	; 181
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e5 5b       	subi	r30, 0xB5	; 181
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	11 96       	adiw	r26, 0x01	; 1
    2baa:	9c 93       	st	X, r25
    2bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e5 5b       	subi	r30, 0xB5	; 181
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	d1 f6       	brne	.-76     	; 0x2b70 <main+0x202a>
    2bbc:	27 c0       	rjmp	.+78     	; 0x2c0c <main+0x20c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	05 5b       	subi	r16, 0xB5	; 181
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e3 5b       	subi	r30, 0xB3	; 179
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	f8 01       	movw	r30, r16
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
    2be0:	de 01       	movw	r26, r28
    2be2:	a9 5b       	subi	r26, 0xB9	; 185
    2be4:	bf 4f       	sbci	r27, 0xFF	; 255
    2be6:	fe 01       	movw	r30, r28
    2be8:	e5 5b       	subi	r30, 0xB5	; 181
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	8d 93       	st	X+, r24
    2bf2:	9c 93       	st	X, r25
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e9 5b       	subi	r30, 0xB9	; 185
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <main+0x20b8>
    2c02:	fe 01       	movw	r30, r28
    2c04:	e9 5b       	subi	r30, 0xB9	; 185
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
							_delay_ms(250);
							LCD_displayCharacter('*');
    2c0c:	8a e2       	ldi	r24, 0x2A	; 42
    2c0e:	0e 94 8f 20 	call	0x411e	; 0x411e <LCD_displayCharacter>
							pass1[i] = data;
    2c12:	fe 01       	movw	r30, r28
    2c14:	e5 5b       	subi	r30, 0xB5	; 181
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e2 5b       	subi	r30, 0xB2	; 178
    2c20:	fe 4f       	sbci	r31, 0xFE	; 254
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	9e 01       	movw	r18, r28
    2c2a:	29 5a       	subi	r18, 0xA9	; 169
    2c2c:	3e 4f       	sbci	r19, 0xFE	; 254
    2c2e:	cb 01       	movw	r24, r22
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	f9 01       	movw	r30, r18
    2c36:	e8 0f       	add	r30, r24
    2c38:	f9 1f       	adc	r31, r25
    2c3a:	51 83       	std	Z+1, r21	; 0x01
    2c3c:	40 83       	st	Z, r20
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ed 5b       	subi	r30, 0xBD	; 189
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a6 e1       	ldi	r26, 0x16	; 22
    2c4a:	b4 e4       	ldi	r27, 0x44	; 68
    2c4c:	80 83       	st	Z, r24
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	a2 83       	std	Z+2, r26	; 0x02
    2c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	8e 01       	movw	r16, r28
    2c56:	01 5c       	subi	r16, 0xC1	; 193
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ed 5b       	subi	r30, 0xBD	; 189
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a ef       	ldi	r20, 0xFA	; 250
    2c6e:	54 e4       	ldi	r21, 0x44	; 68
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	f8 01       	movw	r30, r16
    2c7a:	80 83       	st	Z, r24
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	a2 83       	std	Z+2, r26	; 0x02
    2c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c82:	fe 01       	movw	r30, r28
    2c84:	ff 96       	adiw	r30, 0x3f	; 63
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <main+0x2162>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9e af       	std	Y+62, r25	; 0x3e
    2ca4:	8d af       	std	Y+61, r24	; 0x3d
    2ca6:	46 c0       	rjmp	.+140    	; 0x2d34 <main+0x21ee>
	else if (__tmp > 65535)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ff 96       	adiw	r30, 0x3f	; 63
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	64 f5       	brge	.+88     	; 0x2d1c <main+0x21d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ed 5b       	subi	r30, 0xBD	; 189
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e af       	std	Y+62, r25	; 0x3e
    2cf0:	8d af       	std	Y+61, r24	; 0x3d
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <main+0x21cc>
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c af       	std	Y+60, r25	; 0x3c
    2cfa:	8b af       	std	Y+59, r24	; 0x3b
    2cfc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cfe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <main+0x21ba>
    2d04:	9c af       	std	Y+60, r25	; 0x3c
    2d06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9e af       	std	Y+62, r25	; 0x3e
    2d10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d14:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <main+0x21ae>
    2d1a:	16 c0       	rjmp	.+44     	; 0x2d48 <main+0x2202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ff 96       	adiw	r30, 0x3f	; 63
    2d20:	60 81       	ld	r22, Z
    2d22:	71 81       	ldd	r23, Z+1	; 0x01
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9e af       	std	Y+62, r25	; 0x3e
    2d32:	8d af       	std	Y+61, r24	; 0x3d
    2d34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d38:	9a af       	std	Y+58, r25	; 0x3a
    2d3a:	89 af       	std	Y+57, r24	; 0x39
    2d3c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <main+0x21fa>
    2d44:	9a af       	std	Y+58, r25	; 0x3a
    2d46:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(600);
							i++;
    2d48:	de 01       	movw	r26, r28
    2d4a:	a5 5b       	subi	r26, 0xB5	; 181
    2d4c:	be 4f       	sbci	r27, 0xFE	; 254
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e5 5b       	subi	r30, 0xB5	; 181
    2d52:	fe 4f       	sbci	r31, 0xFE	; 254
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	8d 93       	st	X+, r24
    2d5c:	9c 93       	st	X, r25
						}
						data = KEYPAD_getPressedKey();
    2d5e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <KEYPAD_getPressedKey>
    2d62:	fe 01       	movw	r30, r28
    2d64:	e2 5b       	subi	r30, 0xB2	; 178
    2d66:	fe 4f       	sbci	r31, 0xFE	; 254
    2d68:	80 83       	st	Z, r24
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a6 e1       	ldi	r26, 0x16	; 22
    2d70:	b4 e4       	ldi	r27, 0x44	; 68
    2d72:	8d ab       	std	Y+53, r24	; 0x35
    2d74:	9e ab       	std	Y+54, r25	; 0x36
    2d76:	af ab       	std	Y+55, r26	; 0x37
    2d78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d7c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d80:	98 ad       	ldd	r25, Y+56	; 0x38
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	4a ef       	ldi	r20, 0xFA	; 250
    2d88:	54 e4       	ldi	r21, 0x44	; 68
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	89 ab       	std	Y+49, r24	; 0x31
    2d94:	9a ab       	std	Y+50, r25	; 0x32
    2d96:	ab ab       	std	Y+51, r26	; 0x33
    2d98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2da0:	9c a9       	ldd	r25, Y+52	; 0x34
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	2c f4       	brge	.+10     	; 0x2dbc <main+0x2276>
		__ticks = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	98 ab       	std	Y+48, r25	; 0x30
    2db8:	8f a7       	std	Y+47, r24	; 0x2f
    2dba:	3f c0       	rjmp	.+126    	; 0x2e3a <main+0x22f4>
	else if (__tmp > 65535)
    2dbc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dbe:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	4c f5       	brge	.+82     	; 0x2e26 <main+0x22e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd4:	6d a9       	ldd	r22, Y+53	; 0x35
    2dd6:	7e a9       	ldd	r23, Y+54	; 0x36
    2dd8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dda:	98 ad       	ldd	r25, Y+56	; 0x38
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	98 ab       	std	Y+48, r25	; 0x30
    2dfa:	8f a7       	std	Y+47, r24	; 0x2f
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <main+0x22d6>
    2dfe:	88 ec       	ldi	r24, 0xC8	; 200
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9e a7       	std	Y+46, r25	; 0x2e
    2e04:	8d a7       	std	Y+45, r24	; 0x2d
    2e06:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e08:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <main+0x22c4>
    2e0e:	9e a7       	std	Y+46, r25	; 0x2e
    2e10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e14:	98 a9       	ldd	r25, Y+48	; 0x30
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	98 ab       	std	Y+48, r25	; 0x30
    2e1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <main+0x22b8>
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <main+0x2308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e26:	69 a9       	ldd	r22, Y+49	; 0x31
    2e28:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	98 ab       	std	Y+48, r25	; 0x30
    2e38:	8f a7       	std	Y+47, r24	; 0x2f
    2e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3e:	9c a7       	std	Y+44, r25	; 0x2c
    2e40:	8b a7       	std	Y+43, r24	; 0x2b
    2e42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e44:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <main+0x2300>
    2e4a:	9c a7       	std	Y+44, r25	; 0x2c
    2e4c:	8b a7       	std	Y+43, r24	; 0x2b
					data = KEYPAD_getPressedKey();
					/* Initialize arrays*/

					i=0;
					//LCD_moveCursor(1,i);
					while(data != '=')
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e2 5b       	subi	r30, 0xB2	; 178
    2e52:	fe 4f       	sbci	r31, 0xFE	; 254
    2e54:	80 81       	ld	r24, Z
    2e56:	8d 33       	cpi	r24, 0x3D	; 61
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <main+0x2316>
    2e5a:	fd cd       	rjmp	.-1030   	; 0x2a56 <main+0x1f10>
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}

					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e5 5b       	subi	r30, 0xB5	; 181
    2e60:	fe 4f       	sbci	r31, 0xFE	; 254
    2e62:	11 82       	std	Z+1, r1	; 0x01
    2e64:	10 82       	st	Z, r1
    2e66:	1d c0       	rjmp	.+58     	; 0x2ea2 <main+0x235c>
					{
						UART_sendByte(pass1[i]);
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e5 5b       	subi	r30, 0xB5	; 181
    2e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	9e 01       	movw	r18, r28
    2e74:	29 5a       	subi	r18, 0xA9	; 169
    2e76:	3e 4f       	sbci	r19, 0xFE	; 254
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	f9 01       	movw	r30, r18
    2e7e:	e8 0f       	add	r30, r24
    2e80:	f9 1f       	adc	r31, r25
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}

					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    2e8a:	de 01       	movw	r26, r28
    2e8c:	a5 5b       	subi	r26, 0xB5	; 181
    2e8e:	be 4f       	sbci	r27, 0xFE	; 254
    2e90:	fe 01       	movw	r30, r28
    2e92:	e5 5b       	subi	r30, 0xB5	; 181
    2e94:	fe 4f       	sbci	r31, 0xFE	; 254
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	11 96       	adiw	r26, 0x01	; 1
    2e9e:	9c 93       	st	X, r25
    2ea0:	8e 93       	st	-X, r24
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 5b       	subi	r30, 0xB5	; 181
    2ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	85 30       	cpi	r24, 0x05	; 5
    2eae:	91 05       	cpc	r25, r1
    2eb0:	dc f2       	brlt	.-74     	; 0x2e68 <main+0x2322>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e2       	ldi	r26, 0x20	; 32
    2eb8:	b1 e4       	ldi	r27, 0x41	; 65
    2eba:	8f a3       	std	Y+39, r24	; 0x27
    2ebc:	98 a7       	std	Y+40, r25	; 0x28
    2ebe:	a9 a7       	std	Y+41, r26	; 0x29
    2ec0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ec6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ec8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4a ef       	ldi	r20, 0xFA	; 250
    2ed0:	54 e4       	ldi	r21, 0x44	; 68
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	8b a3       	std	Y+35, r24	; 0x23
    2edc:	9c a3       	std	Y+36, r25	; 0x24
    2ede:	ad a3       	std	Y+37, r26	; 0x25
    2ee0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	2c f4       	brge	.+10     	; 0x2f04 <main+0x23be>
		__ticks = 1;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	9a a3       	std	Y+34, r25	; 0x22
    2f00:	89 a3       	std	Y+33, r24	; 0x21
    2f02:	3f c0       	rjmp	.+126    	; 0x2f82 <main+0x243c>
	else if (__tmp > 65535)
    2f04:	6b a1       	ldd	r22, Y+35	; 0x23
    2f06:	7c a1       	ldd	r23, Y+36	; 0x24
    2f08:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	3f ef       	ldi	r19, 0xFF	; 255
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	57 e4       	ldi	r21, 0x47	; 71
    2f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	4c f5       	brge	.+82     	; 0x2f6e <main+0x2428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f20:	89 a5       	ldd	r24, Y+41	; 0x29
    2f22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e2       	ldi	r20, 0x20	; 32
    2f2a:	51 e4       	ldi	r21, 0x41	; 65
    2f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9a a3       	std	Y+34, r25	; 0x22
    2f42:	89 a3       	std	Y+33, r24	; 0x21
    2f44:	0f c0       	rjmp	.+30     	; 0x2f64 <main+0x241e>
    2f46:	88 ec       	ldi	r24, 0xC8	; 200
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	98 a3       	std	Y+32, r25	; 0x20
    2f4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f50:	98 a1       	ldd	r25, Y+32	; 0x20
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <main+0x240c>
    2f56:	98 a3       	std	Y+32, r25	; 0x20
    2f58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	9a a3       	std	Y+34, r25	; 0x22
    2f62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	89 a1       	ldd	r24, Y+33	; 0x21
    2f66:	9a a1       	ldd	r25, Y+34	; 0x22
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	69 f7       	brne	.-38     	; 0x2f46 <main+0x2400>
    2f6c:	14 c0       	rjmp	.+40     	; 0x2f96 <main+0x2450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f70:	7c a1       	ldd	r23, Y+36	; 0x24
    2f72:	8d a1       	ldd	r24, Y+37	; 0x25
    2f74:	9e a1       	ldd	r25, Y+38	; 0x26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9a a3       	std	Y+34, r25	; 0x22
    2f80:	89 a3       	std	Y+33, r24	; 0x21
    2f82:	89 a1       	ldd	r24, Y+33	; 0x21
    2f84:	9a a1       	ldd	r25, Y+34	; 0x22
    2f86:	9e 8f       	std	Y+30, r25	; 0x1e
    2f88:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <main+0x2448>
    2f92:	9e 8f       	std	Y+30, r25	; 0x1e
    2f94:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						UART_sendByte(pass1[i]);
					}
					_delay_ms(10);
					change_pass = UART_recieveByte(); /* receive pass_checking result from MC*/
    2f96:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_recieveByte>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	eb 5b       	subi	r30, 0xBB	; 187
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	88 2f       	mov	r24, r24
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24

					error++;
    2fa8:	de 01       	movw	r26, r28
    2faa:	ad 5b       	subi	r26, 0xBD	; 189
    2fac:	be 4f       	sbci	r27, 0xFE	; 254
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ed 5b       	subi	r30, 0xBD	; 189
    2fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb4:	80 81       	ld	r24, Z
    2fb6:	91 81       	ldd	r25, Z+1	; 0x01
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	11 96       	adiw	r26, 0x01	; 1
    2fbc:	9c 93       	st	X, r25
    2fbe:	8e 93       	st	-X, r24

					/******in case of error send 'E' to MC******/
					if(error==3)
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 5b       	subi	r30, 0xBD	; 189
    2fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	83 30       	cpi	r24, 0x03	; 3
    2fcc:	91 05       	cpc	r25, r1
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <main+0x248c>
    2fd0:	82 c0       	rjmp	.+260    	; 0x30d6 <main+0x2590>
					{
						UART_sendByte('E');
    2fd2:	85 e4       	ldi	r24, 0x45	; 69
    2fd4:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
						LCD_clearScreen();
    2fd8:	0e 94 32 23 	call	0x4664	; 0x4664 <LCD_clearScreen>
						LCD_displayString("error");
    2fdc:	81 ee       	ldi	r24, 0xE1	; 225
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
						change_pass=1;
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	eb 5b       	subi	r30, 0xBB	; 187
    2fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	aa e7       	ldi	r26, 0x7A	; 122
    2ff8:	b4 e4       	ldi	r27, 0x44	; 68
    2ffa:	89 8f       	std	Y+25, r24	; 0x19
    2ffc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ffe:	ab 8f       	std	Y+27, r26	; 0x1b
    3000:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3002:	69 8d       	ldd	r22, Y+25	; 0x19
    3004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	4a ef       	ldi	r20, 0xFA	; 250
    3010:	54 e4       	ldi	r21, 0x44	; 68
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	8d 8b       	std	Y+21, r24	; 0x15
    301c:	9e 8b       	std	Y+22, r25	; 0x16
    301e:	af 8b       	std	Y+23, r26	; 0x17
    3020:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3022:	6d 89       	ldd	r22, Y+21	; 0x15
    3024:	7e 89       	ldd	r23, Y+22	; 0x16
    3026:	8f 89       	ldd	r24, Y+23	; 0x17
    3028:	98 8d       	ldd	r25, Y+24	; 0x18
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e8       	ldi	r20, 0x80	; 128
    3030:	5f e3       	ldi	r21, 0x3F	; 63
    3032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3036:	88 23       	and	r24, r24
    3038:	2c f4       	brge	.+10     	; 0x3044 <main+0x24fe>
		__ticks = 1;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	9c 8b       	std	Y+20, r25	; 0x14
    3040:	8b 8b       	std	Y+19, r24	; 0x13
    3042:	3f c0       	rjmp	.+126    	; 0x30c2 <main+0x257c>
	else if (__tmp > 65535)
    3044:	6d 89       	ldd	r22, Y+21	; 0x15
    3046:	7e 89       	ldd	r23, Y+22	; 0x16
    3048:	8f 89       	ldd	r24, Y+23	; 0x17
    304a:	98 8d       	ldd	r25, Y+24	; 0x18
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	3f ef       	ldi	r19, 0xFF	; 255
    3050:	4f e7       	ldi	r20, 0x7F	; 127
    3052:	57 e4       	ldi	r21, 0x47	; 71
    3054:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3058:	18 16       	cp	r1, r24
    305a:	4c f5       	brge	.+82     	; 0x30ae <main+0x2568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305c:	69 8d       	ldd	r22, Y+25	; 0x19
    305e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3060:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3062:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e2       	ldi	r20, 0x20	; 32
    306a:	51 e4       	ldi	r21, 0x41	; 65
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	9c 8b       	std	Y+20, r25	; 0x14
    3082:	8b 8b       	std	Y+19, r24	; 0x13
    3084:	0f c0       	rjmp	.+30     	; 0x30a4 <main+0x255e>
    3086:	88 ec       	ldi	r24, 0xC8	; 200
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9a 8b       	std	Y+18, r25	; 0x12
    308c:	89 8b       	std	Y+17, r24	; 0x11
    308e:	89 89       	ldd	r24, Y+17	; 0x11
    3090:	9a 89       	ldd	r25, Y+18	; 0x12
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	f1 f7       	brne	.-4      	; 0x3092 <main+0x254c>
    3096:	9a 8b       	std	Y+18, r25	; 0x12
    3098:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309a:	8b 89       	ldd	r24, Y+19	; 0x13
    309c:	9c 89       	ldd	r25, Y+20	; 0x14
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	9c 8b       	std	Y+20, r25	; 0x14
    30a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a4:	8b 89       	ldd	r24, Y+19	; 0x13
    30a6:	9c 89       	ldd	r25, Y+20	; 0x14
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	69 f7       	brne	.-38     	; 0x3086 <main+0x2540>
    30ac:	14 c0       	rjmp	.+40     	; 0x30d6 <main+0x2590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ae:	6d 89       	ldd	r22, Y+21	; 0x15
    30b0:	7e 89       	ldd	r23, Y+22	; 0x16
    30b2:	8f 89       	ldd	r24, Y+23	; 0x17
    30b4:	98 8d       	ldd	r25, Y+24	; 0x18
    30b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	9c 8b       	std	Y+20, r25	; 0x14
    30c0:	8b 8b       	std	Y+19, r24	; 0x13
    30c2:	8b 89       	ldd	r24, Y+19	; 0x13
    30c4:	9c 89       	ldd	r25, Y+20	; 0x14
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	8f 87       	std	Y+15, r24	; 0x0f
    30ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    30cc:	98 89       	ldd	r25, Y+16	; 0x10
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <main+0x2588>
    30d2:	98 8b       	std	Y+16, r25	; 0x10
    30d4:	8f 87       	std	Y+15, r24	; 0x0f
			/******************change_pass CASE *******************/
			else if(condition == '-' )
			{


				while(change_pass == 0)
    30d6:	fe 01       	movw	r30, r28
    30d8:	eb 5b       	subi	r30, 0xBB	; 187
    30da:	fe 4f       	sbci	r31, 0xFE	; 254
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <main+0x25a0>
    30e4:	c7 cb       	rjmp	.-2162   	; 0x2874 <main+0x1d2e>

					}

				}

				change_pass = 0;   /* to go in  while loop of change_case  again*/
    30e6:	fe 01       	movw	r30, r28
    30e8:	eb 5b       	subi	r30, 0xBB	; 187
    30ea:	fe 4f       	sbci	r31, 0xFE	; 254
    30ec:	11 82       	std	Z+1, r1	; 0x01
    30ee:	10 82       	st	Z, r1
				if(error ==3)
    30f0:	fe 01       	movw	r30, r28
    30f2:	ed 5b       	subi	r30, 0xBD	; 189
    30f4:	fe 4f       	sbci	r31, 0xFE	; 254
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	83 30       	cpi	r24, 0x03	; 3
    30fc:	91 05       	cpc	r25, r1
    30fe:	29 f0       	breq	.+10     	; 0x310a <main+0x25c4>
				{
				}
				else
				{
					pass_check=0;
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5b       	subi	r30, 0xB7	; 183
    3104:	fe 4f       	sbci	r31, 0xFE	; 254
    3106:	11 82       	std	Z+1, r1	; 0x01
    3108:	10 82       	st	Z, r1
				}
				change_pass=0;
    310a:	fe 01       	movw	r30, r28
    310c:	eb 5b       	subi	r30, 0xBB	; 187
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	11 82       	std	Z+1, r1	; 0x01
    3112:	10 82       	st	Z, r1
				error=0;
    3114:	fe 01       	movw	r30, r28
    3116:	ed 5b       	subi	r30, 0xBD	; 189
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	11 82       	std	Z+1, r1	; 0x01
    311c:	10 82       	st	Z, r1
				condition=0;
    311e:	fe 01       	movw	r30, r28
    3120:	e3 5b       	subi	r30, 0xB3	; 179
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	10 82       	st	Z, r1
			pass_check =UART_recieveByte();  /* result of password checking*/

		}
		/******************************** MAIN OPTIONS********************************************/

		while(pass_check == 1)
    3126:	fe 01       	movw	r30, r28
    3128:	e7 5b       	subi	r30, 0xB7	; 183
    312a:	fe 4f       	sbci	r31, 0xFE	; 254
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	91 05       	cpc	r25, r1
    3134:	11 f4       	brne	.+4      	; 0x313a <main+0x25f4>
    3136:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <main+0xe02>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a6 e1       	ldi	r26, 0x16	; 22
    3140:	b4 e4       	ldi	r27, 0x44	; 68
    3142:	8b 87       	std	Y+11, r24	; 0x0b
    3144:	9c 87       	std	Y+12, r25	; 0x0c
    3146:	ad 87       	std	Y+13, r26	; 0x0d
    3148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6b 85       	ldd	r22, Y+11	; 0x0b
    314c:	7c 85       	ldd	r23, Y+12	; 0x0c
    314e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3150:	9e 85       	ldd	r25, Y+14	; 0x0e
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a ef       	ldi	r20, 0xFA	; 250
    3158:	54 e4       	ldi	r21, 0x44	; 68
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8f 83       	std	Y+7, r24	; 0x07
    3164:	98 87       	std	Y+8, r25	; 0x08
    3166:	a9 87       	std	Y+9, r26	; 0x09
    3168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <main+0x2646>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	40 c0       	rjmp	.+128    	; 0x320c <main+0x26c6>
	else if (__tmp > 65535)
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	54 f5       	brge	.+84     	; 0x31f8 <main+0x26b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <main+0x26a6>
    31ce:	88 ec       	ldi	r24, 0xC8	; 200
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0x2694>
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <main+0x2688>
    31f4:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <main+0xdee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <main+0x26d2>
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <main+0xdee>

00003224 <Buzzer_init>:
⮚ Setup the direction for the buzzer pin as output pin through the
GPIO driver.
⮚ Turn off the buzzer through the GPIO.*/

void Buzzer_init(void)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);  /* set pin as output*/
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	64 e0       	ldi	r22, 0x04	; 4
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	64 e0       	ldi	r22, 0x04	; 4
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>

}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <Buzzer_on>:
/*Description
⮚ Function to enable the Buzzer through the GPIO.*/


void Buzzer_on(void)
{
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);/* turn ON BUZZER*/
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>

}
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <Buzzer_off>:

/*Function to disable the Buzzer through the GPIO*/

void Buzzer_off(void)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	64 e0       	ldi	r22, 0x04	; 4
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
}
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction )
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <GPIO_setupPinDirection+0x6>
    327c:	00 d0       	rcall	.+0      	; 0x327e <GPIO_setupPinDirection+0x8>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	6a 83       	std	Y+2, r22	; 0x02
    3288:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	84 30       	cpi	r24, 0x04	; 4
    328e:	08 f0       	brcs	.+2      	; 0x3292 <GPIO_setupPinDirection+0x1c>
    3290:	d5 c0       	rjmp	.+426    	; 0x343c <GPIO_setupPinDirection+0x1c6>
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	88 30       	cpi	r24, 0x08	; 8
    3296:	08 f0       	brcs	.+2      	; 0x329a <GPIO_setupPinDirection+0x24>
    3298:	d1 c0       	rjmp	.+418    	; 0x343c <GPIO_setupPinDirection+0x1c6>
	}
	else
	{


		switch(port_num)
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	28 2f       	mov	r18, r24
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	3d 83       	std	Y+5, r19	; 0x05
    32a2:	2c 83       	std	Y+4, r18	; 0x04
    32a4:	8c 81       	ldd	r24, Y+4	; 0x04
    32a6:	9d 81       	ldd	r25, Y+5	; 0x05
    32a8:	81 30       	cpi	r24, 0x01	; 1
    32aa:	91 05       	cpc	r25, r1
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <GPIO_setupPinDirection+0x3a>
    32ae:	43 c0       	rjmp	.+134    	; 0x3336 <GPIO_setupPinDirection+0xc0>
    32b0:	2c 81       	ldd	r18, Y+4	; 0x04
    32b2:	3d 81       	ldd	r19, Y+5	; 0x05
    32b4:	22 30       	cpi	r18, 0x02	; 2
    32b6:	31 05       	cpc	r19, r1
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <GPIO_setupPinDirection+0x4e>
    32ba:	8c 81       	ldd	r24, Y+4	; 0x04
    32bc:	9d 81       	ldd	r25, Y+5	; 0x05
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	71 f0       	breq	.+28     	; 0x32de <GPIO_setupPinDirection+0x68>
    32c2:	bc c0       	rjmp	.+376    	; 0x343c <GPIO_setupPinDirection+0x1c6>
    32c4:	2c 81       	ldd	r18, Y+4	; 0x04
    32c6:	3d 81       	ldd	r19, Y+5	; 0x05
    32c8:	22 30       	cpi	r18, 0x02	; 2
    32ca:	31 05       	cpc	r19, r1
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <GPIO_setupPinDirection+0x5a>
    32ce:	5f c0       	rjmp	.+190    	; 0x338e <GPIO_setupPinDirection+0x118>
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	9d 81       	ldd	r25, Y+5	; 0x05
    32d4:	83 30       	cpi	r24, 0x03	; 3
    32d6:	91 05       	cpc	r25, r1
    32d8:	09 f4       	brne	.+2      	; 0x32dc <GPIO_setupPinDirection+0x66>
    32da:	85 c0       	rjmp	.+266    	; 0x33e6 <GPIO_setupPinDirection+0x170>
    32dc:	af c0       	rjmp	.+350    	; 0x343c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	81 30       	cpi	r24, 0x01	; 1
    32e2:	a1 f4       	brne	.+40     	; 0x330c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    32e4:	aa e3       	ldi	r26, 0x3A	; 58
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	ea e3       	ldi	r30, 0x3A	; 58
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	48 2f       	mov	r20, r24
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	02 2e       	mov	r0, r18
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <GPIO_setupPinDirection+0x8c>
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	0a 94       	dec	r0
    3304:	e2 f7       	brpl	.-8      	; 0x32fe <GPIO_setupPinDirection+0x88>
    3306:	84 2b       	or	r24, r20
    3308:	8c 93       	st	X, r24
    330a:	98 c0       	rjmp	.+304    	; 0x343c <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    330c:	aa e3       	ldi	r26, 0x3A	; 58
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ea e3       	ldi	r30, 0x3A	; 58
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	48 2f       	mov	r20, r24
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	02 2e       	mov	r0, r18
    3324:	02 c0       	rjmp	.+4      	; 0x332a <GPIO_setupPinDirection+0xb4>
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	0a 94       	dec	r0
    332c:	e2 f7       	brpl	.-8      	; 0x3326 <GPIO_setupPinDirection+0xb0>
    332e:	80 95       	com	r24
    3330:	84 23       	and	r24, r20
    3332:	8c 93       	st	X, r24
    3334:	83 c0       	rjmp	.+262    	; 0x343c <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	a1 f4       	brne	.+40     	; 0x3364 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    333c:	a7 e3       	ldi	r26, 0x37	; 55
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e7 e3       	ldi	r30, 0x37	; 55
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	48 2f       	mov	r20, r24
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	28 2f       	mov	r18, r24
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	02 2e       	mov	r0, r18
    3354:	02 c0       	rjmp	.+4      	; 0x335a <GPIO_setupPinDirection+0xe4>
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	0a 94       	dec	r0
    335c:	e2 f7       	brpl	.-8      	; 0x3356 <GPIO_setupPinDirection+0xe0>
    335e:	84 2b       	or	r24, r20
    3360:	8c 93       	st	X, r24
    3362:	6c c0       	rjmp	.+216    	; 0x343c <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3364:	a7 e3       	ldi	r26, 0x37	; 55
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e7 e3       	ldi	r30, 0x37	; 55
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	48 2f       	mov	r20, r24
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	02 2e       	mov	r0, r18
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <GPIO_setupPinDirection+0x10c>
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	0a 94       	dec	r0
    3384:	e2 f7       	brpl	.-8      	; 0x337e <GPIO_setupPinDirection+0x108>
    3386:	80 95       	com	r24
    3388:	84 23       	and	r24, r20
    338a:	8c 93       	st	X, r24
    338c:	57 c0       	rjmp	.+174    	; 0x343c <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	81 30       	cpi	r24, 0x01	; 1
    3392:	a1 f4       	brne	.+40     	; 0x33bc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3394:	a4 e3       	ldi	r26, 0x34	; 52
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e4 e3       	ldi	r30, 0x34	; 52
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	48 2f       	mov	r20, r24
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	28 2f       	mov	r18, r24
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	02 2e       	mov	r0, r18
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <GPIO_setupPinDirection+0x13c>
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	0a 94       	dec	r0
    33b4:	e2 f7       	brpl	.-8      	; 0x33ae <GPIO_setupPinDirection+0x138>
    33b6:	84 2b       	or	r24, r20
    33b8:	8c 93       	st	X, r24
    33ba:	40 c0       	rjmp	.+128    	; 0x343c <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    33bc:	a4 e3       	ldi	r26, 0x34	; 52
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e4 e3       	ldi	r30, 0x34	; 52
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	48 2f       	mov	r20, r24
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	28 2f       	mov	r18, r24
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	02 2e       	mov	r0, r18
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <GPIO_setupPinDirection+0x164>
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	0a 94       	dec	r0
    33dc:	e2 f7       	brpl	.-8      	; 0x33d6 <GPIO_setupPinDirection+0x160>
    33de:	80 95       	com	r24
    33e0:	84 23       	and	r24, r20
    33e2:	8c 93       	st	X, r24
    33e4:	2b c0       	rjmp	.+86     	; 0x343c <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	a1 f4       	brne	.+40     	; 0x3414 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    33ec:	a1 e3       	ldi	r26, 0x31	; 49
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e1 e3       	ldi	r30, 0x31	; 49
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	48 2f       	mov	r20, r24
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	02 2e       	mov	r0, r18
    3404:	02 c0       	rjmp	.+4      	; 0x340a <GPIO_setupPinDirection+0x194>
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	0a 94       	dec	r0
    340c:	e2 f7       	brpl	.-8      	; 0x3406 <GPIO_setupPinDirection+0x190>
    340e:	84 2b       	or	r24, r20
    3410:	8c 93       	st	X, r24
    3412:	14 c0       	rjmp	.+40     	; 0x343c <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    3414:	a1 e3       	ldi	r26, 0x31	; 49
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e1 e3       	ldi	r30, 0x31	; 49
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	48 2f       	mov	r20, r24
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	28 2f       	mov	r18, r24
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	02 2e       	mov	r0, r18
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <GPIO_setupPinDirection+0x1bc>
    342e:	88 0f       	add	r24, r24
    3430:	99 1f       	adc	r25, r25
    3432:	0a 94       	dec	r0
    3434:	e2 f7       	brpl	.-8      	; 0x342e <GPIO_setupPinDirection+0x1b8>
    3436:	80 95       	com	r24
    3438:	84 23       	and	r24, r20
    343a:	8c 93       	st	X, r24


		}
	}

}
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	00 d0       	rcall	.+0      	; 0x3452 <GPIO_writePin+0x6>
    3452:	00 d0       	rcall	.+0      	; 0x3454 <GPIO_writePin+0x8>
    3454:	0f 92       	push	r0
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	6a 83       	std	Y+2, r22	; 0x02
    345e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	84 30       	cpi	r24, 0x04	; 4
    3464:	08 f0       	brcs	.+2      	; 0x3468 <GPIO_writePin+0x1c>
    3466:	d5 c0       	rjmp	.+426    	; 0x3612 <GPIO_writePin+0x1c6>
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	88 30       	cpi	r24, 0x08	; 8
    346c:	08 f0       	brcs	.+2      	; 0x3470 <GPIO_writePin+0x24>
    346e:	d1 c0       	rjmp	.+418    	; 0x3612 <GPIO_writePin+0x1c6>
	{
		/****do nothing***/
	}
	else
	{
		switch(port_num)
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	28 2f       	mov	r18, r24
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	3d 83       	std	Y+5, r19	; 0x05
    3478:	2c 83       	std	Y+4, r18	; 0x04
    347a:	8c 81       	ldd	r24, Y+4	; 0x04
    347c:	9d 81       	ldd	r25, Y+5	; 0x05
    347e:	81 30       	cpi	r24, 0x01	; 1
    3480:	91 05       	cpc	r25, r1
    3482:	09 f4       	brne	.+2      	; 0x3486 <GPIO_writePin+0x3a>
    3484:	43 c0       	rjmp	.+134    	; 0x350c <GPIO_writePin+0xc0>
    3486:	2c 81       	ldd	r18, Y+4	; 0x04
    3488:	3d 81       	ldd	r19, Y+5	; 0x05
    348a:	22 30       	cpi	r18, 0x02	; 2
    348c:	31 05       	cpc	r19, r1
    348e:	2c f4       	brge	.+10     	; 0x349a <GPIO_writePin+0x4e>
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	9d 81       	ldd	r25, Y+5	; 0x05
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	71 f0       	breq	.+28     	; 0x34b4 <GPIO_writePin+0x68>
    3498:	bc c0       	rjmp	.+376    	; 0x3612 <GPIO_writePin+0x1c6>
    349a:	2c 81       	ldd	r18, Y+4	; 0x04
    349c:	3d 81       	ldd	r19, Y+5	; 0x05
    349e:	22 30       	cpi	r18, 0x02	; 2
    34a0:	31 05       	cpc	r19, r1
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <GPIO_writePin+0x5a>
    34a4:	5f c0       	rjmp	.+190    	; 0x3564 <GPIO_writePin+0x118>
    34a6:	8c 81       	ldd	r24, Y+4	; 0x04
    34a8:	9d 81       	ldd	r25, Y+5	; 0x05
    34aa:	83 30       	cpi	r24, 0x03	; 3
    34ac:	91 05       	cpc	r25, r1
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <GPIO_writePin+0x66>
    34b0:	85 c0       	rjmp	.+266    	; 0x35bc <GPIO_writePin+0x170>
    34b2:	af c0       	rjmp	.+350    	; 0x3612 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:


			if(value == LOGIC_HIGH)
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	a1 f4       	brne	.+40     	; 0x34e2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA , pin_num);
    34ba:	ab e3       	ldi	r26, 0x3B	; 59
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	eb e3       	ldi	r30, 0x3B	; 59
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	48 2f       	mov	r20, r24
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	02 2e       	mov	r0, r18
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <GPIO_writePin+0x8c>
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	0a 94       	dec	r0
    34da:	e2 f7       	brpl	.-8      	; 0x34d4 <GPIO_writePin+0x88>
    34dc:	84 2b       	or	r24, r20
    34de:	8c 93       	st	X, r24
    34e0:	98 c0       	rjmp	.+304    	; 0x3612 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA , pin_num);
    34e2:	ab e3       	ldi	r26, 0x3B	; 59
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	eb e3       	ldi	r30, 0x3B	; 59
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	48 2f       	mov	r20, r24
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	02 2e       	mov	r0, r18
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <GPIO_writePin+0xb4>
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	0a 94       	dec	r0
    3502:	e2 f7       	brpl	.-8      	; 0x34fc <GPIO_writePin+0xb0>
    3504:	80 95       	com	r24
    3506:	84 23       	and	r24, r20
    3508:	8c 93       	st	X, r24
    350a:	83 c0       	rjmp	.+262    	; 0x3612 <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:


			if(value == LOGIC_HIGH)
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	81 30       	cpi	r24, 0x01	; 1
    3510:	a1 f4       	brne	.+40     	; 0x353a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB , pin_num);
    3512:	a8 e3       	ldi	r26, 0x38	; 56
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e8 e3       	ldi	r30, 0x38	; 56
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	48 2f       	mov	r20, r24
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	02 2e       	mov	r0, r18
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <GPIO_writePin+0xe4>
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	0a 94       	dec	r0
    3532:	e2 f7       	brpl	.-8      	; 0x352c <GPIO_writePin+0xe0>
    3534:	84 2b       	or	r24, r20
    3536:	8c 93       	st	X, r24
    3538:	6c c0       	rjmp	.+216    	; 0x3612 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB , pin_num);
    353a:	a8 e3       	ldi	r26, 0x38	; 56
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	e8 e3       	ldi	r30, 0x38	; 56
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	48 2f       	mov	r20, r24
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	02 2e       	mov	r0, r18
    3552:	02 c0       	rjmp	.+4      	; 0x3558 <GPIO_writePin+0x10c>
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	0a 94       	dec	r0
    355a:	e2 f7       	brpl	.-8      	; 0x3554 <GPIO_writePin+0x108>
    355c:	80 95       	com	r24
    355e:	84 23       	and	r24, r20
    3560:	8c 93       	st	X, r24
    3562:	57 c0       	rjmp	.+174    	; 0x3612 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:


			if(value == LOGIC_HIGH)
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	a1 f4       	brne	.+40     	; 0x3592 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC , pin_num);
    356a:	a5 e3       	ldi	r26, 0x35	; 53
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	e5 e3       	ldi	r30, 0x35	; 53
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	48 2f       	mov	r20, r24
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	02 2e       	mov	r0, r18
    3582:	02 c0       	rjmp	.+4      	; 0x3588 <GPIO_writePin+0x13c>
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	0a 94       	dec	r0
    358a:	e2 f7       	brpl	.-8      	; 0x3584 <GPIO_writePin+0x138>
    358c:	84 2b       	or	r24, r20
    358e:	8c 93       	st	X, r24
    3590:	40 c0       	rjmp	.+128    	; 0x3612 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC , pin_num);
    3592:	a5 e3       	ldi	r26, 0x35	; 53
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e5 e3       	ldi	r30, 0x35	; 53
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	48 2f       	mov	r20, r24
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	02 2e       	mov	r0, r18
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <GPIO_writePin+0x164>
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	0a 94       	dec	r0
    35b2:	e2 f7       	brpl	.-8      	; 0x35ac <GPIO_writePin+0x160>
    35b4:	80 95       	com	r24
    35b6:	84 23       	and	r24, r20
    35b8:	8c 93       	st	X, r24
    35ba:	2b c0       	rjmp	.+86     	; 0x3612 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:


			if(value == LOGIC_HIGH)
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	81 30       	cpi	r24, 0x01	; 1
    35c0:	a1 f4       	brne	.+40     	; 0x35ea <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD , pin_num);
    35c2:	a2 e3       	ldi	r26, 0x32	; 50
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e2 e3       	ldi	r30, 0x32	; 50
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	48 2f       	mov	r20, r24
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	02 2e       	mov	r0, r18
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <GPIO_writePin+0x194>
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	0a 94       	dec	r0
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <GPIO_writePin+0x190>
    35e4:	84 2b       	or	r24, r20
    35e6:	8c 93       	st	X, r24
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD , pin_num);
    35ea:	a2 e3       	ldi	r26, 0x32	; 50
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e2 e3       	ldi	r30, 0x32	; 50
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	48 2f       	mov	r20, r24
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	02 2e       	mov	r0, r18
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <GPIO_writePin+0x1bc>
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	0a 94       	dec	r0
    360a:	e2 f7       	brpl	.-8      	; 0x3604 <GPIO_writePin+0x1b8>
    360c:	80 95       	com	r24
    360e:	84 23       	and	r24, r20
    3610:	8c 93       	st	X, r24



	}

}
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <GPIO_readPin+0x6>
    3628:	00 d0       	rcall	.+0      	; 0x362a <GPIO_readPin+0x8>
    362a:	0f 92       	push	r0
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	8a 83       	std	Y+2, r24	; 0x02
    3632:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=0;
    3634:	19 82       	std	Y+1, r1	; 0x01

	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	84 30       	cpi	r24, 0x04	; 4
    363a:	08 f0       	brcs	.+2      	; 0x363e <GPIO_readPin+0x1c>
    363c:	84 c0       	rjmp	.+264    	; 0x3746 <GPIO_readPin+0x124>
    363e:	8b 81       	ldd	r24, Y+3	; 0x03
    3640:	88 30       	cpi	r24, 0x08	; 8
    3642:	08 f0       	brcs	.+2      	; 0x3646 <GPIO_readPin+0x24>
    3644:	80 c0       	rjmp	.+256    	; 0x3746 <GPIO_readPin+0x124>
	{
		/****return 0***/
	}
	else
	{
		switch(port_num)
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	3d 83       	std	Y+5, r19	; 0x05
    364e:	2c 83       	std	Y+4, r18	; 0x04
    3650:	4c 81       	ldd	r20, Y+4	; 0x04
    3652:	5d 81       	ldd	r21, Y+5	; 0x05
    3654:	41 30       	cpi	r20, 0x01	; 1
    3656:	51 05       	cpc	r21, r1
    3658:	79 f1       	breq	.+94     	; 0x36b8 <GPIO_readPin+0x96>
    365a:	8c 81       	ldd	r24, Y+4	; 0x04
    365c:	9d 81       	ldd	r25, Y+5	; 0x05
    365e:	82 30       	cpi	r24, 0x02	; 2
    3660:	91 05       	cpc	r25, r1
    3662:	34 f4       	brge	.+12     	; 0x3670 <GPIO_readPin+0x4e>
    3664:	2c 81       	ldd	r18, Y+4	; 0x04
    3666:	3d 81       	ldd	r19, Y+5	; 0x05
    3668:	21 15       	cp	r18, r1
    366a:	31 05       	cpc	r19, r1
    366c:	69 f0       	breq	.+26     	; 0x3688 <GPIO_readPin+0x66>
    366e:	6b c0       	rjmp	.+214    	; 0x3746 <GPIO_readPin+0x124>
    3670:	4c 81       	ldd	r20, Y+4	; 0x04
    3672:	5d 81       	ldd	r21, Y+5	; 0x05
    3674:	42 30       	cpi	r20, 0x02	; 2
    3676:	51 05       	cpc	r21, r1
    3678:	b9 f1       	breq	.+110    	; 0x36e8 <GPIO_readPin+0xc6>
    367a:	8c 81       	ldd	r24, Y+4	; 0x04
    367c:	9d 81       	ldd	r25, Y+5	; 0x05
    367e:	83 30       	cpi	r24, 0x03	; 3
    3680:	91 05       	cpc	r25, r1
    3682:	09 f4       	brne	.+2      	; 0x3686 <GPIO_readPin+0x64>
    3684:	49 c0       	rjmp	.+146    	; 0x3718 <GPIO_readPin+0xf6>
    3686:	5f c0       	rjmp	.+190    	; 0x3746 <GPIO_readPin+0x124>
		{
		case PORTA_ID:

			if(BIT_IS_SET(PINA,pin_num))
    3688:	e9 e3       	ldi	r30, 0x39	; 57
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	a9 01       	movw	r20, r18
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <GPIO_readPin+0x7e>
    369c:	55 95       	asr	r21
    369e:	47 95       	ror	r20
    36a0:	8a 95       	dec	r24
    36a2:	e2 f7       	brpl	.-8      	; 0x369c <GPIO_readPin+0x7a>
    36a4:	ca 01       	movw	r24, r20
    36a6:	81 70       	andi	r24, 0x01	; 1
    36a8:	90 70       	andi	r25, 0x00	; 0
    36aa:	88 23       	and	r24, r24
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <GPIO_readPin+0x92>
			{
				value=LOGIC_HIGH;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	49 c0       	rjmp	.+146    	; 0x3746 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    36b4:	19 82       	std	Y+1, r1	; 0x01
    36b6:	47 c0       	rjmp	.+142    	; 0x3746 <GPIO_readPin+0x124>
			}break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    36b8:	e6 e3       	ldi	r30, 0x36	; 54
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	80 81       	ld	r24, Z
    36be:	28 2f       	mov	r18, r24
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	88 2f       	mov	r24, r24
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a9 01       	movw	r20, r18
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <GPIO_readPin+0xae>
    36cc:	55 95       	asr	r21
    36ce:	47 95       	ror	r20
    36d0:	8a 95       	dec	r24
    36d2:	e2 f7       	brpl	.-8      	; 0x36cc <GPIO_readPin+0xaa>
    36d4:	ca 01       	movw	r24, r20
    36d6:	81 70       	andi	r24, 0x01	; 1
    36d8:	90 70       	andi	r25, 0x00	; 0
    36da:	88 23       	and	r24, r24
    36dc:	19 f0       	breq	.+6      	; 0x36e4 <GPIO_readPin+0xc2>
			{
				value=LOGIC_HIGH;
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	31 c0       	rjmp	.+98     	; 0x3746 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    36e4:	19 82       	std	Y+1, r1	; 0x01
    36e6:	2f c0       	rjmp	.+94     	; 0x3746 <GPIO_readPin+0x124>
			}break;

		case PORTC_ID:

			if(BIT_IS_SET(PINC,pin_num))
    36e8:	e3 e3       	ldi	r30, 0x33	; 51
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	a9 01       	movw	r20, r18
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <GPIO_readPin+0xde>
    36fc:	55 95       	asr	r21
    36fe:	47 95       	ror	r20
    3700:	8a 95       	dec	r24
    3702:	e2 f7       	brpl	.-8      	; 0x36fc <GPIO_readPin+0xda>
    3704:	ca 01       	movw	r24, r20
    3706:	81 70       	andi	r24, 0x01	; 1
    3708:	90 70       	andi	r25, 0x00	; 0
    370a:	88 23       	and	r24, r24
    370c:	19 f0       	breq	.+6      	; 0x3714 <GPIO_readPin+0xf2>
			{
				value=LOGIC_HIGH;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	19 c0       	rjmp	.+50     	; 0x3746 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    3714:	19 82       	std	Y+1, r1	; 0x01
    3716:	17 c0       	rjmp	.+46     	; 0x3746 <GPIO_readPin+0x124>
			}break;
		case PORTD_ID:

			if(BIT_IS_SET(PIND,pin_num))
    3718:	e0 e3       	ldi	r30, 0x30	; 48
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	a9 01       	movw	r20, r18
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <GPIO_readPin+0x10e>
    372c:	55 95       	asr	r21
    372e:	47 95       	ror	r20
    3730:	8a 95       	dec	r24
    3732:	e2 f7       	brpl	.-8      	; 0x372c <GPIO_readPin+0x10a>
    3734:	ca 01       	movw	r24, r20
    3736:	81 70       	andi	r24, 0x01	; 1
    3738:	90 70       	andi	r25, 0x00	; 0
    373a:	88 23       	and	r24, r24
    373c:	19 f0       	breq	.+6      	; 0x3744 <GPIO_readPin+0x122>
			{
				value=LOGIC_HIGH;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	01 c0       	rjmp	.+2      	; 0x3746 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    3744:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return value;
    3746:	89 81       	ldd	r24, Y+1	; 0x01
}
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	cf 91       	pop	r28
    3754:	df 91       	pop	r29
    3756:	08 95       	ret

00003758 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	00 d0       	rcall	.+0      	; 0x375e <GPIO_setupPortDirection+0x6>
    375e:	00 d0       	rcall	.+0      	; 0x3760 <GPIO_setupPortDirection+0x8>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	84 30       	cpi	r24, 0x04	; 4
    376c:	90 f5       	brcc	.+100    	; 0x37d2 <GPIO_setupPortDirection+0x7a>
		/**do nothing**/
	}
	else
	{

		switch(port_num)
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	3c 83       	std	Y+4, r19	; 0x04
    3776:	2b 83       	std	Y+3, r18	; 0x03
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	9c 81       	ldd	r25, Y+4	; 0x04
    377c:	81 30       	cpi	r24, 0x01	; 1
    377e:	91 05       	cpc	r25, r1
    3780:	d1 f0       	breq	.+52     	; 0x37b6 <GPIO_setupPortDirection+0x5e>
    3782:	2b 81       	ldd	r18, Y+3	; 0x03
    3784:	3c 81       	ldd	r19, Y+4	; 0x04
    3786:	22 30       	cpi	r18, 0x02	; 2
    3788:	31 05       	cpc	r19, r1
    378a:	2c f4       	brge	.+10     	; 0x3796 <GPIO_setupPortDirection+0x3e>
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	9c 81       	ldd	r25, Y+4	; 0x04
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	61 f0       	breq	.+24     	; 0x37ac <GPIO_setupPortDirection+0x54>
    3794:	1e c0       	rjmp	.+60     	; 0x37d2 <GPIO_setupPortDirection+0x7a>
    3796:	2b 81       	ldd	r18, Y+3	; 0x03
    3798:	3c 81       	ldd	r19, Y+4	; 0x04
    379a:	22 30       	cpi	r18, 0x02	; 2
    379c:	31 05       	cpc	r19, r1
    379e:	81 f0       	breq	.+32     	; 0x37c0 <GPIO_setupPortDirection+0x68>
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	9c 81       	ldd	r25, Y+4	; 0x04
    37a4:	83 30       	cpi	r24, 0x03	; 3
    37a6:	91 05       	cpc	r25, r1
    37a8:	81 f0       	breq	.+32     	; 0x37ca <GPIO_setupPortDirection+0x72>
    37aa:	13 c0       	rjmp	.+38     	; 0x37d2 <GPIO_setupPortDirection+0x7a>
		{

		case PORTA_ID:DDRA=direction;break;
    37ac:	ea e3       	ldi	r30, 0x3A	; 58
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	80 83       	st	Z, r24
    37b4:	0e c0       	rjmp	.+28     	; 0x37d2 <GPIO_setupPortDirection+0x7a>
		case PORTB_ID:DDRB=direction;break;
    37b6:	e7 e3       	ldi	r30, 0x37	; 55
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	80 83       	st	Z, r24
    37be:	09 c0       	rjmp	.+18     	; 0x37d2 <GPIO_setupPortDirection+0x7a>
		case PORTC_ID:DDRC=direction;break;
    37c0:	e4 e3       	ldi	r30, 0x34	; 52
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	80 83       	st	Z, r24
    37c8:	04 c0       	rjmp	.+8      	; 0x37d2 <GPIO_setupPortDirection+0x7a>
		case PORTD_ID:DDRD=direction;break;
    37ca:	e1 e3       	ldi	r30, 0x31	; 49
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	8a 81       	ldd	r24, Y+2	; 0x02
    37d0:	80 83       	st	Z, r24

	}
	}

}
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <GPIO_writePort+0x6>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <GPIO_writePort+0x8>
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	84 30       	cpi	r24, 0x04	; 4
    37f4:	90 f5       	brcc	.+100    	; 0x385a <GPIO_writePort+0x7a>
			/**do nothing**/
		}
		else
		{

			switch(port_num)
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	3c 83       	std	Y+4, r19	; 0x04
    37fe:	2b 83       	std	Y+3, r18	; 0x03
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	81 30       	cpi	r24, 0x01	; 1
    3806:	91 05       	cpc	r25, r1
    3808:	d1 f0       	breq	.+52     	; 0x383e <GPIO_writePort+0x5e>
    380a:	2b 81       	ldd	r18, Y+3	; 0x03
    380c:	3c 81       	ldd	r19, Y+4	; 0x04
    380e:	22 30       	cpi	r18, 0x02	; 2
    3810:	31 05       	cpc	r19, r1
    3812:	2c f4       	brge	.+10     	; 0x381e <GPIO_writePort+0x3e>
    3814:	8b 81       	ldd	r24, Y+3	; 0x03
    3816:	9c 81       	ldd	r25, Y+4	; 0x04
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	61 f0       	breq	.+24     	; 0x3834 <GPIO_writePort+0x54>
    381c:	1e c0       	rjmp	.+60     	; 0x385a <GPIO_writePort+0x7a>
    381e:	2b 81       	ldd	r18, Y+3	; 0x03
    3820:	3c 81       	ldd	r19, Y+4	; 0x04
    3822:	22 30       	cpi	r18, 0x02	; 2
    3824:	31 05       	cpc	r19, r1
    3826:	81 f0       	breq	.+32     	; 0x3848 <GPIO_writePort+0x68>
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	9c 81       	ldd	r25, Y+4	; 0x04
    382c:	83 30       	cpi	r24, 0x03	; 3
    382e:	91 05       	cpc	r25, r1
    3830:	81 f0       	breq	.+32     	; 0x3852 <GPIO_writePort+0x72>
    3832:	13 c0       	rjmp	.+38     	; 0x385a <GPIO_writePort+0x7a>
			{
			case PORTA_ID:PORTA=value;break;
    3834:	eb e3       	ldi	r30, 0x3B	; 59
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	8a 81       	ldd	r24, Y+2	; 0x02
    383a:	80 83       	st	Z, r24
    383c:	0e c0       	rjmp	.+28     	; 0x385a <GPIO_writePort+0x7a>
			case PORTB_ID:PORTB=value;break;
    383e:	e8 e3       	ldi	r30, 0x38	; 56
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	80 83       	st	Z, r24
    3846:	09 c0       	rjmp	.+18     	; 0x385a <GPIO_writePort+0x7a>
			case PORTC_ID:PORTC=value;break;
    3848:	e5 e3       	ldi	r30, 0x35	; 53
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	80 83       	st	Z, r24
    3850:	04 c0       	rjmp	.+8      	; 0x385a <GPIO_writePort+0x7a>
			case PORTD_ID:PORTD=value;break;
    3852:	e2 e3       	ldi	r30, 0x32	; 50
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	80 83       	st	Z, r24

			}
		}


}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	00 d0       	rcall	.+0      	; 0x386e <GPIO_readPort+0x6>
    386e:	00 d0       	rcall	.+0      	; 0x3870 <GPIO_readPort+0x8>
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    3876:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	84 30       	cpi	r24, 0x04	; 4
    387c:	90 f5       	brcc	.+100    	; 0x38e2 <GPIO_readPort+0x7a>
			{
				/**retuen 0**/
			}
			else
			{
				switch(port_num)
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	3c 83       	std	Y+4, r19	; 0x04
    3886:	2b 83       	std	Y+3, r18	; 0x03
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
    388a:	9c 81       	ldd	r25, Y+4	; 0x04
    388c:	81 30       	cpi	r24, 0x01	; 1
    388e:	91 05       	cpc	r25, r1
    3890:	d1 f0       	breq	.+52     	; 0x38c6 <GPIO_readPort+0x5e>
    3892:	2b 81       	ldd	r18, Y+3	; 0x03
    3894:	3c 81       	ldd	r19, Y+4	; 0x04
    3896:	22 30       	cpi	r18, 0x02	; 2
    3898:	31 05       	cpc	r19, r1
    389a:	2c f4       	brge	.+10     	; 0x38a6 <GPIO_readPort+0x3e>
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	9c 81       	ldd	r25, Y+4	; 0x04
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	61 f0       	breq	.+24     	; 0x38bc <GPIO_readPort+0x54>
    38a4:	1e c0       	rjmp	.+60     	; 0x38e2 <GPIO_readPort+0x7a>
    38a6:	2b 81       	ldd	r18, Y+3	; 0x03
    38a8:	3c 81       	ldd	r19, Y+4	; 0x04
    38aa:	22 30       	cpi	r18, 0x02	; 2
    38ac:	31 05       	cpc	r19, r1
    38ae:	81 f0       	breq	.+32     	; 0x38d0 <GPIO_readPort+0x68>
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	9c 81       	ldd	r25, Y+4	; 0x04
    38b4:	83 30       	cpi	r24, 0x03	; 3
    38b6:	91 05       	cpc	r25, r1
    38b8:	81 f0       	breq	.+32     	; 0x38da <GPIO_readPort+0x72>
    38ba:	13 c0       	rjmp	.+38     	; 0x38e2 <GPIO_readPort+0x7a>
				{
				case PORTA_ID : value = PINA;break;
    38bc:	e9 e3       	ldi	r30, 0x39	; 57
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	0e c0       	rjmp	.+28     	; 0x38e2 <GPIO_readPort+0x7a>
				case PORTB_ID : value = PINB;break;
    38c6:	e6 e3       	ldi	r30, 0x36	; 54
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	89 83       	std	Y+1, r24	; 0x01
    38ce:	09 c0       	rjmp	.+18     	; 0x38e2 <GPIO_readPort+0x7a>
				case PORTC_ID : value = PINC;break;
    38d0:	e3 e3       	ldi	r30, 0x33	; 51
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <GPIO_readPort+0x7a>
				case PORTD_ID : value = PIND;break;
    38da:	e0 e3       	ldi	r30, 0x30	; 48
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	89 83       	std	Y+1, r24	; 0x01

				}
			}

	return value;
    38e2:	89 81       	ldd	r24, Y+1	; 0x01

			}
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	cf 91       	pop	r28
    38ee:	df 91       	pop	r29
    38f0:	08 95       	ret

000038f2 <KEYPAD_getPressedKey>:

#endif /*STANDARD_KEYPAD**/

/******FUNCTION_DEFINITION***////
uint8 KEYPAD_getPressedKey(void)
{
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	60 97       	sbiw	r28, 0x10	; 16
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
	uint8 row;
	uint8 col;
	/**SET KEYPAD_ROW AS INPUT*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	61 e0       	ldi	r22, 0x01	; 1
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	62 e0       	ldi	r22, 0x02	; 2
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	63 e0       	ldi	r22, 0x03	; 3
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	/**SET KEYPAD_COL AS INPUT*/

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	64 e0       	ldi	r22, 0x04	; 4
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	65 e0       	ldi	r22, 0x05	; 5
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	66 e0       	ldi	r22, 0x06	; 6
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	67 e0       	ldi	r22, 0x07	; 7
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
    3956:	18 8a       	std	Y+16, r1	; 0x10
    3958:	ab c0       	rjmp	.+342    	; 0x3ab0 <KEYPAD_getPressedKey+0x1be>
		{
			/*set pin row as output and write  0 on it and check each column to find the pressed key*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	68 89       	ldd	r22, Y+16	; 0x10
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	68 89       	ldd	r22, Y+16	; 0x10
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
			for(col=0 ; col<KEYPAD_NUM_COLS; col++)
    396e:	1f 86       	std	Y+15, r1	; 0x0f
    3970:	22 c0       	rjmp	.+68     	; 0x39b6 <KEYPAD_getPressedKey+0xc4>
			{
				if( GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3972:	8f 85       	ldd	r24, Y+15	; 0x0f
    3974:	98 2f       	mov	r25, r24
    3976:	9c 5f       	subi	r25, 0xFC	; 252
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	69 2f       	mov	r22, r25
    397c:	0e 94 11 1b 	call	0x3622	; 0x3622 <GPIO_readPin>
    3980:	88 23       	and	r24, r24
    3982:	b1 f4       	brne	.+44     	; 0x39b0 <KEYPAD_getPressedKey+0xbe>

                          #elif (KEYPAD_NUM_COLS == 4)
                                 #ifdef STANDARD_KEYPAD
					              return ((row*KEYPAD_NUM_COLS)+col+1) ;
                                  #else
					              return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    3984:	88 89       	ldd	r24, Y+16	; 0x10
    3986:	88 2f       	mov	r24, r24
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	98 2f       	mov	r25, r24
    3994:	8f 85       	ldd	r24, Y+15	; 0x0f
    3996:	89 0f       	add	r24, r25
    3998:	8f 5f       	subi	r24, 0xFF	; 255
    399a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <KEYPAD_4x4_adjustKeyNumber>
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */


		}
  }
}
    399e:	60 96       	adiw	r28, 0x10	; 16
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
		{
			/*set pin row as output and write  0 on it and check each column to find the pressed key*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
			for(col=0 ; col<KEYPAD_NUM_COLS; col++)
    39b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	8f 87       	std	Y+15, r24	; 0x0f
    39b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	d8 f2       	brcs	.-74     	; 0x3972 <KEYPAD_getPressedKey+0x80>
                          #endif

				}

			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	68 89       	ldd	r22, Y+16	; 0x10
    39c0:	40 e0       	ldi	r20, 0x00	; 0
    39c2:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a0 ea       	ldi	r26, 0xA0	; 160
    39cc:	b0 e4       	ldi	r27, 0x40	; 64
    39ce:	8b 87       	std	Y+11, r24	; 0x0b
    39d0:	9c 87       	std	Y+12, r25	; 0x0c
    39d2:	ad 87       	std	Y+13, r26	; 0x0d
    39d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39da:	8d 85       	ldd	r24, Y+13	; 0x0d
    39dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	4a ef       	ldi	r20, 0xFA	; 250
    39e4:	54 e4       	ldi	r21, 0x44	; 68
    39e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	8f 83       	std	Y+7, r24	; 0x07
    39f0:	98 87       	std	Y+8, r25	; 0x08
    39f2:	a9 87       	std	Y+9, r26	; 0x09
    39f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f6:	6f 81       	ldd	r22, Y+7	; 0x07
    39f8:	78 85       	ldd	r23, Y+8	; 0x08
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	2c f4       	brge	.+10     	; 0x3a18 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	3f c0       	rjmp	.+126    	; 0x3a96 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3a18:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1a:	78 85       	ldd	r23, Y+8	; 0x08
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	3f ef       	ldi	r19, 0xFF	; 255
    3a24:	4f e7       	ldi	r20, 0x7F	; 127
    3a26:	57 e4       	ldi	r21, 0x47	; 71
    3a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2c:	18 16       	cp	r1, r24
    3a2e:	4c f5       	brge	.+82     	; 0x3a82 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e2       	ldi	r20, 0x20	; 32
    3a3e:	51 e4       	ldi	r21, 0x41	; 65
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <KEYPAD_getPressedKey+0x186>
    3a5a:	88 ec       	ldi	r24, 0xC8	; 200
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	9c 83       	std	Y+4, r25	; 0x04
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <KEYPAD_getPressedKey+0x174>
    3a6a:	9c 83       	std	Y+4, r25	; 0x04
    3a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f7       	brne	.-38     	; 0x3a5a <KEYPAD_getPressedKey+0x168>
    3a80:	14 c0       	rjmp	.+40     	; 0x3aaa <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a82:	6f 81       	ldd	r22, Y+7	; 0x07
    3a84:	78 85       	ldd	r23, Y+8	; 0x08
    3a86:	89 85       	ldd	r24, Y+9	; 0x09
    3a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <KEYPAD_getPressedKey+0x1b0>
    3aa6:	9a 83       	std	Y+2, r25	; 0x02
    3aa8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
    3aaa:	88 89       	ldd	r24, Y+16	; 0x10
    3aac:	8f 5f       	subi	r24, 0xFF	; 255
    3aae:	88 8b       	std	Y+16, r24	; 0x10
    3ab0:	88 89       	ldd	r24, Y+16	; 0x10
    3ab2:	84 30       	cpi	r24, 0x04	; 4
    3ab4:	08 f4       	brcc	.+2      	; 0x3ab8 <KEYPAD_getPressedKey+0x1c6>
    3ab6:	51 cf       	rjmp	.-350    	; 0x395a <KEYPAD_getPressedKey+0x68>
    3ab8:	4e cf       	rjmp	.-356    	; 0x3956 <KEYPAD_getPressedKey+0x64>

00003aba <KEYPAD_4x4_adjustKeyNumber>:
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    3ac8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	28 2f       	mov	r18, r24
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	3c 83       	std	Y+4, r19	; 0x04
    3ad2:	2b 83       	std	Y+3, r18	; 0x03
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	88 30       	cpi	r24, 0x08	; 8
    3ada:	91 05       	cpc	r25, r1
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3ade:	70 c0       	rjmp	.+224    	; 0x3bc0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae4:	29 30       	cpi	r18, 0x09	; 9
    3ae6:	31 05       	cpc	r19, r1
    3ae8:	5c f5       	brge	.+86     	; 0x3b40 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	9c 81       	ldd	r25, Y+4	; 0x04
    3aee:	84 30       	cpi	r24, 0x04	; 4
    3af0:	91 05       	cpc	r25, r1
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3af4:	59 c0       	rjmp	.+178    	; 0x3ba8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3af6:	2b 81       	ldd	r18, Y+3	; 0x03
    3af8:	3c 81       	ldd	r19, Y+4	; 0x04
    3afa:	25 30       	cpi	r18, 0x05	; 5
    3afc:	31 05       	cpc	r19, r1
    3afe:	9c f4       	brge	.+38     	; 0x3b26 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	82 30       	cpi	r24, 0x02	; 2
    3b06:	91 05       	cpc	r25, r1
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <KEYPAD_4x4_adjustKeyNumber+0x52>
    3b0a:	48 c0       	rjmp	.+144    	; 0x3b9c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b10:	23 30       	cpi	r18, 0x03	; 3
    3b12:	31 05       	cpc	r19, r1
    3b14:	0c f0       	brlt	.+2      	; 0x3b18 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3b16:	45 c0       	rjmp	.+138    	; 0x3ba2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	81 30       	cpi	r24, 0x01	; 1
    3b1e:	91 05       	cpc	r25, r1
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3b22:	39 c0       	rjmp	.+114    	; 0x3b96 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3b24:	67 c0       	rjmp	.+206    	; 0x3bf4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3b26:	2b 81       	ldd	r18, Y+3	; 0x03
    3b28:	3c 81       	ldd	r19, Y+4	; 0x04
    3b2a:	26 30       	cpi	r18, 0x06	; 6
    3b2c:	31 05       	cpc	r19, r1
    3b2e:	09 f4       	brne	.+2      	; 0x3b32 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3b30:	41 c0       	rjmp	.+130    	; 0x3bb4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3b32:	8b 81       	ldd	r24, Y+3	; 0x03
    3b34:	9c 81       	ldd	r25, Y+4	; 0x04
    3b36:	87 30       	cpi	r24, 0x07	; 7
    3b38:	91 05       	cpc	r25, r1
    3b3a:	0c f0       	brlt	.+2      	; 0x3b3e <KEYPAD_4x4_adjustKeyNumber+0x84>
    3b3c:	3e c0       	rjmp	.+124    	; 0x3bba <KEYPAD_4x4_adjustKeyNumber+0x100>
    3b3e:	37 c0       	rjmp	.+110    	; 0x3bae <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3b40:	2b 81       	ldd	r18, Y+3	; 0x03
    3b42:	3c 81       	ldd	r19, Y+4	; 0x04
    3b44:	2c 30       	cpi	r18, 0x0C	; 12
    3b46:	31 05       	cpc	r19, r1
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <KEYPAD_4x4_adjustKeyNumber+0x92>
    3b4a:	46 c0       	rjmp	.+140    	; 0x3bd8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b50:	8d 30       	cpi	r24, 0x0D	; 13
    3b52:	91 05       	cpc	r25, r1
    3b54:	5c f4       	brge	.+22     	; 0x3b6c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3b56:	2b 81       	ldd	r18, Y+3	; 0x03
    3b58:	3c 81       	ldd	r19, Y+4	; 0x04
    3b5a:	2a 30       	cpi	r18, 0x0A	; 10
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	b1 f1       	breq	.+108    	; 0x3bcc <KEYPAD_4x4_adjustKeyNumber+0x112>
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	9c 81       	ldd	r25, Y+4	; 0x04
    3b64:	8b 30       	cpi	r24, 0x0B	; 11
    3b66:	91 05       	cpc	r25, r1
    3b68:	a4 f5       	brge	.+104    	; 0x3bd2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    3b6a:	2d c0       	rjmp	.+90     	; 0x3bc6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b70:	2e 30       	cpi	r18, 0x0E	; 14
    3b72:	31 05       	cpc	r19, r1
    3b74:	b9 f1       	breq	.+110    	; 0x3be4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7a:	8e 30       	cpi	r24, 0x0E	; 14
    3b7c:	91 05       	cpc	r25, r1
    3b7e:	7c f1       	brlt	.+94     	; 0x3bde <KEYPAD_4x4_adjustKeyNumber+0x124>
    3b80:	2b 81       	ldd	r18, Y+3	; 0x03
    3b82:	3c 81       	ldd	r19, Y+4	; 0x04
    3b84:	2f 30       	cpi	r18, 0x0F	; 15
    3b86:	31 05       	cpc	r19, r1
    3b88:	79 f1       	breq	.+94     	; 0x3be8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8e:	80 31       	cpi	r24, 0x10	; 16
    3b90:	91 05       	cpc	r25, r1
    3b92:	69 f1       	breq	.+90     	; 0x3bee <KEYPAD_4x4_adjustKeyNumber+0x134>
    3b94:	2f c0       	rjmp	.+94     	; 0x3bf4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    3b96:	87 e0       	ldi	r24, 0x07	; 7
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	2e c0       	rjmp	.+92     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 2: keypad_button = 8;
    3b9c:	88 e0       	ldi	r24, 0x08	; 8
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	2b c0       	rjmp	.+86     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 3: keypad_button = 9;
    3ba2:	89 e0       	ldi	r24, 0x09	; 9
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	28 c0       	rjmp	.+80     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 4: keypad_button = '%'; // ASCII Code of %
    3ba8:	85 e2       	ldi	r24, 0x25	; 37
    3baa:	89 83       	std	Y+1, r24	; 0x01
    3bac:	25 c0       	rjmp	.+74     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 5: keypad_button = 4;
    3bae:	84 e0       	ldi	r24, 0x04	; 4
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	22 c0       	rjmp	.+68     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 6: keypad_button = 5;
    3bb4:	85 e0       	ldi	r24, 0x05	; 5
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	1f c0       	rjmp	.+62     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 7: keypad_button = 6;
    3bba:	86 e0       	ldi	r24, 0x06	; 6
    3bbc:	89 83       	std	Y+1, r24	; 0x01
    3bbe:	1c c0       	rjmp	.+56     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3bc0:	8a e2       	ldi	r24, 0x2A	; 42
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	19 c0       	rjmp	.+50     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 9: keypad_button = 1;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    3bca:	16 c0       	rjmp	.+44     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 10: keypad_button = 2;
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	13 c0       	rjmp	.+38     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 11: keypad_button = 3;
    3bd2:	83 e0       	ldi	r24, 0x03	; 3
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	10 c0       	rjmp	.+32     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3bd8:	8d e2       	ldi	r24, 0x2D	; 45
    3bda:	89 83       	std	Y+1, r24	; 0x01
    3bdc:	0d c0       	rjmp	.+26     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 13: keypad_button = 13;  /* ASCII of Enter */
    3bde:	8d e0       	ldi	r24, 0x0D	; 13
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	0a c0       	rjmp	.+20     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 14: keypad_button = 0;
    3be4:	19 82       	std	Y+1, r1	; 0x01
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 15: keypad_button = '='; /* ASCII Code of '=' */
    3be8:	8d e3       	ldi	r24, 0x3D	; 61
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	05 c0       	rjmp	.+10     	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3bee:	8b e2       	ldi	r24, 0x2B	; 43
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			default: keypad_button = button_number;
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	89 83       	std	Y+1, r24	; 0x01
					break;



	}
	return keypad_button;
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	cf 91       	pop	r28
    3c04:	df 91       	pop	r29
    3c06:	08 95       	ret

00003c08 <LCD_init>:


/****************    Functions Definitions *******************/

void LCD_init(void)
{
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	2e 97       	sbiw	r28, 0x0e	; 14
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
	/*set direction of screen pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT); /*LCD RS*/
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);  /*LCD E*/
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	63 e0       	ldi	r22, 0x03	; 3
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	0e 94 3b 19 	call	0x3276	; 0x3276 <GPIO_setupPinDirection>
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	a0 ea       	ldi	r26, 0xA0	; 160
    3c36:	b1 e4       	ldi	r27, 0x41	; 65
    3c38:	8b 87       	std	Y+11, r24	; 0x0b
    3c3a:	9c 87       	std	Y+12, r25	; 0x0c
    3c3c:	ad 87       	std	Y+13, r26	; 0x0d
    3c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	4a ef       	ldi	r20, 0xFA	; 250
    3c4e:	54 e4       	ldi	r21, 0x44	; 68
    3c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	8f 83       	std	Y+7, r24	; 0x07
    3c5a:	98 87       	std	Y+8, r25	; 0x08
    3c5c:	a9 87       	std	Y+9, r26	; 0x09
    3c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c60:	6f 81       	ldd	r22, Y+7	; 0x07
    3c62:	78 85       	ldd	r23, Y+8	; 0x08
    3c64:	89 85       	ldd	r24, Y+9	; 0x09
    3c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e8       	ldi	r20, 0x80	; 128
    3c6e:	5f e3       	ldi	r21, 0x3F	; 63
    3c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c74:	88 23       	and	r24, r24
    3c76:	2c f4       	brge	.+10     	; 0x3c82 <LCD_init+0x7a>
		__ticks = 1;
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	9e 83       	std	Y+6, r25	; 0x06
    3c7e:	8d 83       	std	Y+5, r24	; 0x05
    3c80:	3f c0       	rjmp	.+126    	; 0x3d00 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3c82:	6f 81       	ldd	r22, Y+7	; 0x07
    3c84:	78 85       	ldd	r23, Y+8	; 0x08
    3c86:	89 85       	ldd	r24, Y+9	; 0x09
    3c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	3f ef       	ldi	r19, 0xFF	; 255
    3c8e:	4f e7       	ldi	r20, 0x7F	; 127
    3c90:	57 e4       	ldi	r21, 0x47	; 71
    3c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c96:	18 16       	cp	r1, r24
    3c98:	4c f5       	brge	.+82     	; 0x3cec <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e2       	ldi	r20, 0x20	; 32
    3ca8:	51 e4       	ldi	r21, 0x41	; 65
    3caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	9e 83       	std	Y+6, r25	; 0x06
    3cc0:	8d 83       	std	Y+5, r24	; 0x05
    3cc2:	0f c0       	rjmp	.+30     	; 0x3ce2 <LCD_init+0xda>
    3cc4:	88 ec       	ldi	r24, 0xC8	; 200
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	9c 83       	std	Y+4, r25	; 0x04
    3cca:	8b 83       	std	Y+3, r24	; 0x03
    3ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cce:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	f1 f7       	brne	.-4      	; 0x3cd0 <LCD_init+0xc8>
    3cd4:	9c 83       	std	Y+4, r25	; 0x04
    3cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cda:	9e 81       	ldd	r25, Y+6	; 0x06
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	9e 83       	std	Y+6, r25	; 0x06
    3ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	69 f7       	brne	.-38     	; 0x3cc4 <LCD_init+0xbc>
    3cea:	14 c0       	rjmp	.+40     	; 0x3d14 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
    3d00:	8d 81       	ldd	r24, Y+5	; 0x05
    3d02:	9e 81       	ldd	r25, Y+6	; 0x06
    3d04:	9a 83       	std	Y+2, r25	; 0x02
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <LCD_init+0x104>
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01

		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID ,PORT_OUTPUT);  /*data port*/
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	6f ef       	ldi	r22, 0xFF	; 255
    3d18:	0e 94 ac 1b 	call	0x3758	; 0x3758 <GPIO_setupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3d1c:	88 e3       	ldi	r24, 0x38	; 56
    3d1e:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <LCD_sendCommand>
#endif


	/*5*7 dot display Mode */
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3d22:	8c e0       	ldi	r24, 0x0C	; 12
    3d24:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <LCD_sendCommand>

}
    3d2e:	2e 96       	adiw	r28, 0x0e	; 14
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <LCD_sendCommand>:

/**********************************************************************/


void LCD_sendCommand(uint8 command)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	e9 97       	sbiw	r28, 0x39	; 57
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_LOW);   /* write zero to RS pin to send instruction*/
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	62 e0       	ldi	r22, 0x02	; 2
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	a0 e8       	ldi	r26, 0x80	; 128
    3d66:	bf e3       	ldi	r27, 0x3F	; 63
    3d68:	8d ab       	std	Y+53, r24	; 0x35
    3d6a:	9e ab       	std	Y+54, r25	; 0x36
    3d6c:	af ab       	std	Y+55, r26	; 0x37
    3d6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d70:	6d a9       	ldd	r22, Y+53	; 0x35
    3d72:	7e a9       	ldd	r23, Y+54	; 0x36
    3d74:	8f a9       	ldd	r24, Y+55	; 0x37
    3d76:	98 ad       	ldd	r25, Y+56	; 0x38
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	4a ef       	ldi	r20, 0xFA	; 250
    3d7e:	54 e4       	ldi	r21, 0x44	; 68
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	89 ab       	std	Y+49, r24	; 0x31
    3d8a:	9a ab       	std	Y+50, r25	; 0x32
    3d8c:	ab ab       	std	Y+51, r26	; 0x33
    3d8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d90:	69 a9       	ldd	r22, Y+49	; 0x31
    3d92:	7a a9       	ldd	r23, Y+50	; 0x32
    3d94:	8b a9       	ldd	r24, Y+51	; 0x33
    3d96:	9c a9       	ldd	r25, Y+52	; 0x34
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e8       	ldi	r20, 0x80	; 128
    3d9e:	5f e3       	ldi	r21, 0x3F	; 63
    3da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3da4:	88 23       	and	r24, r24
    3da6:	2c f4       	brge	.+10     	; 0x3db2 <LCD_sendCommand+0x72>
		__ticks = 1;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	98 ab       	std	Y+48, r25	; 0x30
    3dae:	8f a7       	std	Y+47, r24	; 0x2f
    3db0:	3f c0       	rjmp	.+126    	; 0x3e30 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3db2:	69 a9       	ldd	r22, Y+49	; 0x31
    3db4:	7a a9       	ldd	r23, Y+50	; 0x32
    3db6:	8b a9       	ldd	r24, Y+51	; 0x33
    3db8:	9c a9       	ldd	r25, Y+52	; 0x34
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	3f ef       	ldi	r19, 0xFF	; 255
    3dbe:	4f e7       	ldi	r20, 0x7F	; 127
    3dc0:	57 e4       	ldi	r21, 0x47	; 71
    3dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dc6:	18 16       	cp	r1, r24
    3dc8:	4c f5       	brge	.+82     	; 0x3e1c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dca:	6d a9       	ldd	r22, Y+53	; 0x35
    3dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    3dce:	8f a9       	ldd	r24, Y+55	; 0x37
    3dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e2       	ldi	r20, 0x20	; 32
    3dd8:	51 e4       	ldi	r21, 0x41	; 65
    3dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	bc 01       	movw	r22, r24
    3de4:	cd 01       	movw	r24, r26
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	98 ab       	std	Y+48, r25	; 0x30
    3df0:	8f a7       	std	Y+47, r24	; 0x2f
    3df2:	0f c0       	rjmp	.+30     	; 0x3e12 <LCD_sendCommand+0xd2>
    3df4:	88 ec       	ldi	r24, 0xC8	; 200
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	9e a7       	std	Y+46, r25	; 0x2e
    3dfa:	8d a7       	std	Y+45, r24	; 0x2d
    3dfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <LCD_sendCommand+0xc0>
    3e04:	9e a7       	std	Y+46, r25	; 0x2e
    3e06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e08:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e0a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	98 ab       	std	Y+48, r25	; 0x30
    3e10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e14:	98 a9       	ldd	r25, Y+48	; 0x30
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	69 f7       	brne	.-38     	; 0x3df4 <LCD_sendCommand+0xb4>
    3e1a:	14 c0       	rjmp	.+40     	; 0x3e44 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e20:	8b a9       	ldd	r24, Y+51	; 0x33
    3e22:	9c a9       	ldd	r25, Y+52	; 0x34
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	98 ab       	std	Y+48, r25	; 0x30
    3e2e:	8f a7       	std	Y+47, r24	; 0x2f
    3e30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e32:	98 a9       	ldd	r25, Y+48	; 0x30
    3e34:	9c a7       	std	Y+44, r25	; 0x2c
    3e36:	8b a7       	std	Y+43, r24	; 0x2b
    3e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <LCD_sendCommand+0xfc>
    3e40:	9c a7       	std	Y+44, r25	; 0x2c
    3e42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to enable pin*/
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	63 e0       	ldi	r22, 0x03	; 3
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	a0 e8       	ldi	r26, 0x80	; 128
    3e54:	bf e3       	ldi	r27, 0x3F	; 63
    3e56:	8f a3       	std	Y+39, r24	; 0x27
    3e58:	98 a7       	std	Y+40, r25	; 0x28
    3e5a:	a9 a7       	std	Y+41, r26	; 0x29
    3e5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e5e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e60:	78 a5       	ldd	r23, Y+40	; 0x28
    3e62:	89 a5       	ldd	r24, Y+41	; 0x29
    3e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	4a ef       	ldi	r20, 0xFA	; 250
    3e6c:	54 e4       	ldi	r21, 0x44	; 68
    3e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	8b a3       	std	Y+35, r24	; 0x23
    3e78:	9c a3       	std	Y+36, r25	; 0x24
    3e7a:	ad a3       	std	Y+37, r26	; 0x25
    3e7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e80:	7c a1       	ldd	r23, Y+36	; 0x24
    3e82:	8d a1       	ldd	r24, Y+37	; 0x25
    3e84:	9e a1       	ldd	r25, Y+38	; 0x26
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e8       	ldi	r20, 0x80	; 128
    3e8c:	5f e3       	ldi	r21, 0x3F	; 63
    3e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e92:	88 23       	and	r24, r24
    3e94:	2c f4       	brge	.+10     	; 0x3ea0 <LCD_sendCommand+0x160>
		__ticks = 1;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	9a a3       	std	Y+34, r25	; 0x22
    3e9c:	89 a3       	std	Y+33, r24	; 0x21
    3e9e:	3f c0       	rjmp	.+126    	; 0x3f1e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	3f ef       	ldi	r19, 0xFF	; 255
    3eac:	4f e7       	ldi	r20, 0x7F	; 127
    3eae:	57 e4       	ldi	r21, 0x47	; 71
    3eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eb4:	18 16       	cp	r1, r24
    3eb6:	4c f5       	brge	.+82     	; 0x3f0a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eba:	78 a5       	ldd	r23, Y+40	; 0x28
    3ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e2       	ldi	r20, 0x20	; 32
    3ec6:	51 e4       	ldi	r21, 0x41	; 65
    3ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	bc 01       	movw	r22, r24
    3ed2:	cd 01       	movw	r24, r26
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9a a3       	std	Y+34, r25	; 0x22
    3ede:	89 a3       	std	Y+33, r24	; 0x21
    3ee0:	0f c0       	rjmp	.+30     	; 0x3f00 <LCD_sendCommand+0x1c0>
    3ee2:	88 ec       	ldi	r24, 0xC8	; 200
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	98 a3       	std	Y+32, r25	; 0x20
    3ee8:	8f 8f       	std	Y+31, r24	; 0x1f
    3eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eec:	98 a1       	ldd	r25, Y+32	; 0x20
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <LCD_sendCommand+0x1ae>
    3ef2:	98 a3       	std	Y+32, r25	; 0x20
    3ef4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	9a a3       	std	Y+34, r25	; 0x22
    3efe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f00:	89 a1       	ldd	r24, Y+33	; 0x21
    3f02:	9a a1       	ldd	r25, Y+34	; 0x22
    3f04:	00 97       	sbiw	r24, 0x00	; 0
    3f06:	69 f7       	brne	.-38     	; 0x3ee2 <LCD_sendCommand+0x1a2>
    3f08:	14 c0       	rjmp	.+40     	; 0x3f32 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f10:	9e a1       	ldd	r25, Y+38	; 0x26
    3f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	9a a3       	std	Y+34, r25	; 0x22
    3f1c:	89 a3       	std	Y+33, r24	; 0x21
    3f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f20:	9a a1       	ldd	r25, Y+34	; 0x22
    3f22:	9e 8f       	std	Y+30, r25	; 0x1e
    3f24:	8d 8f       	std	Y+29, r24	; 0x1d
    3f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <LCD_sendCommand+0x1ea>
    3f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    3f30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,command);   /*send command to screen*/
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	69 ad       	ldd	r22, Y+57	; 0x39
    3f36:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <GPIO_writePort>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	a0 e8       	ldi	r26, 0x80	; 128
    3f40:	bf e3       	ldi	r27, 0x3F	; 63
    3f42:	89 8f       	std	Y+25, r24	; 0x19
    3f44:	9a 8f       	std	Y+26, r25	; 0x1a
    3f46:	ab 8f       	std	Y+27, r26	; 0x1b
    3f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	4a ef       	ldi	r20, 0xFA	; 250
    3f58:	54 e4       	ldi	r21, 0x44	; 68
    3f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8d 8b       	std	Y+21, r24	; 0x15
    3f64:	9e 8b       	std	Y+22, r25	; 0x16
    3f66:	af 8b       	std	Y+23, r26	; 0x17
    3f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f70:	98 8d       	ldd	r25, Y+24	; 0x18
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e8       	ldi	r20, 0x80	; 128
    3f78:	5f e3       	ldi	r21, 0x3F	; 63
    3f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f7e:	88 23       	and	r24, r24
    3f80:	2c f4       	brge	.+10     	; 0x3f8c <LCD_sendCommand+0x24c>
		__ticks = 1;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9c 8b       	std	Y+20, r25	; 0x14
    3f88:	8b 8b       	std	Y+19, r24	; 0x13
    3f8a:	3f c0       	rjmp	.+126    	; 0x400a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f90:	8f 89       	ldd	r24, Y+23	; 0x17
    3f92:	98 8d       	ldd	r25, Y+24	; 0x18
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	3f ef       	ldi	r19, 0xFF	; 255
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	57 e4       	ldi	r21, 0x47	; 71
    3f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	4c f5       	brge	.+82     	; 0x3ff6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e2       	ldi	r20, 0x20	; 32
    3fb2:	51 e4       	ldi	r21, 0x41	; 65
    3fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9c 8b       	std	Y+20, r25	; 0x14
    3fca:	8b 8b       	std	Y+19, r24	; 0x13
    3fcc:	0f c0       	rjmp	.+30     	; 0x3fec <LCD_sendCommand+0x2ac>
    3fce:	88 ec       	ldi	r24, 0xC8	; 200
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	9a 8b       	std	Y+18, r25	; 0x12
    3fd4:	89 8b       	std	Y+17, r24	; 0x11
    3fd6:	89 89       	ldd	r24, Y+17	; 0x11
    3fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <LCD_sendCommand+0x29a>
    3fde:	9a 8b       	std	Y+18, r25	; 0x12
    3fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	9c 8b       	std	Y+20, r25	; 0x14
    3fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fec:	8b 89       	ldd	r24, Y+19	; 0x13
    3fee:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	69 f7       	brne	.-38     	; 0x3fce <LCD_sendCommand+0x28e>
    3ff4:	14 c0       	rjmp	.+40     	; 0x401e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9c 8b       	std	Y+20, r25	; 0x14
    4008:	8b 8b       	std	Y+19, r24	; 0x13
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	98 8b       	std	Y+16, r25	; 0x10
    4010:	8f 87       	std	Y+15, r24	; 0x0f
    4012:	8f 85       	ldd	r24, Y+15	; 0x0f
    4014:	98 89       	ldd	r25, Y+16	; 0x10
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <LCD_sendCommand+0x2d6>
    401a:	98 8b       	std	Y+16, r25	; 0x10
    401c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	63 e0       	ldi	r22, 0x03	; 3
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	a0 e8       	ldi	r26, 0x80	; 128
    402e:	bf e3       	ldi	r27, 0x3F	; 63
    4030:	8b 87       	std	Y+11, r24	; 0x0b
    4032:	9c 87       	std	Y+12, r25	; 0x0c
    4034:	ad 87       	std	Y+13, r26	; 0x0d
    4036:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4038:	6b 85       	ldd	r22, Y+11	; 0x0b
    403a:	7c 85       	ldd	r23, Y+12	; 0x0c
    403c:	8d 85       	ldd	r24, Y+13	; 0x0d
    403e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	4a ef       	ldi	r20, 0xFA	; 250
    4046:	54 e4       	ldi	r21, 0x44	; 68
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	8f 83       	std	Y+7, r24	; 0x07
    4052:	98 87       	std	Y+8, r25	; 0x08
    4054:	a9 87       	std	Y+9, r26	; 0x09
    4056:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4058:	6f 81       	ldd	r22, Y+7	; 0x07
    405a:	78 85       	ldd	r23, Y+8	; 0x08
    405c:	89 85       	ldd	r24, Y+9	; 0x09
    405e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e8       	ldi	r20, 0x80	; 128
    4066:	5f e3       	ldi	r21, 0x3F	; 63
    4068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    406c:	88 23       	and	r24, r24
    406e:	2c f4       	brge	.+10     	; 0x407a <LCD_sendCommand+0x33a>
		__ticks = 1;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	9e 83       	std	Y+6, r25	; 0x06
    4076:	8d 83       	std	Y+5, r24	; 0x05
    4078:	3f c0       	rjmp	.+126    	; 0x40f8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    407a:	6f 81       	ldd	r22, Y+7	; 0x07
    407c:	78 85       	ldd	r23, Y+8	; 0x08
    407e:	89 85       	ldd	r24, Y+9	; 0x09
    4080:	9a 85       	ldd	r25, Y+10	; 0x0a
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	3f ef       	ldi	r19, 0xFF	; 255
    4086:	4f e7       	ldi	r20, 0x7F	; 127
    4088:	57 e4       	ldi	r21, 0x47	; 71
    408a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    408e:	18 16       	cp	r1, r24
    4090:	4c f5       	brge	.+82     	; 0x40e4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4092:	6b 85       	ldd	r22, Y+11	; 0x0b
    4094:	7c 85       	ldd	r23, Y+12	; 0x0c
    4096:	8d 85       	ldd	r24, Y+13	; 0x0d
    4098:	9e 85       	ldd	r25, Y+14	; 0x0e
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e2       	ldi	r20, 0x20	; 32
    40a0:	51 e4       	ldi	r21, 0x41	; 65
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	bc 01       	movw	r22, r24
    40ac:	cd 01       	movw	r24, r26
    40ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	9e 83       	std	Y+6, r25	; 0x06
    40b8:	8d 83       	std	Y+5, r24	; 0x05
    40ba:	0f c0       	rjmp	.+30     	; 0x40da <LCD_sendCommand+0x39a>
    40bc:	88 ec       	ldi	r24, 0xC8	; 200
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	9c 83       	std	Y+4, r25	; 0x04
    40c2:	8b 83       	std	Y+3, r24	; 0x03
    40c4:	8b 81       	ldd	r24, Y+3	; 0x03
    40c6:	9c 81       	ldd	r25, Y+4	; 0x04
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <LCD_sendCommand+0x388>
    40cc:	9c 83       	std	Y+4, r25	; 0x04
    40ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d0:	8d 81       	ldd	r24, Y+5	; 0x05
    40d2:	9e 81       	ldd	r25, Y+6	; 0x06
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40da:	8d 81       	ldd	r24, Y+5	; 0x05
    40dc:	9e 81       	ldd	r25, Y+6	; 0x06
    40de:	00 97       	sbiw	r24, 0x00	; 0
    40e0:	69 f7       	brne	.-38     	; 0x40bc <LCD_sendCommand+0x37c>
    40e2:	14 c0       	rjmp	.+40     	; 0x410c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e4:	6f 81       	ldd	r22, Y+7	; 0x07
    40e6:	78 85       	ldd	r23, Y+8	; 0x08
    40e8:	89 85       	ldd	r24, Y+9	; 0x09
    40ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	9e 83       	std	Y+6, r25	; 0x06
    40f6:	8d 83       	std	Y+5, r24	; 0x05
    40f8:	8d 81       	ldd	r24, Y+5	; 0x05
    40fa:	9e 81       	ldd	r25, Y+6	; 0x06
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	89 83       	std	Y+1, r24	; 0x01
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <LCD_sendCommand+0x3c4>
    4108:	9a 83       	std	Y+2, r25	; 0x02
    410a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif

}
    410c:	e9 96       	adiw	r28, 0x39	; 57
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <LCD_displayCharacter>:

/**********************************************************************/


void LCD_displayCharacter(uint8 character)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	e9 97       	sbiw	r28, 0x39	; 57
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_HIGH);   /* write 1 to RS pin to send DATA*/
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	62 e0       	ldi	r22, 0x02	; 2
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	a0 e8       	ldi	r26, 0x80	; 128
    4144:	bf e3       	ldi	r27, 0x3F	; 63
    4146:	8d ab       	std	Y+53, r24	; 0x35
    4148:	9e ab       	std	Y+54, r25	; 0x36
    414a:	af ab       	std	Y+55, r26	; 0x37
    414c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414e:	6d a9       	ldd	r22, Y+53	; 0x35
    4150:	7e a9       	ldd	r23, Y+54	; 0x36
    4152:	8f a9       	ldd	r24, Y+55	; 0x37
    4154:	98 ad       	ldd	r25, Y+56	; 0x38
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	4a ef       	ldi	r20, 0xFA	; 250
    415c:	54 e4       	ldi	r21, 0x44	; 68
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	89 ab       	std	Y+49, r24	; 0x31
    4168:	9a ab       	std	Y+50, r25	; 0x32
    416a:	ab ab       	std	Y+51, r26	; 0x33
    416c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    416e:	69 a9       	ldd	r22, Y+49	; 0x31
    4170:	7a a9       	ldd	r23, Y+50	; 0x32
    4172:	8b a9       	ldd	r24, Y+51	; 0x33
    4174:	9c a9       	ldd	r25, Y+52	; 0x34
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e8       	ldi	r20, 0x80	; 128
    417c:	5f e3       	ldi	r21, 0x3F	; 63
    417e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4182:	88 23       	and	r24, r24
    4184:	2c f4       	brge	.+10     	; 0x4190 <LCD_displayCharacter+0x72>
		__ticks = 1;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	98 ab       	std	Y+48, r25	; 0x30
    418c:	8f a7       	std	Y+47, r24	; 0x2f
    418e:	3f c0       	rjmp	.+126    	; 0x420e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    4190:	69 a9       	ldd	r22, Y+49	; 0x31
    4192:	7a a9       	ldd	r23, Y+50	; 0x32
    4194:	8b a9       	ldd	r24, Y+51	; 0x33
    4196:	9c a9       	ldd	r25, Y+52	; 0x34
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	3f ef       	ldi	r19, 0xFF	; 255
    419c:	4f e7       	ldi	r20, 0x7F	; 127
    419e:	57 e4       	ldi	r21, 0x47	; 71
    41a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41a4:	18 16       	cp	r1, r24
    41a6:	4c f5       	brge	.+82     	; 0x41fa <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a8:	6d a9       	ldd	r22, Y+53	; 0x35
    41aa:	7e a9       	ldd	r23, Y+54	; 0x36
    41ac:	8f a9       	ldd	r24, Y+55	; 0x37
    41ae:	98 ad       	ldd	r25, Y+56	; 0x38
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e2       	ldi	r20, 0x20	; 32
    41b6:	51 e4       	ldi	r21, 0x41	; 65
    41b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	bc 01       	movw	r22, r24
    41c2:	cd 01       	movw	r24, r26
    41c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	98 ab       	std	Y+48, r25	; 0x30
    41ce:	8f a7       	std	Y+47, r24	; 0x2f
    41d0:	0f c0       	rjmp	.+30     	; 0x41f0 <LCD_displayCharacter+0xd2>
    41d2:	88 ec       	ldi	r24, 0xC8	; 200
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	9e a7       	std	Y+46, r25	; 0x2e
    41d8:	8d a7       	std	Y+45, r24	; 0x2d
    41da:	8d a5       	ldd	r24, Y+45	; 0x2d
    41dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <LCD_displayCharacter+0xc0>
    41e2:	9e a7       	std	Y+46, r25	; 0x2e
    41e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e8:	98 a9       	ldd	r25, Y+48	; 0x30
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	98 ab       	std	Y+48, r25	; 0x30
    41ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f2:	98 a9       	ldd	r25, Y+48	; 0x30
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	69 f7       	brne	.-38     	; 0x41d2 <LCD_displayCharacter+0xb4>
    41f8:	14 c0       	rjmp	.+40     	; 0x4222 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fa:	69 a9       	ldd	r22, Y+49	; 0x31
    41fc:	7a a9       	ldd	r23, Y+50	; 0x32
    41fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4200:	9c a9       	ldd	r25, Y+52	; 0x34
    4202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	98 ab       	std	Y+48, r25	; 0x30
    420c:	8f a7       	std	Y+47, r24	; 0x2f
    420e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4210:	98 a9       	ldd	r25, Y+48	; 0x30
    4212:	9c a7       	std	Y+44, r25	; 0x2c
    4214:	8b a7       	std	Y+43, r24	; 0x2b
    4216:	8b a5       	ldd	r24, Y+43	; 0x2b
    4218:	9c a5       	ldd	r25, Y+44	; 0x2c
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <LCD_displayCharacter+0xfc>
    421e:	9c a7       	std	Y+44, r25	; 0x2c
    4220:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to  E enable pin*/
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	63 e0       	ldi	r22, 0x03	; 3
    4226:	41 e0       	ldi	r20, 0x01	; 1
    4228:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	a0 e8       	ldi	r26, 0x80	; 128
    4232:	bf e3       	ldi	r27, 0x3F	; 63
    4234:	8f a3       	std	Y+39, r24	; 0x27
    4236:	98 a7       	std	Y+40, r25	; 0x28
    4238:	a9 a7       	std	Y+41, r26	; 0x29
    423a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423c:	6f a1       	ldd	r22, Y+39	; 0x27
    423e:	78 a5       	ldd	r23, Y+40	; 0x28
    4240:	89 a5       	ldd	r24, Y+41	; 0x29
    4242:	9a a5       	ldd	r25, Y+42	; 0x2a
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	4a ef       	ldi	r20, 0xFA	; 250
    424a:	54 e4       	ldi	r21, 0x44	; 68
    424c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	8b a3       	std	Y+35, r24	; 0x23
    4256:	9c a3       	std	Y+36, r25	; 0x24
    4258:	ad a3       	std	Y+37, r26	; 0x25
    425a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    425c:	6b a1       	ldd	r22, Y+35	; 0x23
    425e:	7c a1       	ldd	r23, Y+36	; 0x24
    4260:	8d a1       	ldd	r24, Y+37	; 0x25
    4262:	9e a1       	ldd	r25, Y+38	; 0x26
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e8       	ldi	r20, 0x80	; 128
    426a:	5f e3       	ldi	r21, 0x3F	; 63
    426c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4270:	88 23       	and	r24, r24
    4272:	2c f4       	brge	.+10     	; 0x427e <LCD_displayCharacter+0x160>
		__ticks = 1;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	9a a3       	std	Y+34, r25	; 0x22
    427a:	89 a3       	std	Y+33, r24	; 0x21
    427c:	3f c0       	rjmp	.+126    	; 0x42fc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    427e:	6b a1       	ldd	r22, Y+35	; 0x23
    4280:	7c a1       	ldd	r23, Y+36	; 0x24
    4282:	8d a1       	ldd	r24, Y+37	; 0x25
    4284:	9e a1       	ldd	r25, Y+38	; 0x26
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	3f ef       	ldi	r19, 0xFF	; 255
    428a:	4f e7       	ldi	r20, 0x7F	; 127
    428c:	57 e4       	ldi	r21, 0x47	; 71
    428e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4292:	18 16       	cp	r1, r24
    4294:	4c f5       	brge	.+82     	; 0x42e8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4296:	6f a1       	ldd	r22, Y+39	; 0x27
    4298:	78 a5       	ldd	r23, Y+40	; 0x28
    429a:	89 a5       	ldd	r24, Y+41	; 0x29
    429c:	9a a5       	ldd	r25, Y+42	; 0x2a
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	40 e2       	ldi	r20, 0x20	; 32
    42a4:	51 e4       	ldi	r21, 0x41	; 65
    42a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	bc 01       	movw	r22, r24
    42b0:	cd 01       	movw	r24, r26
    42b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	9a a3       	std	Y+34, r25	; 0x22
    42bc:	89 a3       	std	Y+33, r24	; 0x21
    42be:	0f c0       	rjmp	.+30     	; 0x42de <LCD_displayCharacter+0x1c0>
    42c0:	88 ec       	ldi	r24, 0xC8	; 200
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	98 a3       	std	Y+32, r25	; 0x20
    42c6:	8f 8f       	std	Y+31, r24	; 0x1f
    42c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42ca:	98 a1       	ldd	r25, Y+32	; 0x20
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	f1 f7       	brne	.-4      	; 0x42cc <LCD_displayCharacter+0x1ae>
    42d0:	98 a3       	std	Y+32, r25	; 0x20
    42d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d4:	89 a1       	ldd	r24, Y+33	; 0x21
    42d6:	9a a1       	ldd	r25, Y+34	; 0x22
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	9a a3       	std	Y+34, r25	; 0x22
    42dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42de:	89 a1       	ldd	r24, Y+33	; 0x21
    42e0:	9a a1       	ldd	r25, Y+34	; 0x22
    42e2:	00 97       	sbiw	r24, 0x00	; 0
    42e4:	69 f7       	brne	.-38     	; 0x42c0 <LCD_displayCharacter+0x1a2>
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e8:	6b a1       	ldd	r22, Y+35	; 0x23
    42ea:	7c a1       	ldd	r23, Y+36	; 0x24
    42ec:	8d a1       	ldd	r24, Y+37	; 0x25
    42ee:	9e a1       	ldd	r25, Y+38	; 0x26
    42f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	9a a3       	std	Y+34, r25	; 0x22
    42fa:	89 a3       	std	Y+33, r24	; 0x21
    42fc:	89 a1       	ldd	r24, Y+33	; 0x21
    42fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4300:	9e 8f       	std	Y+30, r25	; 0x1e
    4302:	8d 8f       	std	Y+29, r24	; 0x1d
    4304:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4306:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <LCD_displayCharacter+0x1ea>
    430c:	9e 8f       	std	Y+30, r25	; 0x1e
    430e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,character);   /*send command to screen*/
    4310:	82 e0       	ldi	r24, 0x02	; 2
    4312:	69 ad       	ldd	r22, Y+57	; 0x39
    4314:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <GPIO_writePort>
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	a0 e8       	ldi	r26, 0x80	; 128
    431e:	bf e3       	ldi	r27, 0x3F	; 63
    4320:	89 8f       	std	Y+25, r24	; 0x19
    4322:	9a 8f       	std	Y+26, r25	; 0x1a
    4324:	ab 8f       	std	Y+27, r26	; 0x1b
    4326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4328:	69 8d       	ldd	r22, Y+25	; 0x19
    432a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    432c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    432e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4a ef       	ldi	r20, 0xFA	; 250
    4336:	54 e4       	ldi	r21, 0x44	; 68
    4338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	8d 8b       	std	Y+21, r24	; 0x15
    4342:	9e 8b       	std	Y+22, r25	; 0x16
    4344:	af 8b       	std	Y+23, r26	; 0x17
    4346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4348:	6d 89       	ldd	r22, Y+21	; 0x15
    434a:	7e 89       	ldd	r23, Y+22	; 0x16
    434c:	8f 89       	ldd	r24, Y+23	; 0x17
    434e:	98 8d       	ldd	r25, Y+24	; 0x18
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e8       	ldi	r20, 0x80	; 128
    4356:	5f e3       	ldi	r21, 0x3F	; 63
    4358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    435c:	88 23       	and	r24, r24
    435e:	2c f4       	brge	.+10     	; 0x436a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	9c 8b       	std	Y+20, r25	; 0x14
    4366:	8b 8b       	std	Y+19, r24	; 0x13
    4368:	3f c0       	rjmp	.+126    	; 0x43e8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    436a:	6d 89       	ldd	r22, Y+21	; 0x15
    436c:	7e 89       	ldd	r23, Y+22	; 0x16
    436e:	8f 89       	ldd	r24, Y+23	; 0x17
    4370:	98 8d       	ldd	r25, Y+24	; 0x18
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	3f ef       	ldi	r19, 0xFF	; 255
    4376:	4f e7       	ldi	r20, 0x7F	; 127
    4378:	57 e4       	ldi	r21, 0x47	; 71
    437a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    437e:	18 16       	cp	r1, r24
    4380:	4c f5       	brge	.+82     	; 0x43d4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4382:	69 8d       	ldd	r22, Y+25	; 0x19
    4384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	40 e2       	ldi	r20, 0x20	; 32
    4390:	51 e4       	ldi	r21, 0x41	; 65
    4392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	bc 01       	movw	r22, r24
    439c:	cd 01       	movw	r24, r26
    439e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	9c 8b       	std	Y+20, r25	; 0x14
    43a8:	8b 8b       	std	Y+19, r24	; 0x13
    43aa:	0f c0       	rjmp	.+30     	; 0x43ca <LCD_displayCharacter+0x2ac>
    43ac:	88 ec       	ldi	r24, 0xC8	; 200
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	9a 8b       	std	Y+18, r25	; 0x12
    43b2:	89 8b       	std	Y+17, r24	; 0x11
    43b4:	89 89       	ldd	r24, Y+17	; 0x11
    43b6:	9a 89       	ldd	r25, Y+18	; 0x12
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	f1 f7       	brne	.-4      	; 0x43b8 <LCD_displayCharacter+0x29a>
    43bc:	9a 8b       	std	Y+18, r25	; 0x12
    43be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c0:	8b 89       	ldd	r24, Y+19	; 0x13
    43c2:	9c 89       	ldd	r25, Y+20	; 0x14
    43c4:	01 97       	sbiw	r24, 0x01	; 1
    43c6:	9c 8b       	std	Y+20, r25	; 0x14
    43c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ca:	8b 89       	ldd	r24, Y+19	; 0x13
    43cc:	9c 89       	ldd	r25, Y+20	; 0x14
    43ce:	00 97       	sbiw	r24, 0x00	; 0
    43d0:	69 f7       	brne	.-38     	; 0x43ac <LCD_displayCharacter+0x28e>
    43d2:	14 c0       	rjmp	.+40     	; 0x43fc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d4:	6d 89       	ldd	r22, Y+21	; 0x15
    43d6:	7e 89       	ldd	r23, Y+22	; 0x16
    43d8:	8f 89       	ldd	r24, Y+23	; 0x17
    43da:	98 8d       	ldd	r25, Y+24	; 0x18
    43dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	9c 8b       	std	Y+20, r25	; 0x14
    43e6:	8b 8b       	std	Y+19, r24	; 0x13
    43e8:	8b 89       	ldd	r24, Y+19	; 0x13
    43ea:	9c 89       	ldd	r25, Y+20	; 0x14
    43ec:	98 8b       	std	Y+16, r25	; 0x10
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
    43f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f2:	98 89       	ldd	r25, Y+16	; 0x10
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	f1 f7       	brne	.-4      	; 0x43f4 <LCD_displayCharacter+0x2d6>
    43f8:	98 8b       	std	Y+16, r25	; 0x10
    43fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	63 e0       	ldi	r22, 0x03	; 3
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	0e 94 26 1a 	call	0x344c	; 0x344c <GPIO_writePin>
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	a0 e8       	ldi	r26, 0x80	; 128
    440c:	bf e3       	ldi	r27, 0x3F	; 63
    440e:	8b 87       	std	Y+11, r24	; 0x0b
    4410:	9c 87       	std	Y+12, r25	; 0x0c
    4412:	ad 87       	std	Y+13, r26	; 0x0d
    4414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4416:	6b 85       	ldd	r22, Y+11	; 0x0b
    4418:	7c 85       	ldd	r23, Y+12	; 0x0c
    441a:	8d 85       	ldd	r24, Y+13	; 0x0d
    441c:	9e 85       	ldd	r25, Y+14	; 0x0e
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	4a ef       	ldi	r20, 0xFA	; 250
    4424:	54 e4       	ldi	r21, 0x44	; 68
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	8f 83       	std	Y+7, r24	; 0x07
    4430:	98 87       	std	Y+8, r25	; 0x08
    4432:	a9 87       	std	Y+9, r26	; 0x09
    4434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4436:	6f 81       	ldd	r22, Y+7	; 0x07
    4438:	78 85       	ldd	r23, Y+8	; 0x08
    443a:	89 85       	ldd	r24, Y+9	; 0x09
    443c:	9a 85       	ldd	r25, Y+10	; 0x0a
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	40 e8       	ldi	r20, 0x80	; 128
    4444:	5f e3       	ldi	r21, 0x3F	; 63
    4446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    444a:	88 23       	and	r24, r24
    444c:	2c f4       	brge	.+10     	; 0x4458 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	9e 83       	std	Y+6, r25	; 0x06
    4454:	8d 83       	std	Y+5, r24	; 0x05
    4456:	3f c0       	rjmp	.+126    	; 0x44d6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4458:	6f 81       	ldd	r22, Y+7	; 0x07
    445a:	78 85       	ldd	r23, Y+8	; 0x08
    445c:	89 85       	ldd	r24, Y+9	; 0x09
    445e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	3f ef       	ldi	r19, 0xFF	; 255
    4464:	4f e7       	ldi	r20, 0x7F	; 127
    4466:	57 e4       	ldi	r21, 0x47	; 71
    4468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    446c:	18 16       	cp	r1, r24
    446e:	4c f5       	brge	.+82     	; 0x44c2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4470:	6b 85       	ldd	r22, Y+11	; 0x0b
    4472:	7c 85       	ldd	r23, Y+12	; 0x0c
    4474:	8d 85       	ldd	r24, Y+13	; 0x0d
    4476:	9e 85       	ldd	r25, Y+14	; 0x0e
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	40 e2       	ldi	r20, 0x20	; 32
    447e:	51 e4       	ldi	r21, 0x41	; 65
    4480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	bc 01       	movw	r22, r24
    448a:	cd 01       	movw	r24, r26
    448c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	9e 83       	std	Y+6, r25	; 0x06
    4496:	8d 83       	std	Y+5, r24	; 0x05
    4498:	0f c0       	rjmp	.+30     	; 0x44b8 <LCD_displayCharacter+0x39a>
    449a:	88 ec       	ldi	r24, 0xC8	; 200
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 83       	std	Y+4, r25	; 0x04
    44a0:	8b 83       	std	Y+3, r24	; 0x03
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	9c 81       	ldd	r25, Y+4	; 0x04
    44a6:	01 97       	sbiw	r24, 0x01	; 1
    44a8:	f1 f7       	brne	.-4      	; 0x44a6 <LCD_displayCharacter+0x388>
    44aa:	9c 83       	std	Y+4, r25	; 0x04
    44ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ae:	8d 81       	ldd	r24, Y+5	; 0x05
    44b0:	9e 81       	ldd	r25, Y+6	; 0x06
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	9e 83       	std	Y+6, r25	; 0x06
    44b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	9e 81       	ldd	r25, Y+6	; 0x06
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	69 f7       	brne	.-38     	; 0x449a <LCD_displayCharacter+0x37c>
    44c0:	14 c0       	rjmp	.+40     	; 0x44ea <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c2:	6f 81       	ldd	r22, Y+7	; 0x07
    44c4:	78 85       	ldd	r23, Y+8	; 0x08
    44c6:	89 85       	ldd	r24, Y+9	; 0x09
    44c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	9e 83       	std	Y+6, r25	; 0x06
    44d4:	8d 83       	std	Y+5, r24	; 0x05
    44d6:	8d 81       	ldd	r24, Y+5	; 0x05
    44d8:	9e 81       	ldd	r25, Y+6	; 0x06
    44da:	9a 83       	std	Y+2, r25	; 0x02
    44dc:	89 83       	std	Y+1, r24	; 0x01
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	9a 81       	ldd	r25, Y+2	; 0x02
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	f1 f7       	brne	.-4      	; 0x44e2 <LCD_displayCharacter+0x3c4>
    44e6:	9a 83       	std	Y+2, r25	; 0x02
    44e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif


}
    44ea:	e9 96       	adiw	r28, 0x39	; 57
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	cf 91       	pop	r28
    44f8:	df 91       	pop	r29
    44fa:	08 95       	ret

000044fc <LCD_displayString>:

/**********************************************************************/

void LCD_displayString(const char *Str)
{
    44fc:	df 93       	push	r29
    44fe:	cf 93       	push	r28
    4500:	00 d0       	rcall	.+0      	; 0x4502 <LCD_displayString+0x6>
    4502:	00 d0       	rcall	.+0      	; 0x4504 <LCD_displayString+0x8>
    4504:	00 d0       	rcall	.+0      	; 0x4506 <LCD_displayString+0xa>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	9e 83       	std	Y+6, r25	; 0x06
    450c:	8d 83       	std	Y+5, r24	; 0x05
	uint32 i=0;
    450e:	19 82       	std	Y+1, r1	; 0x01
    4510:	1a 82       	std	Y+2, r1	; 0x02
    4512:	1b 82       	std	Y+3, r1	; 0x03
    4514:	1c 82       	std	Y+4, r1	; 0x04
    4516:	15 c0       	rjmp	.+42     	; 0x4542 <LCD_displayString+0x46>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4518:	29 81       	ldd	r18, Y+1	; 0x01
    451a:	3a 81       	ldd	r19, Y+2	; 0x02
    451c:	8d 81       	ldd	r24, Y+5	; 0x05
    451e:	9e 81       	ldd	r25, Y+6	; 0x06
    4520:	fc 01       	movw	r30, r24
    4522:	e2 0f       	add	r30, r18
    4524:	f3 1f       	adc	r31, r19
    4526:	80 81       	ld	r24, Z
    4528:	0e 94 8f 20 	call	0x411e	; 0x411e <LCD_displayCharacter>
		i++;
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	9a 81       	ldd	r25, Y+2	; 0x02
    4530:	ab 81       	ldd	r26, Y+3	; 0x03
    4532:	bc 81       	ldd	r27, Y+4	; 0x04
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	a1 1d       	adc	r26, r1
    4538:	b1 1d       	adc	r27, r1
    453a:	89 83       	std	Y+1, r24	; 0x01
    453c:	9a 83       	std	Y+2, r25	; 0x02
    453e:	ab 83       	std	Y+3, r26	; 0x03
    4540:	bc 83       	std	Y+4, r27	; 0x04
/**********************************************************************/

void LCD_displayString(const char *Str)
{
	uint32 i=0;
	while(Str[i] != '\0')
    4542:	29 81       	ldd	r18, Y+1	; 0x01
    4544:	3a 81       	ldd	r19, Y+2	; 0x02
    4546:	8d 81       	ldd	r24, Y+5	; 0x05
    4548:	9e 81       	ldd	r25, Y+6	; 0x06
    454a:	fc 01       	movw	r30, r24
    454c:	e2 0f       	add	r30, r18
    454e:	f3 1f       	adc	r31, r19
    4550:	80 81       	ld	r24, Z
    4552:	88 23       	and	r24, r24
    4554:	09 f7       	brne	.-62     	; 0x4518 <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    4556:	26 96       	adiw	r28, 0x06	; 6
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	cf 91       	pop	r28
    4564:	df 91       	pop	r29
    4566:	08 95       	ret

00004568 <LCD_moveCursor>:

/**********************************************************************/


void LCD_moveCursor(uint8 row,uint8 col)
{
    4568:	df 93       	push	r29
    456a:	cf 93       	push	r28
    456c:	00 d0       	rcall	.+0      	; 0x456e <LCD_moveCursor+0x6>
    456e:	00 d0       	rcall	.+0      	; 0x4570 <LCD_moveCursor+0x8>
    4570:	0f 92       	push	r0
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	8a 83       	std	Y+2, r24	; 0x02
    4578:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    457a:	8a 81       	ldd	r24, Y+2	; 0x02
    457c:	28 2f       	mov	r18, r24
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	3d 83       	std	Y+5, r19	; 0x05
    4582:	2c 83       	std	Y+4, r18	; 0x04
    4584:	8c 81       	ldd	r24, Y+4	; 0x04
    4586:	9d 81       	ldd	r25, Y+5	; 0x05
    4588:	81 30       	cpi	r24, 0x01	; 1
    458a:	91 05       	cpc	r25, r1
    458c:	c1 f0       	breq	.+48     	; 0x45be <LCD_moveCursor+0x56>
    458e:	2c 81       	ldd	r18, Y+4	; 0x04
    4590:	3d 81       	ldd	r19, Y+5	; 0x05
    4592:	22 30       	cpi	r18, 0x02	; 2
    4594:	31 05       	cpc	r19, r1
    4596:	2c f4       	brge	.+10     	; 0x45a2 <LCD_moveCursor+0x3a>
    4598:	8c 81       	ldd	r24, Y+4	; 0x04
    459a:	9d 81       	ldd	r25, Y+5	; 0x05
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	61 f0       	breq	.+24     	; 0x45b8 <LCD_moveCursor+0x50>
    45a0:	19 c0       	rjmp	.+50     	; 0x45d4 <LCD_moveCursor+0x6c>
    45a2:	2c 81       	ldd	r18, Y+4	; 0x04
    45a4:	3d 81       	ldd	r19, Y+5	; 0x05
    45a6:	22 30       	cpi	r18, 0x02	; 2
    45a8:	31 05       	cpc	r19, r1
    45aa:	69 f0       	breq	.+26     	; 0x45c6 <LCD_moveCursor+0x5e>
    45ac:	8c 81       	ldd	r24, Y+4	; 0x04
    45ae:	9d 81       	ldd	r25, Y+5	; 0x05
    45b0:	83 30       	cpi	r24, 0x03	; 3
    45b2:	91 05       	cpc	r25, r1
    45b4:	61 f0       	breq	.+24     	; 0x45ce <LCD_moveCursor+0x66>
    45b6:	0e c0       	rjmp	.+28     	; 0x45d4 <LCD_moveCursor+0x6c>
	{
	case 0 : lcd_memory_address= col;break;
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	89 83       	std	Y+1, r24	; 0x01
    45bc:	0b c0       	rjmp	.+22     	; 0x45d4 <LCD_moveCursor+0x6c>
	case 1:  lcd_memory_address= col+0x40;break;
    45be:	8b 81       	ldd	r24, Y+3	; 0x03
    45c0:	80 5c       	subi	r24, 0xC0	; 192
    45c2:	89 83       	std	Y+1, r24	; 0x01
    45c4:	07 c0       	rjmp	.+14     	; 0x45d4 <LCD_moveCursor+0x6c>
	case 2:  lcd_memory_address= col+0x10;break;
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	80 5f       	subi	r24, 0xF0	; 240
    45ca:	89 83       	std	Y+1, r24	; 0x01
    45cc:	03 c0       	rjmp	.+6      	; 0x45d4 <LCD_moveCursor+0x6c>
	case 3:  lcd_memory_address= col+0x50;break;
    45ce:	8b 81       	ldd	r24, Y+3	; 0x03
    45d0:	80 5b       	subi	r24, 0xB0	; 176
    45d2:	89 83       	std	Y+1, r24	; 0x01


	}

	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);  /*address of cursor the MSB always be 1*/
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	80 68       	ori	r24, 0x80	; 128
    45d8:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <LCD_sendCommand>
	/*so thats why we made address or with 0x80*/


}
    45dc:	0f 90       	pop	r0
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	0f 90       	pop	r0
    45e6:	cf 91       	pop	r28
    45e8:	df 91       	pop	r29
    45ea:	08 95       	ret

000045ec <LCD_displayStringRowColumn>:

/**********************************************************************/

void LCD_displayStringRowColumn(uint8 row , uint8 col,const char *str)
{
    45ec:	df 93       	push	r29
    45ee:	cf 93       	push	r28
    45f0:	00 d0       	rcall	.+0      	; 0x45f2 <LCD_displayStringRowColumn+0x6>
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <LCD_displayStringRowColumn+0x8>
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	89 83       	std	Y+1, r24	; 0x01
    45fa:	6a 83       	std	Y+2, r22	; 0x02
    45fc:	5c 83       	std	Y+4, r21	; 0x04
    45fe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);  /*required position*/
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	6a 81       	ldd	r22, Y+2	; 0x02
    4604:	0e 94 b4 22 	call	0x4568	; 0x4568 <LCD_moveCursor>
	LCD_displayString(str);  /*display string/*/
    4608:	8b 81       	ldd	r24, Y+3	; 0x03
    460a:	9c 81       	ldd	r25, Y+4	; 0x04
    460c:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>

}
    4610:	0f 90       	pop	r0
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	cf 91       	pop	r28
    461a:	df 91       	pop	r29
    461c:	08 95       	ret

0000461e <LCD_intgerToString>:
/**********************************************************************/

void LCD_intgerToString(int data)
{
    461e:	df 93       	push	r29
    4620:	cf 93       	push	r28
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	62 97       	sbiw	r28, 0x12	; 18
    4628:	0f b6       	in	r0, 0x3f	; 63
    462a:	f8 94       	cli
    462c:	de bf       	out	0x3e, r29	; 62
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	9a 8b       	std	Y+18, r25	; 0x12
    4634:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4636:	89 89       	ldd	r24, Y+17	; 0x11
    4638:	9a 89       	ldd	r25, Y+18	; 0x12
    463a:	9e 01       	movw	r18, r28
    463c:	2f 5f       	subi	r18, 0xFF	; 255
    463e:	3f 4f       	sbci	r19, 0xFF	; 255
    4640:	b9 01       	movw	r22, r18
    4642:	4a e0       	ldi	r20, 0x0A	; 10
    4644:	50 e0       	ldi	r21, 0x00	; 0
    4646:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <itoa>
	LCD_displayString(buff);
    464a:	ce 01       	movw	r24, r28
    464c:	01 96       	adiw	r24, 0x01	; 1
    464e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_displayString>
}
    4652:	62 96       	adiw	r28, 0x12	; 18
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	cf 91       	pop	r28
    4660:	df 91       	pop	r29
    4662:	08 95       	ret

00004664 <LCD_clearScreen>:

/**********************************************************************/

void LCD_clearScreen(void)
{
    4664:	df 93       	push	r29
    4666:	cf 93       	push	r28
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <LCD_sendCommand>
}
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <__vector_7>:

/************************  Interrupt Service Routines ****************************/

/*for CTC mode*/
ISR(TIMER1_COMPA_vect)
{
    4678:	1f 92       	push	r1
    467a:	0f 92       	push	r0
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	0f 92       	push	r0
    4680:	11 24       	eor	r1, r1
    4682:	2f 93       	push	r18
    4684:	3f 93       	push	r19
    4686:	4f 93       	push	r20
    4688:	5f 93       	push	r21
    468a:	6f 93       	push	r22
    468c:	7f 93       	push	r23
    468e:	8f 93       	push	r24
    4690:	9f 93       	push	r25
    4692:	af 93       	push	r26
    4694:	bf 93       	push	r27
    4696:	ef 93       	push	r30
    4698:	ff 93       	push	r31
    469a:	df 93       	push	r29
    469c:	cf 93       	push	r28
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    46a2:	80 91 f8 00 	lds	r24, 0x00F8
    46a6:	90 91 f9 00 	lds	r25, 0x00F9
    46aa:	00 97       	sbiw	r24, 0x00	; 0
    46ac:	29 f0       	breq	.+10     	; 0x46b8 <__vector_7+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    46ae:	e0 91 f8 00 	lds	r30, 0x00F8
    46b2:	f0 91 f9 00 	lds	r31, 0x00F9
    46b6:	09 95       	icall
	}


}
    46b8:	cf 91       	pop	r28
    46ba:	df 91       	pop	r29
    46bc:	ff 91       	pop	r31
    46be:	ef 91       	pop	r30
    46c0:	bf 91       	pop	r27
    46c2:	af 91       	pop	r26
    46c4:	9f 91       	pop	r25
    46c6:	8f 91       	pop	r24
    46c8:	7f 91       	pop	r23
    46ca:	6f 91       	pop	r22
    46cc:	5f 91       	pop	r21
    46ce:	4f 91       	pop	r20
    46d0:	3f 91       	pop	r19
    46d2:	2f 91       	pop	r18
    46d4:	0f 90       	pop	r0
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	0f 90       	pop	r0
    46da:	1f 90       	pop	r1
    46dc:	18 95       	reti

000046de <__vector_9>:

/* for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    46de:	1f 92       	push	r1
    46e0:	0f 92       	push	r0
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	0f 92       	push	r0
    46e6:	11 24       	eor	r1, r1
    46e8:	2f 93       	push	r18
    46ea:	3f 93       	push	r19
    46ec:	4f 93       	push	r20
    46ee:	5f 93       	push	r21
    46f0:	6f 93       	push	r22
    46f2:	7f 93       	push	r23
    46f4:	8f 93       	push	r24
    46f6:	9f 93       	push	r25
    46f8:	af 93       	push	r26
    46fa:	bf 93       	push	r27
    46fc:	ef 93       	push	r30
    46fe:	ff 93       	push	r31
    4700:	df 93       	push	r29
    4702:	cf 93       	push	r28
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    4708:	80 91 f8 00 	lds	r24, 0x00F8
    470c:	90 91 f9 00 	lds	r25, 0x00F9
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	29 f0       	breq	.+10     	; 0x471e <__vector_9+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    4714:	e0 91 f8 00 	lds	r30, 0x00F8
    4718:	f0 91 f9 00 	lds	r31, 0x00F9
    471c:	09 95       	icall
	}

}
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	ff 91       	pop	r31
    4724:	ef 91       	pop	r30
    4726:	bf 91       	pop	r27
    4728:	af 91       	pop	r26
    472a:	9f 91       	pop	r25
    472c:	8f 91       	pop	r24
    472e:	7f 91       	pop	r23
    4730:	6f 91       	pop	r22
    4732:	5f 91       	pop	r21
    4734:	4f 91       	pop	r20
    4736:	3f 91       	pop	r19
    4738:	2f 91       	pop	r18
    473a:	0f 90       	pop	r0
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	0f 90       	pop	r0
    4740:	1f 90       	pop	r1
    4742:	18 95       	reti

00004744 <Timer1_init>:

/*****************FINCTION_DEFINTION***************************************/


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    4744:	df 93       	push	r29
    4746:	cf 93       	push	r28
    4748:	00 d0       	rcall	.+0      	; 0x474a <Timer1_init+0x6>
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	89 83       	std	Y+1, r24	; 0x01
	/**Normal port operation, OC1A/OC1B disconnected*/
	TCCR1A = (1<<FOC1A) ;
    4752:	ef e4       	ldi	r30, 0x4F	; 79
    4754:	f0 e0       	ldi	r31, 0x00	; 0
    4756:	88 e0       	ldi	r24, 0x08	; 8
    4758:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B &0xF7) |  ((Config_Ptr->mode) <<3 );   /* to set timer mode*/
    475a:	ae e4       	ldi	r26, 0x4E	; 78
    475c:	b0 e0       	ldi	r27, 0x00	; 0
    475e:	ee e4       	ldi	r30, 0x4E	; 78
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	80 81       	ld	r24, Z
    4764:	28 2f       	mov	r18, r24
    4766:	27 7f       	andi	r18, 0xF7	; 247
    4768:	e9 81       	ldd	r30, Y+1	; 0x01
    476a:	fa 81       	ldd	r31, Y+2	; 0x02
    476c:	85 81       	ldd	r24, Z+5	; 0x05
    476e:	88 2f       	mov	r24, r24
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	88 0f       	add	r24, r24
    4774:	99 1f       	adc	r25, r25
    4776:	88 0f       	add	r24, r24
    4778:	99 1f       	adc	r25, r25
    477a:	88 0f       	add	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	82 2b       	or	r24, r18
    4780:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B &0xF8) |  ((Config_Ptr->prescaler) );  /* prescaler*/
    4782:	ae e4       	ldi	r26, 0x4E	; 78
    4784:	b0 e0       	ldi	r27, 0x00	; 0
    4786:	ee e4       	ldi	r30, 0x4E	; 78
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	80 81       	ld	r24, Z
    478c:	98 2f       	mov	r25, r24
    478e:	98 7f       	andi	r25, 0xF8	; 248
    4790:	e9 81       	ldd	r30, Y+1	; 0x01
    4792:	fa 81       	ldd	r31, Y+2	; 0x02
    4794:	84 81       	ldd	r24, Z+4	; 0x04
    4796:	89 2b       	or	r24, r25
    4798:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    479a:	ac e4       	ldi	r26, 0x4C	; 76
    479c:	b0 e0       	ldi	r27, 0x00	; 0
    479e:	e9 81       	ldd	r30, Y+1	; 0x01
    47a0:	fa 81       	ldd	r31, Y+2	; 0x02
    47a2:	80 81       	ld	r24, Z
    47a4:	91 81       	ldd	r25, Z+1	; 0x01
    47a6:	11 96       	adiw	r26, 0x01	; 1
    47a8:	9c 93       	st	X, r25
    47aa:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == CTC )
    47ac:	e9 81       	ldd	r30, Y+1	; 0x01
    47ae:	fa 81       	ldd	r31, Y+2	; 0x02
    47b0:	85 81       	ldd	r24, Z+5	; 0x05
    47b2:	81 30       	cpi	r24, 0x01	; 1
    47b4:	71 f4       	brne	.+28     	; 0x47d2 <Timer1_init+0x8e>
	{
		OCR1A = Config_Ptr->compare_value ;
    47b6:	aa e4       	ldi	r26, 0x4A	; 74
    47b8:	b0 e0       	ldi	r27, 0x00	; 0
    47ba:	e9 81       	ldd	r30, Y+1	; 0x01
    47bc:	fa 81       	ldd	r31, Y+2	; 0x02
    47be:	82 81       	ldd	r24, Z+2	; 0x02
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	11 96       	adiw	r26, 0x01	; 1
    47c4:	9c 93       	st	X, r25
    47c6:	8e 93       	st	-X, r24
		TIMSK  = (1<<OCIE1A); /*Output Compare A Match Interrupt Enable*/
    47c8:	e9 e5       	ldi	r30, 0x59	; 89
    47ca:	f0 e0       	ldi	r31, 0x00	; 0
    47cc:	80 e1       	ldi	r24, 0x10	; 16
    47ce:	80 83       	st	Z, r24
    47d0:	04 c0       	rjmp	.+8      	; 0x47da <Timer1_init+0x96>
	}
	else
	{
		TIMSK  = (1<<TOIE1); /*Overflow Interrupt Enable*/
    47d2:	e9 e5       	ldi	r30, 0x59	; 89
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	84 e0       	ldi	r24, 0x04	; 4
    47d8:	80 83       	st	Z, r24

	}
}
    47da:	0f 90       	pop	r0
    47dc:	0f 90       	pop	r0
    47de:	cf 91       	pop	r28
    47e0:	df 91       	pop	r29
    47e2:	08 95       	ret

000047e4 <Timer1_deInit>:

	/****************************************************************************/
	void Timer1_deInit(void)
	{
    47e4:	df 93       	push	r29
    47e6:	cf 93       	push	r28
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
		TCCR1B = 0 ;  /*no clock*/
    47ec:	ee e4       	ldi	r30, 0x4E	; 78
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	10 82       	st	Z, r1

	}
    47f2:	cf 91       	pop	r28
    47f4:	df 91       	pop	r29
    47f6:	08 95       	ret

000047f8 <Timer1_setCallBack>:
	/**************************************************************/

	void Timer1_setCallBack(void(*a_ptr)(void))
	{
    47f8:	df 93       	push	r29
    47fa:	cf 93       	push	r28
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <Timer1_setCallBack+0x6>
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	9a 83       	std	Y+2, r25	; 0x02
    4804:	89 83       	std	Y+1, r24	; 0x01
		g_callBackPtr = a_ptr ;
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	9a 81       	ldd	r25, Y+2	; 0x02
    480a:	90 93 f9 00 	sts	0x00F9, r25
    480e:	80 93 f8 00 	sts	0x00F8, r24

	}
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
    4816:	cf 91       	pop	r28
    4818:	df 91       	pop	r29
    481a:	08 95       	ret

0000481c <UART_init>:

/*****Function DEFINITIONS**************/


void UART_init(const USART_ConfigType* Config_Ptr )
{
    481c:	df 93       	push	r29
    481e:	cf 93       	push	r28
    4820:	00 d0       	rcall	.+0      	; 0x4822 <UART_init+0x6>
    4822:	00 d0       	rcall	.+0      	; 0x4824 <UART_init+0x8>
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	9c 83       	std	Y+4, r25	; 0x04
    482a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value =0;
    482c:	1a 82       	std	Y+2, r1	; 0x02
    482e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X) ;   /* Double the USART Transmission Speed*/
    4830:	eb e2       	ldi	r30, 0x2B	; 43
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	82 e0       	ldi	r24, 0x02	; 2
    4836:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);  /* enable UART*/
    4838:	ea e2       	ldi	r30, 0x2A	; 42
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	88 e1       	ldi	r24, 0x18	; 24
    483e:	80 83       	st	Z, r24

	UCSRB = (UCSRB&0xFB) | ((Config_Ptr->datasize) & 0x4) ;  /*  UCSZ2 for data size*/
    4840:	aa e2       	ldi	r26, 0x2A	; 42
    4842:	b0 e0       	ldi	r27, 0x00	; 0
    4844:	ea e2       	ldi	r30, 0x2A	; 42
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	80 81       	ld	r24, Z
    484a:	98 2f       	mov	r25, r24
    484c:	9b 7f       	andi	r25, 0xFB	; 251
    484e:	eb 81       	ldd	r30, Y+3	; 0x03
    4850:	fc 81       	ldd	r31, Y+4	; 0x04
    4852:	83 81       	ldd	r24, Z+3	; 0x03
    4854:	84 70       	andi	r24, 0x04	; 4
    4856:	89 2b       	or	r24, r25
    4858:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL); /* to select UCSRC register*/
    485a:	a0 e4       	ldi	r26, 0x40	; 64
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e0 e4       	ldi	r30, 0x40	; 64
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	80 68       	ori	r24, 0x80	; 128
    4866:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);  /* to select USART MODE*/
    4868:	a0 e4       	ldi	r26, 0x40	; 64
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	e0 e4       	ldi	r30, 0x40	; 64
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	28 2f       	mov	r18, r24
    4874:	2f 7b       	andi	r18, 0xBF	; 191
    4876:	eb 81       	ldd	r30, Y+3	; 0x03
    4878:	fc 81       	ldd	r31, Y+4	; 0x04
    487a:	80 81       	ld	r24, Z
    487c:	88 2f       	mov	r24, r24
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	00 24       	eor	r0, r0
    4882:	96 95       	lsr	r25
    4884:	87 95       	ror	r24
    4886:	07 94       	ror	r0
    4888:	96 95       	lsr	r25
    488a:	87 95       	ror	r24
    488c:	07 94       	ror	r0
    488e:	98 2f       	mov	r25, r24
    4890:	80 2d       	mov	r24, r0
    4892:	82 2b       	or	r24, r18
    4894:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)  << 4); /*Parity Mode*/
    4896:	a0 e4       	ldi	r26, 0x40	; 64
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e0 e4       	ldi	r30, 0x40	; 64
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	28 2f       	mov	r18, r24
    48a2:	2f 7c       	andi	r18, 0xCF	; 207
    48a4:	eb 81       	ldd	r30, Y+3	; 0x03
    48a6:	fc 81       	ldd	r31, Y+4	; 0x04
    48a8:	81 81       	ldd	r24, Z+1	; 0x01
    48aa:	88 2f       	mov	r24, r24
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	82 95       	swap	r24
    48b0:	92 95       	swap	r25
    48b2:	90 7f       	andi	r25, 0xF0	; 240
    48b4:	98 27       	eor	r25, r24
    48b6:	80 7f       	andi	r24, 0xF0	; 240
    48b8:	98 27       	eor	r25, r24
    48ba:	82 2b       	or	r24, r18
    48bc:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopbit)  << 3); /* stop bit*/
    48be:	a0 e4       	ldi	r26, 0x40	; 64
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	e0 e4       	ldi	r30, 0x40	; 64
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	80 81       	ld	r24, Z
    48c8:	28 2f       	mov	r18, r24
    48ca:	27 7f       	andi	r18, 0xF7	; 247
    48cc:	eb 81       	ldd	r30, Y+3	; 0x03
    48ce:	fc 81       	ldd	r31, Y+4	; 0x04
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	88 2f       	mov	r24, r24
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	88 0f       	add	r24, r24
    48d8:	99 1f       	adc	r25, r25
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	82 2b       	or	r24, r18
    48e4:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (( (Config_Ptr->datasize)& 0x3) <<1) ; /* for data size*/
    48e6:	a0 e4       	ldi	r26, 0x40	; 64
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	e0 e4       	ldi	r30, 0x40	; 64
    48ec:	f0 e0       	ldi	r31, 0x00	; 0
    48ee:	80 81       	ld	r24, Z
    48f0:	28 2f       	mov	r18, r24
    48f2:	29 7f       	andi	r18, 0xF9	; 249
    48f4:	eb 81       	ldd	r30, Y+3	; 0x03
    48f6:	fc 81       	ldd	r31, Y+4	; 0x04
    48f8:	83 81       	ldd	r24, Z+3	; 0x03
    48fa:	88 2f       	mov	r24, r24
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	83 70       	andi	r24, 0x03	; 3
    4900:	90 70       	andi	r25, 0x00	; 0
    4902:	88 0f       	add	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	82 2b       	or	r24, r18
    4908:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    490a:	eb 81       	ldd	r30, Y+3	; 0x03
    490c:	fc 81       	ldd	r31, Y+4	; 0x04
    490e:	84 81       	ldd	r24, Z+4	; 0x04
    4910:	95 81       	ldd	r25, Z+5	; 0x05
    4912:	a6 81       	ldd	r26, Z+6	; 0x06
    4914:	b7 81       	ldd	r27, Z+7	; 0x07
    4916:	88 0f       	add	r24, r24
    4918:	99 1f       	adc	r25, r25
    491a:	aa 1f       	adc	r26, r26
    491c:	bb 1f       	adc	r27, r27
    491e:	88 0f       	add	r24, r24
    4920:	99 1f       	adc	r25, r25
    4922:	aa 1f       	adc	r26, r26
    4924:	bb 1f       	adc	r27, r27
    4926:	88 0f       	add	r24, r24
    4928:	99 1f       	adc	r25, r25
    492a:	aa 1f       	adc	r26, r26
    492c:	bb 1f       	adc	r27, r27
    492e:	9c 01       	movw	r18, r24
    4930:	ad 01       	movw	r20, r26
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	92 e1       	ldi	r25, 0x12	; 18
    4936:	aa e7       	ldi	r26, 0x7A	; 122
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	bc 01       	movw	r22, r24
    493c:	cd 01       	movw	r24, r26
    493e:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__udivmodsi4>
    4942:	da 01       	movw	r26, r20
    4944:	c9 01       	movw	r24, r18
    4946:	01 97       	sbiw	r24, 0x01	; 1
    4948:	9a 83       	std	Y+2, r25	; 0x02
    494a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    494c:	e0 e4       	ldi	r30, 0x40	; 64
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	9a 81       	ldd	r25, Y+2	; 0x02
    4954:	89 2f       	mov	r24, r25
    4956:	99 27       	eor	r25, r25
    4958:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    495a:	e9 e2       	ldi	r30, 0x29	; 41
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	80 83       	st	Z, r24

}
    4962:	0f 90       	pop	r0
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	cf 91       	pop	r28
    496c:	df 91       	pop	r29
    496e:	08 95       	ret

00004970 <UART_sendByte>:
/***********************************************************************************************/

void UART_sendByte(const uint8 data)

{
    4970:	df 93       	push	r29
    4972:	cf 93       	push	r28
    4974:	0f 92       	push	r0
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}  /* wait until transmit is complete*/
    497c:	eb e2       	ldi	r30, 0x2B	; 43
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	88 2f       	mov	r24, r24
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	80 72       	andi	r24, 0x20	; 32
    4988:	90 70       	andi	r25, 0x00	; 0
    498a:	00 97       	sbiw	r24, 0x00	; 0
    498c:	b9 f3       	breq	.-18     	; 0x497c <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    498e:	ec e2       	ldi	r30, 0x2C	; 44
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	80 83       	st	Z, r24

}
    4996:	0f 90       	pop	r0
    4998:	cf 91       	pop	r28
    499a:	df 91       	pop	r29
    499c:	08 95       	ret

0000499e <UART_recieveByte>:
/*************************************************************************************************/

uint8 UART_recieveByte(void)
{
    499e:	df 93       	push	r29
    49a0:	cf 93       	push	r28
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    49a6:	eb e2       	ldi	r30, 0x2B	; 43
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	88 23       	and	r24, r24
    49ae:	dc f7       	brge	.-10     	; 0x49a6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    49b0:	ec e2       	ldi	r30, 0x2C	; 44
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z

}
    49b6:	cf 91       	pop	r28
    49b8:	df 91       	pop	r29
    49ba:	08 95       	ret

000049bc <UART_sendString>:
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
    49bc:	df 93       	push	r29
    49be:	cf 93       	push	r28
    49c0:	00 d0       	rcall	.+0      	; 0x49c2 <UART_sendString+0x6>
    49c2:	00 d0       	rcall	.+0      	; 0x49c4 <UART_sendString+0x8>
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    49c8:	9c 83       	std	Y+4, r25	; 0x04
    49ca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i =0;
    49cc:	1a 82       	std	Y+2, r1	; 0x02
    49ce:	19 82       	std	Y+1, r1	; 0x01
    49d0:	0f c0       	rjmp	.+30     	; 0x49f0 <UART_sendString+0x34>
while(Str[i] != '\0')
{
	UART_sendByte(Str[i]);
    49d2:	2b 81       	ldd	r18, Y+3	; 0x03
    49d4:	3c 81       	ldd	r19, Y+4	; 0x04
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	9a 81       	ldd	r25, Y+2	; 0x02
    49da:	f9 01       	movw	r30, r18
    49dc:	e8 0f       	add	r30, r24
    49de:	f9 1f       	adc	r31, r25
    49e0:	80 81       	ld	r24, Z
    49e2:	0e 94 b8 24 	call	0x4970	; 0x4970 <UART_sendByte>
	i++;
    49e6:	89 81       	ldd	r24, Y+1	; 0x01
    49e8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ea:	01 96       	adiw	r24, 0x01	; 1
    49ec:	9a 83       	std	Y+2, r25	; 0x02
    49ee:	89 83       	std	Y+1, r24	; 0x01
}
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint16 i =0;
while(Str[i] != '\0')
    49f0:	2b 81       	ldd	r18, Y+3	; 0x03
    49f2:	3c 81       	ldd	r19, Y+4	; 0x04
    49f4:	89 81       	ldd	r24, Y+1	; 0x01
    49f6:	9a 81       	ldd	r25, Y+2	; 0x02
    49f8:	f9 01       	movw	r30, r18
    49fa:	e8 0f       	add	r30, r24
    49fc:	f9 1f       	adc	r31, r25
    49fe:	80 81       	ld	r24, Z
    4a00:	88 23       	and	r24, r24
    4a02:	39 f7       	brne	.-50     	; 0x49d2 <UART_sendString+0x16>
{
	UART_sendByte(Str[i]);
	i++;
}

}
    4a04:	0f 90       	pop	r0
    4a06:	0f 90       	pop	r0
    4a08:	0f 90       	pop	r0
    4a0a:	0f 90       	pop	r0
    4a0c:	cf 91       	pop	r28
    4a0e:	df 91       	pop	r29
    4a10:	08 95       	ret

00004a12 <UART_receiveString>:

/*******************************************************************************************/
void UART_receiveString(uint8 *Str)
{
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	00 d0       	rcall	.+0      	; 0x4a1c <UART_receiveString+0xa>
    4a1c:	0f 92       	push	r0
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	9b 83       	std	Y+3, r25	; 0x03
    4a24:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    4a26:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	28 2f       	mov	r18, r24
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a30:	9b 81       	ldd	r25, Y+3	; 0x03
    4a32:	8c 01       	movw	r16, r24
    4a34:	02 0f       	add	r16, r18
    4a36:	13 1f       	adc	r17, r19
    4a38:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_recieveByte>
    4a3c:	f8 01       	movw	r30, r16
    4a3e:	80 83       	st	Z, r24
    4a40:	0f c0       	rjmp	.+30     	; 0x4a60 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    4a42:	89 81       	ldd	r24, Y+1	; 0x01
    4a44:	8f 5f       	subi	r24, 0xFF	; 255
    4a46:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	28 2f       	mov	r18, r24
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a50:	9b 81       	ldd	r25, Y+3	; 0x03
    4a52:	8c 01       	movw	r16, r24
    4a54:	02 0f       	add	r16, r18
    4a56:	13 1f       	adc	r17, r19
    4a58:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_recieveByte>
    4a5c:	f8 01       	movw	r30, r16
    4a5e:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    4a60:	89 81       	ldd	r24, Y+1	; 0x01
    4a62:	28 2f       	mov	r18, r24
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	8a 81       	ldd	r24, Y+2	; 0x02
    4a68:	9b 81       	ldd	r25, Y+3	; 0x03
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	e2 0f       	add	r30, r18
    4a6e:	f3 1f       	adc	r31, r19
    4a70:	80 81       	ld	r24, Z
    4a72:	83 32       	cpi	r24, 0x23	; 35
    4a74:	31 f7       	brne	.-52     	; 0x4a42 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	28 2f       	mov	r18, r24
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a80:	fc 01       	movw	r30, r24
    4a82:	e2 0f       	add	r30, r18
    4a84:	f3 1f       	adc	r31, r19
    4a86:	10 82       	st	Z, r1


}
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	cf 91       	pop	r28
    4a90:	df 91       	pop	r29
    4a92:	1f 91       	pop	r17
    4a94:	0f 91       	pop	r16
    4a96:	08 95       	ret

00004a98 <__udivmodsi4>:
    4a98:	a1 e2       	ldi	r26, 0x21	; 33
    4a9a:	1a 2e       	mov	r1, r26
    4a9c:	aa 1b       	sub	r26, r26
    4a9e:	bb 1b       	sub	r27, r27
    4aa0:	fd 01       	movw	r30, r26
    4aa2:	0d c0       	rjmp	.+26     	; 0x4abe <__udivmodsi4_ep>

00004aa4 <__udivmodsi4_loop>:
    4aa4:	aa 1f       	adc	r26, r26
    4aa6:	bb 1f       	adc	r27, r27
    4aa8:	ee 1f       	adc	r30, r30
    4aaa:	ff 1f       	adc	r31, r31
    4aac:	a2 17       	cp	r26, r18
    4aae:	b3 07       	cpc	r27, r19
    4ab0:	e4 07       	cpc	r30, r20
    4ab2:	f5 07       	cpc	r31, r21
    4ab4:	20 f0       	brcs	.+8      	; 0x4abe <__udivmodsi4_ep>
    4ab6:	a2 1b       	sub	r26, r18
    4ab8:	b3 0b       	sbc	r27, r19
    4aba:	e4 0b       	sbc	r30, r20
    4abc:	f5 0b       	sbc	r31, r21

00004abe <__udivmodsi4_ep>:
    4abe:	66 1f       	adc	r22, r22
    4ac0:	77 1f       	adc	r23, r23
    4ac2:	88 1f       	adc	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	1a 94       	dec	r1
    4ac8:	69 f7       	brne	.-38     	; 0x4aa4 <__udivmodsi4_loop>
    4aca:	60 95       	com	r22
    4acc:	70 95       	com	r23
    4ace:	80 95       	com	r24
    4ad0:	90 95       	com	r25
    4ad2:	9b 01       	movw	r18, r22
    4ad4:	ac 01       	movw	r20, r24
    4ad6:	bd 01       	movw	r22, r26
    4ad8:	cf 01       	movw	r24, r30
    4ada:	08 95       	ret

00004adc <__prologue_saves__>:
    4adc:	2f 92       	push	r2
    4ade:	3f 92       	push	r3
    4ae0:	4f 92       	push	r4
    4ae2:	5f 92       	push	r5
    4ae4:	6f 92       	push	r6
    4ae6:	7f 92       	push	r7
    4ae8:	8f 92       	push	r8
    4aea:	9f 92       	push	r9
    4aec:	af 92       	push	r10
    4aee:	bf 92       	push	r11
    4af0:	cf 92       	push	r12
    4af2:	df 92       	push	r13
    4af4:	ef 92       	push	r14
    4af6:	ff 92       	push	r15
    4af8:	0f 93       	push	r16
    4afa:	1f 93       	push	r17
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	cd b7       	in	r28, 0x3d	; 61
    4b02:	de b7       	in	r29, 0x3e	; 62
    4b04:	ca 1b       	sub	r28, r26
    4b06:	db 0b       	sbc	r29, r27
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	09 94       	ijmp

00004b14 <__epilogue_restores__>:
    4b14:	2a 88       	ldd	r2, Y+18	; 0x12
    4b16:	39 88       	ldd	r3, Y+17	; 0x11
    4b18:	48 88       	ldd	r4, Y+16	; 0x10
    4b1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b20:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b22:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b24:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b26:	b9 84       	ldd	r11, Y+9	; 0x09
    4b28:	c8 84       	ldd	r12, Y+8	; 0x08
    4b2a:	df 80       	ldd	r13, Y+7	; 0x07
    4b2c:	ee 80       	ldd	r14, Y+6	; 0x06
    4b2e:	fd 80       	ldd	r15, Y+5	; 0x05
    4b30:	0c 81       	ldd	r16, Y+4	; 0x04
    4b32:	1b 81       	ldd	r17, Y+3	; 0x03
    4b34:	aa 81       	ldd	r26, Y+2	; 0x02
    4b36:	b9 81       	ldd	r27, Y+1	; 0x01
    4b38:	ce 0f       	add	r28, r30
    4b3a:	d1 1d       	adc	r29, r1
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	de bf       	out	0x3e, r29	; 62
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	cd bf       	out	0x3d, r28	; 61
    4b46:	ed 01       	movw	r28, r26
    4b48:	08 95       	ret

00004b4a <itoa>:
    4b4a:	fb 01       	movw	r30, r22
    4b4c:	9f 01       	movw	r18, r30
    4b4e:	e8 94       	clt
    4b50:	42 30       	cpi	r20, 0x02	; 2
    4b52:	c4 f0       	brlt	.+48     	; 0x4b84 <itoa+0x3a>
    4b54:	45 32       	cpi	r20, 0x25	; 37
    4b56:	b4 f4       	brge	.+44     	; 0x4b84 <itoa+0x3a>
    4b58:	4a 30       	cpi	r20, 0x0A	; 10
    4b5a:	29 f4       	brne	.+10     	; 0x4b66 <itoa+0x1c>
    4b5c:	97 fb       	bst	r25, 7
    4b5e:	1e f4       	brtc	.+6      	; 0x4b66 <itoa+0x1c>
    4b60:	90 95       	com	r25
    4b62:	81 95       	neg	r24
    4b64:	9f 4f       	sbci	r25, 0xFF	; 255
    4b66:	64 2f       	mov	r22, r20
    4b68:	77 27       	eor	r23, r23
    4b6a:	0e 94 d6 25 	call	0x4bac	; 0x4bac <__udivmodhi4>
    4b6e:	80 5d       	subi	r24, 0xD0	; 208
    4b70:	8a 33       	cpi	r24, 0x3A	; 58
    4b72:	0c f0       	brlt	.+2      	; 0x4b76 <itoa+0x2c>
    4b74:	89 5d       	subi	r24, 0xD9	; 217
    4b76:	81 93       	st	Z+, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	00 97       	sbiw	r24, 0x00	; 0
    4b7c:	a1 f7       	brne	.-24     	; 0x4b66 <itoa+0x1c>
    4b7e:	16 f4       	brtc	.+4      	; 0x4b84 <itoa+0x3a>
    4b80:	5d e2       	ldi	r21, 0x2D	; 45
    4b82:	51 93       	st	Z+, r21
    4b84:	10 82       	st	Z, r1
    4b86:	c9 01       	movw	r24, r18
    4b88:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <strrev>

00004b8c <strrev>:
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	fc 01       	movw	r30, r24
    4b90:	67 2f       	mov	r22, r23
    4b92:	71 91       	ld	r23, Z+
    4b94:	77 23       	and	r23, r23
    4b96:	e1 f7       	brne	.-8      	; 0x4b90 <strrev+0x4>
    4b98:	32 97       	sbiw	r30, 0x02	; 2
    4b9a:	04 c0       	rjmp	.+8      	; 0x4ba4 <strrev+0x18>
    4b9c:	7c 91       	ld	r23, X
    4b9e:	6d 93       	st	X+, r22
    4ba0:	70 83       	st	Z, r23
    4ba2:	62 91       	ld	r22, -Z
    4ba4:	ae 17       	cp	r26, r30
    4ba6:	bf 07       	cpc	r27, r31
    4ba8:	c8 f3       	brcs	.-14     	; 0x4b9c <strrev+0x10>
    4baa:	08 95       	ret

00004bac <__udivmodhi4>:
    4bac:	aa 1b       	sub	r26, r26
    4bae:	bb 1b       	sub	r27, r27
    4bb0:	51 e1       	ldi	r21, 0x11	; 17
    4bb2:	07 c0       	rjmp	.+14     	; 0x4bc2 <__udivmodhi4_ep>

00004bb4 <__udivmodhi4_loop>:
    4bb4:	aa 1f       	adc	r26, r26
    4bb6:	bb 1f       	adc	r27, r27
    4bb8:	a6 17       	cp	r26, r22
    4bba:	b7 07       	cpc	r27, r23
    4bbc:	10 f0       	brcs	.+4      	; 0x4bc2 <__udivmodhi4_ep>
    4bbe:	a6 1b       	sub	r26, r22
    4bc0:	b7 0b       	sbc	r27, r23

00004bc2 <__udivmodhi4_ep>:
    4bc2:	88 1f       	adc	r24, r24
    4bc4:	99 1f       	adc	r25, r25
    4bc6:	5a 95       	dec	r21
    4bc8:	a9 f7       	brne	.-22     	; 0x4bb4 <__udivmodhi4_loop>
    4bca:	80 95       	com	r24
    4bcc:	90 95       	com	r25
    4bce:	bc 01       	movw	r22, r24
    4bd0:	cd 01       	movw	r24, r26
    4bd2:	08 95       	ret

00004bd4 <_exit>:
    4bd4:	f8 94       	cli

00004bd6 <__stop_program>:
    4bd6:	ff cf       	rjmp	.-2      	; 0x4bd6 <__stop_program>
