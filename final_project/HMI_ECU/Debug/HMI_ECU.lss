
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000048e0  00004974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000fe  008000fe  00004a12  2**0
                  ALLOC
  3 .stab         00003774  00000000  00000000  00004a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fc  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000094c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b27d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cf18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 db 05 	call	0xbb6	; 0xbb6 <main>
      8a:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <tickk>:
 */

/**********************/
 uint16  g_tick = 0;
void tickk(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 fe 00 	lds	r24, 0x00FE
     b52:	90 91 ff 00 	lds	r25, 0x00FF
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 ff 00 	sts	0x00FF, r25
     b5c:	80 93 fe 00 	sts	0x00FE, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <delay>:

void delay (uint16 time)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <delay+0x6>
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	89 83       	std	Y+1, r24	; 0x01
	SREG |=(1<<7);
     b76:	af e5       	ldi	r26, 0x5F	; 95
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ef e5       	ldi	r30, 0x5F	; 95
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	8c 93       	st	X, r24

	while(g_tick != time);
     b84:	20 91 fe 00 	lds	r18, 0x00FE
     b88:	30 91 ff 00 	lds	r19, 0x00FF
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	b9 f7       	brne	.-18     	; 0xb84 <delay+0x1e>
	g_tick = 0;
     b96:	10 92 ff 00 	sts	0x00FF, r1
     b9a:	10 92 fe 00 	sts	0x00FE, r1

	SREG &= !(1<<7);
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	ef e5       	ldi	r30, 0x5F	; 95
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	10 82       	st	Z, r1


}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <main>:
/**************************/



int main(void)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	c0 55       	subi	r28, 0x50	; 80
     bc4:	d1 40       	sbci	r29, 0x01	; 1
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61

	/******************/


		Timer1_ConfigType timer_Config = {0 , 7813 ,clkI_1024 , CTC};
     bd0:	ce 01       	movw	r24, r28
     bd2:	8b 5d       	subi	r24, 0xDB	; 219
     bd4:	9e 4f       	sbci	r25, 0xFE	; 254
     bd6:	c9 5b       	subi	r28, 0xB9	; 185
     bd8:	de 4f       	sbci	r29, 0xFE	; 254
     bda:	99 83       	std	Y+1, r25	; 0x01
     bdc:	88 83       	st	Y, r24
     bde:	c7 54       	subi	r28, 0x47	; 71
     be0:	d1 40       	sbci	r29, 0x01	; 1
     be2:	87 ef       	ldi	r24, 0xF7	; 247
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	c7 5b       	subi	r28, 0xB7	; 183
     be8:	de 4f       	sbci	r29, 0xFE	; 254
     bea:	99 83       	std	Y+1, r25	; 0x01
     bec:	88 83       	st	Y, r24
     bee:	c9 54       	subi	r28, 0x49	; 73
     bf0:	d1 40       	sbci	r29, 0x01	; 1
     bf2:	96 e0       	ldi	r25, 0x06	; 6
     bf4:	c5 5b       	subi	r28, 0xB5	; 181
     bf6:	de 4f       	sbci	r29, 0xFE	; 254
     bf8:	98 83       	st	Y, r25
     bfa:	cb 54       	subi	r28, 0x4B	; 75
     bfc:	d1 40       	sbci	r29, 0x01	; 1
     bfe:	c7 5b       	subi	r28, 0xB7	; 183
     c00:	de 4f       	sbci	r29, 0xFE	; 254
     c02:	a8 81       	ld	r26, Y
     c04:	b9 81       	ldd	r27, Y+1	; 0x01
     c06:	c9 54       	subi	r28, 0x49	; 73
     c08:	d1 40       	sbci	r29, 0x01	; 1
     c0a:	0c 90       	ld	r0, X
     c0c:	c7 5b       	subi	r28, 0xB7	; 183
     c0e:	de 4f       	sbci	r29, 0xFE	; 254
     c10:	e8 81       	ld	r30, Y
     c12:	f9 81       	ldd	r31, Y+1	; 0x01
     c14:	c9 54       	subi	r28, 0x49	; 73
     c16:	d1 40       	sbci	r29, 0x01	; 1
     c18:	31 96       	adiw	r30, 0x01	; 1
     c1a:	c7 5b       	subi	r28, 0xB7	; 183
     c1c:	de 4f       	sbci	r29, 0xFE	; 254
     c1e:	f9 83       	std	Y+1, r31	; 0x01
     c20:	e8 83       	st	Y, r30
     c22:	c9 54       	subi	r28, 0x49	; 73
     c24:	d1 40       	sbci	r29, 0x01	; 1
     c26:	c9 5b       	subi	r28, 0xB9	; 185
     c28:	de 4f       	sbci	r29, 0xFE	; 254
     c2a:	a8 81       	ld	r26, Y
     c2c:	b9 81       	ldd	r27, Y+1	; 0x01
     c2e:	c7 54       	subi	r28, 0x47	; 71
     c30:	d1 40       	sbci	r29, 0x01	; 1
     c32:	0c 92       	st	X, r0
     c34:	c9 5b       	subi	r28, 0xB9	; 185
     c36:	de 4f       	sbci	r29, 0xFE	; 254
     c38:	e8 81       	ld	r30, Y
     c3a:	f9 81       	ldd	r31, Y+1	; 0x01
     c3c:	c7 54       	subi	r28, 0x47	; 71
     c3e:	d1 40       	sbci	r29, 0x01	; 1
     c40:	31 96       	adiw	r30, 0x01	; 1
     c42:	c9 5b       	subi	r28, 0xB9	; 185
     c44:	de 4f       	sbci	r29, 0xFE	; 254
     c46:	f9 83       	std	Y+1, r31	; 0x01
     c48:	e8 83       	st	Y, r30
     c4a:	c7 54       	subi	r28, 0x47	; 71
     c4c:	d1 40       	sbci	r29, 0x01	; 1
     c4e:	c5 5b       	subi	r28, 0xB5	; 181
     c50:	de 4f       	sbci	r29, 0xFE	; 254
     c52:	f8 81       	ld	r31, Y
     c54:	cb 54       	subi	r28, 0x4B	; 75
     c56:	d1 40       	sbci	r29, 0x01	; 1
     c58:	f1 50       	subi	r31, 0x01	; 1
     c5a:	c5 5b       	subi	r28, 0xB5	; 181
     c5c:	de 4f       	sbci	r29, 0xFE	; 254
     c5e:	f8 83       	st	Y, r31
     c60:	cb 54       	subi	r28, 0x4B	; 75
     c62:	d1 40       	sbci	r29, 0x01	; 1
     c64:	c5 5b       	subi	r28, 0xB5	; 181
     c66:	de 4f       	sbci	r29, 0xFE	; 254
     c68:	88 81       	ld	r24, Y
     c6a:	cb 54       	subi	r28, 0x4B	; 75
     c6c:	d1 40       	sbci	r29, 0x01	; 1
     c6e:	88 23       	and	r24, r24
     c70:	31 f6       	brne	.-116    	; 0xbfe <main+0x48>
		Timer1_init(&timer_Config);
     c72:	ce 01       	movw	r24, r28
     c74:	8b 5d       	subi	r24, 0xDB	; 219
     c76:	9e 4f       	sbci	r25, 0xFE	; 254
     c78:	0e 94 26 22 	call	0x444c	; 0x444c <Timer1_init>
		Timer1_setCallBack(tickk);
     c7c:	83 ea       	ldi	r24, 0xA3	; 163
     c7e:	95 e0       	ldi	r25, 0x05	; 5
     c80:	0e 94 80 22 	call	0x4500	; 0x4500 <Timer1_setCallBack>
		/*******************/

	uint8 data,condition  ;
	USART_ConfigType uart_config = {asynch , disabled ,one_bit ,eight_bit ,9600};
     c84:	ce 01       	movw	r24, r28
     c86:	85 5d       	subi	r24, 0xD5	; 213
     c88:	9e 4f       	sbci	r25, 0xFE	; 254
     c8a:	c4 5b       	subi	r28, 0xB4	; 180
     c8c:	de 4f       	sbci	r29, 0xFE	; 254
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	88 83       	st	Y, r24
     c92:	cc 54       	subi	r28, 0x4C	; 76
     c94:	d1 40       	sbci	r29, 0x01	; 1
     c96:	af ee       	ldi	r26, 0xEF	; 239
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	c2 5b       	subi	r28, 0xB2	; 178
     c9c:	de 4f       	sbci	r29, 0xFE	; 254
     c9e:	b9 83       	std	Y+1, r27	; 0x01
     ca0:	a8 83       	st	Y, r26
     ca2:	ce 54       	subi	r28, 0x4E	; 78
     ca4:	d1 40       	sbci	r29, 0x01	; 1
     ca6:	b8 e0       	ldi	r27, 0x08	; 8
     ca8:	c0 5b       	subi	r28, 0xB0	; 176
     caa:	de 4f       	sbci	r29, 0xFE	; 254
     cac:	b8 83       	st	Y, r27
     cae:	c0 55       	subi	r28, 0x50	; 80
     cb0:	d1 40       	sbci	r29, 0x01	; 1
     cb2:	c2 5b       	subi	r28, 0xB2	; 178
     cb4:	de 4f       	sbci	r29, 0xFE	; 254
     cb6:	e8 81       	ld	r30, Y
     cb8:	f9 81       	ldd	r31, Y+1	; 0x01
     cba:	ce 54       	subi	r28, 0x4E	; 78
     cbc:	d1 40       	sbci	r29, 0x01	; 1
     cbe:	00 80       	ld	r0, Z
     cc0:	c2 5b       	subi	r28, 0xB2	; 178
     cc2:	de 4f       	sbci	r29, 0xFE	; 254
     cc4:	88 81       	ld	r24, Y
     cc6:	99 81       	ldd	r25, Y+1	; 0x01
     cc8:	ce 54       	subi	r28, 0x4E	; 78
     cca:	d1 40       	sbci	r29, 0x01	; 1
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	c2 5b       	subi	r28, 0xB2	; 178
     cd0:	de 4f       	sbci	r29, 0xFE	; 254
     cd2:	99 83       	std	Y+1, r25	; 0x01
     cd4:	88 83       	st	Y, r24
     cd6:	ce 54       	subi	r28, 0x4E	; 78
     cd8:	d1 40       	sbci	r29, 0x01	; 1
     cda:	c4 5b       	subi	r28, 0xB4	; 180
     cdc:	de 4f       	sbci	r29, 0xFE	; 254
     cde:	a8 81       	ld	r26, Y
     ce0:	b9 81       	ldd	r27, Y+1	; 0x01
     ce2:	cc 54       	subi	r28, 0x4C	; 76
     ce4:	d1 40       	sbci	r29, 0x01	; 1
     ce6:	0c 92       	st	X, r0
     ce8:	c4 5b       	subi	r28, 0xB4	; 180
     cea:	de 4f       	sbci	r29, 0xFE	; 254
     cec:	e8 81       	ld	r30, Y
     cee:	f9 81       	ldd	r31, Y+1	; 0x01
     cf0:	cc 54       	subi	r28, 0x4C	; 76
     cf2:	d1 40       	sbci	r29, 0x01	; 1
     cf4:	31 96       	adiw	r30, 0x01	; 1
     cf6:	c4 5b       	subi	r28, 0xB4	; 180
     cf8:	de 4f       	sbci	r29, 0xFE	; 254
     cfa:	f9 83       	std	Y+1, r31	; 0x01
     cfc:	e8 83       	st	Y, r30
     cfe:	cc 54       	subi	r28, 0x4C	; 76
     d00:	d1 40       	sbci	r29, 0x01	; 1
     d02:	c0 5b       	subi	r28, 0xB0	; 176
     d04:	de 4f       	sbci	r29, 0xFE	; 254
     d06:	f8 81       	ld	r31, Y
     d08:	c0 55       	subi	r28, 0x50	; 80
     d0a:	d1 40       	sbci	r29, 0x01	; 1
     d0c:	f1 50       	subi	r31, 0x01	; 1
     d0e:	c0 5b       	subi	r28, 0xB0	; 176
     d10:	de 4f       	sbci	r29, 0xFE	; 254
     d12:	f8 83       	st	Y, r31
     d14:	c0 55       	subi	r28, 0x50	; 80
     d16:	d1 40       	sbci	r29, 0x01	; 1
     d18:	c0 5b       	subi	r28, 0xB0	; 176
     d1a:	de 4f       	sbci	r29, 0xFE	; 254
     d1c:	88 81       	ld	r24, Y
     d1e:	c0 55       	subi	r28, 0x50	; 80
     d20:	d1 40       	sbci	r29, 0x01	; 1
     d22:	88 23       	and	r24, r24
     d24:	31 f6       	brne	.-116    	; 0xcb2 <main+0xfc>
	LCD_init();
     d26:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_init>

	UART_init(&uart_config);
     d2a:	ce 01       	movw	r24, r28
     d2c:	85 5d       	subi	r24, 0xD5	; 213
     d2e:	9e 4f       	sbci	r25, 0xFE	; 254
     d30:	0e 94 92 22 	call	0x4524	; 0x4524 <UART_init>
	LCD_displayString("plz enter pass :");
     d34:	80 e6       	ldi	r24, 0x60	; 96
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
	int pass1[5]={0};
     d3c:	ce 01       	movw	r24, r28
     d3e:	8d 5c       	subi	r24, 0xCD	; 205
     d40:	9e 4f       	sbci	r25, 0xFE	; 254
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	fc 01       	movw	r30, r24
     d46:	df 01       	movw	r26, r30
     d48:	82 2f       	mov	r24, r18
     d4a:	1d 92       	st	X+, r1
     d4c:	8a 95       	dec	r24
     d4e:	e9 f7       	brne	.-6      	; 0xd4a <main+0x194>
	int pass1_confirm[5]={0};
     d50:	ce 01       	movw	r24, r28
     d52:	83 5c       	subi	r24, 0xC3	; 195
     d54:	9e 4f       	sbci	r25, 0xFE	; 254
     d56:	2a e0       	ldi	r18, 0x0A	; 10
     d58:	fc 01       	movw	r30, r24
     d5a:	df 01       	movw	r26, r30
     d5c:	82 2f       	mov	r24, r18
     d5e:	1d 92       	st	X+, r1
     d60:	8a 95       	dec	r24
     d62:	e9 f7       	brne	.-6      	; 0xd5e <main+0x1a8>
	int i,pass_check=0 ;
     d64:	fe 01       	movw	r30, r28
     d66:	e1 5e       	subi	r30, 0xE1	; 225
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	11 82       	std	Z+1, r1	; 0x01
     d6c:	10 82       	st	Z, r1
	int door_pass=0 , change_pass =0 ;
     d6e:	fe 01       	movw	r30, r28
     d70:	e3 5e       	subi	r30, 0xE3	; 227
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	11 82       	std	Z+1, r1	; 0x01
     d76:	10 82       	st	Z, r1
     d78:	fe 01       	movw	r30, r28
     d7a:	e5 5e       	subi	r30, 0xE5	; 229
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	11 82       	std	Z+1, r1	; 0x01
     d80:	10 82       	st	Z, r1
	int error=0; /* for error*/
     d82:	fe 01       	movw	r30, r28
     d84:	e7 5e       	subi	r30, 0xE7	; 231
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
     d8c:	65 c6       	rjmp	.+3274   	; 0x1a58 <main+0xea2>

		/******************************** FIRST OPTION TO SET PASSWORD********************************************/

		while(pass_check == 0)
		{
			UART_sendByte('*');  /*set password*/
     d8e:	8a e2       	ldi	r24, 0x2A	; 42
     d90:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
     d94:	fe 01       	movw	r30, r28
     d96:	ef 5d       	subi	r30, 0xDF	; 223
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	11 82       	std	Z+1, r1	; 0x01
     d9c:	10 82       	st	Z, r1
     d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <main+0x220>
			{

				pass1[i] = 0;
     da0:	fe 01       	movw	r30, r28
     da2:	ef 5d       	subi	r30, 0xDF	; 223
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	9e 01       	movw	r18, r28
     dac:	2d 5c       	subi	r18, 0xCD	; 205
     dae:	3e 4f       	sbci	r19, 0xFE	; 254
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	f9 01       	movw	r30, r18
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	11 82       	std	Z+1, r1	; 0x01
     dbc:	10 82       	st	Z, r1

		while(pass_check == 0)
		{
			UART_sendByte('*');  /*set password*/
			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
     dbe:	de 01       	movw	r26, r28
     dc0:	af 5d       	subi	r26, 0xDF	; 223
     dc2:	be 4f       	sbci	r27, 0xFE	; 254
     dc4:	fe 01       	movw	r30, r28
     dc6:	ef 5d       	subi	r30, 0xDF	; 223
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	8e 93       	st	-X, r24
     dd6:	fe 01       	movw	r30, r28
     dd8:	ef 5d       	subi	r30, 0xDF	; 223
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	85 30       	cpi	r24, 0x05	; 5
     de2:	91 05       	cpc	r25, r1
     de4:	ec f2       	brlt	.-70     	; 0xda0 <main+0x1ea>
			{

				pass1[i] = 0;

			}
			i=0;
     de6:	fe 01       	movw	r30, r28
     de8:	ef 5d       	subi	r30, 0xDF	; 223
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	11 82       	std	Z+1, r1	; 0x01
     dee:	10 82       	st	Z, r1
			//UART_sendByte('*');  /*set password*/

			LCD_clearScreen();
     df0:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>

			LCD_displayString("plz enter pass :");
     df4:	80 e6       	ldi	r24, 0x60	; 96
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
     dfc:	fe 01       	movw	r30, r28
     dfe:	eb 5e       	subi	r30, 0xEB	; 235
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a6 e1       	ldi	r26, 0x16	; 22
     e08:	b4 e4       	ldi	r27, 0x44	; 68
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	8e 01       	movw	r16, r28
     e14:	0f 5e       	subi	r16, 0xEF	; 239
     e16:	1e 4f       	sbci	r17, 0xFE	; 254
     e18:	fe 01       	movw	r30, r28
     e1a:	eb 5e       	subi	r30, 0xEB	; 235
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	4a ef       	ldi	r20, 0xFA	; 250
     e2c:	54 e4       	ldi	r21, 0x44	; 68
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	f8 01       	movw	r30, r16
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e40:	fe 01       	movw	r30, r28
     e42:	ef 5e       	subi	r30, 0xEF	; 239
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	44 f4       	brge	.+16     	; 0xe6e <main+0x2b8>
		__ticks = 1;
     e5e:	fe 01       	movw	r30, r28
     e60:	e1 5f       	subi	r30, 0xF1	; 241
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	64 c0       	rjmp	.+200    	; 0xf36 <main+0x380>
	else if (__tmp > 65535)
     e6e:	fe 01       	movw	r30, r28
     e70:	ef 5e       	subi	r30, 0xEF	; 239
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e88:	18 16       	cp	r1, r24
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <main+0x2d8>
     e8c:	43 c0       	rjmp	.+134    	; 0xf14 <main+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	fe 01       	movw	r30, r28
     e90:	eb 5e       	subi	r30, 0xEB	; 235
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8e 01       	movw	r16, r28
     eae:	01 5f       	subi	r16, 0xF1	; 241
     eb0:	1e 4f       	sbci	r17, 0xFE	; 254
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
     ec4:	1f c0       	rjmp	.+62     	; 0xf04 <main+0x34e>
     ec6:	fe 01       	movw	r30, r28
     ec8:	e3 5f       	subi	r30, 0xF3	; 243
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed4:	fe 01       	movw	r30, r28
     ed6:	e3 5f       	subi	r30, 0xF3	; 243
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <main+0x328>
     ee2:	fe 01       	movw	r30, r28
     ee4:	e3 5f       	subi	r30, 0xF3	; 243
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	de 01       	movw	r26, r28
     eee:	a1 5f       	subi	r26, 0xF1	; 241
     ef0:	be 4f       	sbci	r27, 0xFE	; 254
     ef2:	fe 01       	movw	r30, r28
     ef4:	e1 5f       	subi	r30, 0xF1	; 241
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	9c 93       	st	X, r25
     f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	fe 01       	movw	r30, r28
     f06:	e1 5f       	subi	r30, 0xF1	; 241
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	d1 f6       	brne	.-76     	; 0xec6 <main+0x310>
     f12:	27 c0       	rjmp	.+78     	; 0xf62 <main+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	8e 01       	movw	r16, r28
     f16:	01 5f       	subi	r16, 0xF1	; 241
     f18:	1e 4f       	sbci	r17, 0xFE	; 254
     f1a:	fe 01       	movw	r30, r28
     f1c:	ef 5e       	subi	r30, 0xEF	; 239
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	f8 01       	movw	r30, r16
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
     f36:	de 01       	movw	r26, r28
     f38:	a5 5f       	subi	r26, 0xF5	; 245
     f3a:	be 4f       	sbci	r27, 0xFE	; 254
     f3c:	fe 01       	movw	r30, r28
     f3e:	e1 5f       	subi	r30, 0xF1	; 241
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	8d 93       	st	X+, r24
     f48:	9c 93       	st	X, r25
     f4a:	fe 01       	movw	r30, r28
     f4c:	e5 5f       	subi	r30, 0xF5	; 245
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x39e>
     f58:	fe 01       	movw	r30, r28
     f5a:	e5 5f       	subi	r30, 0xF5	; 245
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24

			_delay_ms(600);


			data = KEYPAD_getPressedKey();
     f62:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
     f66:	fe 01       	movw	r30, r28
     f68:	ec 5d       	subi	r30, 0xDC	; 220
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	80 83       	st	Z, r24
     f6e:	64 c2       	rjmp	.+1224   	; 0x1438 <main+0x882>


			/*first time enter pass of size 5 and display and store it in array*/
			while(data != '=')
			{
				if (i==5)
     f70:	fe 01       	movw	r30, r28
     f72:	ef 5d       	subi	r30, 0xDF	; 223
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <main+0x3cc>
     f80:	a1 c1       	rjmp	.+834    	; 0x12c4 <main+0x70e>
				{
					/* do nothing*/
				}

				else if (data != '=')
     f82:	fe 01       	movw	r30, r28
     f84:	ec 5d       	subi	r30, 0xDC	; 220
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 81       	ld	r24, Z
     f8a:	8d 33       	cpi	r24, 0x3D	; 61
     f8c:	09 f4       	brne	.+2      	; 0xf90 <main+0x3da>
     f8e:	9a c1       	rjmp	.+820    	; 0x12c4 <main+0x70e>
				{
					LCD_intgerToString(data);
     f90:	fe 01       	movw	r30, r28
     f92:	ec 5d       	subi	r30, 0xDC	; 220
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	80 81       	ld	r24, Z
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 93 21 	call	0x4326	; 0x4326 <LCD_intgerToString>
					LCD_moveCursor(1,i);
     fa0:	fe 01       	movw	r30, r28
     fa2:	ef 5d       	subi	r30, 0xDF	; 223
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	90 81       	ld	r25, Z
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	69 2f       	mov	r22, r25
     fac:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
     fb0:	fe 01       	movw	r30, r28
     fb2:	e9 5f       	subi	r30, 0xF9	; 249
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	aa e7       	ldi	r26, 0x7A	; 122
     fbc:	b3 e4       	ldi	r27, 0x43	; 67
     fbe:	80 83       	st	Z, r24
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	a2 83       	std	Z+2, r26	; 0x02
     fc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	8e 01       	movw	r16, r28
     fc8:	0d 5f       	subi	r16, 0xFD	; 253
     fca:	1e 4f       	sbci	r17, 0xFE	; 254
     fcc:	fe 01       	movw	r30, r28
     fce:	e9 5f       	subi	r30, 0xF9	; 249
     fd0:	fe 4f       	sbci	r31, 0xFE	; 254
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	4a ef       	ldi	r20, 0xFA	; 250
     fe0:	54 e4       	ldi	r21, 0x44	; 68
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	f8 01       	movw	r30, r16
     fec:	80 83       	st	Z, r24
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	a2 83       	std	Z+2, r26	; 0x02
     ff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ff4:	fe 01       	movw	r30, r28
     ff6:	ed 5f       	subi	r30, 0xFD	; 253
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	44 f4       	brge	.+16     	; 0x1022 <main+0x46c>
		__ticks = 1;
    1012:	fe 01       	movw	r30, r28
    1014:	ef 5f       	subi	r30, 0xFF	; 255
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
    1020:	64 c0       	rjmp	.+200    	; 0x10ea <main+0x534>
	else if (__tmp > 65535)
    1022:	fe 01       	movw	r30, r28
    1024:	ed 5f       	subi	r30, 0xFD	; 253
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	0c f0       	brlt	.+2      	; 0x1042 <main+0x48c>
    1040:	43 c0       	rjmp	.+134    	; 0x10c8 <main+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1042:	fe 01       	movw	r30, r28
    1044:	e9 5f       	subi	r30, 0xF9	; 249
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8e 01       	movw	r16, r28
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1e 4f       	sbci	r17, 0xFE	; 254
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	f8 01       	movw	r30, r16
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
    1078:	1f c0       	rjmp	.+62     	; 0x10b8 <main+0x502>
    107a:	fe 01       	movw	r30, r28
    107c:	e1 50       	subi	r30, 0x01	; 1
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	88 ec       	ldi	r24, 0xC8	; 200
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	80 83       	st	Z, r24
    1088:	fe 01       	movw	r30, r28
    108a:	e1 50       	subi	r30, 0x01	; 1
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <main+0x4dc>
    1096:	fe 01       	movw	r30, r28
    1098:	e1 50       	subi	r30, 0x01	; 1
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a0:	de 01       	movw	r26, r28
    10a2:	af 5f       	subi	r26, 0xFF	; 255
    10a4:	be 4f       	sbci	r27, 0xFE	; 254
    10a6:	fe 01       	movw	r30, r28
    10a8:	ef 5f       	subi	r30, 0xFF	; 255
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	11 96       	adiw	r26, 0x01	; 1
    10b4:	9c 93       	st	X, r25
    10b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	fe 01       	movw	r30, r28
    10ba:	ef 5f       	subi	r30, 0xFF	; 255
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	d1 f6       	brne	.-76     	; 0x107a <main+0x4c4>
    10c6:	27 c0       	rjmp	.+78     	; 0x1116 <main+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c8:	8e 01       	movw	r16, r28
    10ca:	0f 5f       	subi	r16, 0xFF	; 255
    10cc:	1e 4f       	sbci	r17, 0xFE	; 254
    10ce:	fe 01       	movw	r30, r28
    10d0:	ed 5f       	subi	r30, 0xFD	; 253
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	f8 01       	movw	r30, r16
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
    10ea:	de 01       	movw	r26, r28
    10ec:	a3 50       	subi	r26, 0x03	; 3
    10ee:	bf 4f       	sbci	r27, 0xFF	; 255
    10f0:	fe 01       	movw	r30, r28
    10f2:	ef 5f       	subi	r30, 0xFF	; 255
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	8d 93       	st	X+, r24
    10fc:	9c 93       	st	X, r25
    10fe:	fe 01       	movw	r30, r28
    1100:	e3 50       	subi	r30, 0x03	; 3
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <main+0x552>
    110c:	fe 01       	movw	r30, r28
    110e:	e3 50       	subi	r30, 0x03	; 3
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
					_delay_ms(250);
					LCD_displayCharacter('*');
    1116:	8a e2       	ldi	r24, 0x2A	; 42
    1118:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <LCD_displayCharacter>
					pass1[i] = data;
    111c:	fe 01       	movw	r30, r28
    111e:	ef 5d       	subi	r30, 0xDF	; 223
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	fe 01       	movw	r30, r28
    1128:	ec 5d       	subi	r30, 0xDC	; 220
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	9e 01       	movw	r18, r28
    1134:	2d 5c       	subi	r18, 0xCD	; 205
    1136:	3e 4f       	sbci	r19, 0xFE	; 254
    1138:	cb 01       	movw	r24, r22
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	f9 01       	movw	r30, r18
    1140:	e8 0f       	add	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	51 83       	std	Z+1, r21	; 0x01
    1146:	40 83       	st	Z, r20
    1148:	fe 01       	movw	r30, r28
    114a:	e7 50       	subi	r30, 0x07	; 7
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a6 e1       	ldi	r26, 0x16	; 22
    1154:	b4 e4       	ldi	r27, 0x44	; 68
    1156:	80 83       	st	Z, r24
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	a2 83       	std	Z+2, r26	; 0x02
    115c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115e:	8e 01       	movw	r16, r28
    1160:	0b 50       	subi	r16, 0x0B	; 11
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	fe 01       	movw	r30, r28
    1166:	e7 50       	subi	r30, 0x07	; 7
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a ef       	ldi	r20, 0xFA	; 250
    1178:	54 e4       	ldi	r21, 0x44	; 68
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	f8 01       	movw	r30, r16
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    118c:	fe 01       	movw	r30, r28
    118e:	eb 50       	subi	r30, 0x0B	; 11
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	44 f4       	brge	.+16     	; 0x11ba <main+0x604>
		__ticks = 1;
    11aa:	fe 01       	movw	r30, r28
    11ac:	ed 50       	subi	r30, 0x0D	; 13
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	64 c0       	rjmp	.+200    	; 0x1282 <main+0x6cc>
	else if (__tmp > 65535)
    11ba:	fe 01       	movw	r30, r28
    11bc:	eb 50       	subi	r30, 0x0B	; 11
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	57 e4       	ldi	r21, 0x47	; 71
    11d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	0c f0       	brlt	.+2      	; 0x11da <main+0x624>
    11d8:	43 c0       	rjmp	.+134    	; 0x1260 <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	fe 01       	movw	r30, r28
    11dc:	e7 50       	subi	r30, 0x07	; 7
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8e 01       	movw	r16, r28
    11fa:	0d 50       	subi	r16, 0x0D	; 13
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
    1210:	1f c0       	rjmp	.+62     	; 0x1250 <main+0x69a>
    1212:	fe 01       	movw	r30, r28
    1214:	ef 50       	subi	r30, 0x0F	; 15
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    1220:	fe 01       	movw	r30, r28
    1222:	ef 50       	subi	r30, 0x0F	; 15
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <main+0x674>
    122e:	fe 01       	movw	r30, r28
    1230:	ef 50       	subi	r30, 0x0F	; 15
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	de 01       	movw	r26, r28
    123a:	ad 50       	subi	r26, 0x0D	; 13
    123c:	bf 4f       	sbci	r27, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	ed 50       	subi	r30, 0x0D	; 13
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	fe 01       	movw	r30, r28
    1252:	ed 50       	subi	r30, 0x0D	; 13
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	d1 f6       	brne	.-76     	; 0x1212 <main+0x65c>
    125e:	27 c0       	rjmp	.+78     	; 0x12ae <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	8e 01       	movw	r16, r28
    1262:	0d 50       	subi	r16, 0x0D	; 13
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	eb 50       	subi	r30, 0x0B	; 11
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	f8 01       	movw	r30, r16
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
    1282:	de 01       	movw	r26, r28
    1284:	a1 51       	subi	r26, 0x11	; 17
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	ed 50       	subi	r30, 0x0D	; 13
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	8d 93       	st	X+, r24
    1294:	9c 93       	st	X, r25
    1296:	fe 01       	movw	r30, r28
    1298:	e1 51       	subi	r30, 0x11	; 17
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <main+0x6ea>
    12a4:	fe 01       	movw	r30, r28
    12a6:	e1 51       	subi	r30, 0x11	; 17
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	80 83       	st	Z, r24
					_delay_ms(600);
					i++;
    12ae:	de 01       	movw	r26, r28
    12b0:	af 5d       	subi	r26, 0xDF	; 223
    12b2:	be 4f       	sbci	r27, 0xFE	; 254
    12b4:	fe 01       	movw	r30, r28
    12b6:	ef 5d       	subi	r30, 0xDF	; 223
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	8d 93       	st	X+, r24
    12c2:	9c 93       	st	X, r25
				}
				data = KEYPAD_getPressedKey();
    12c4:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ec 5d       	subi	r30, 0xDC	; 220
    12cc:	fe 4f       	sbci	r31, 0xFE	; 254
    12ce:	80 83       	st	Z, r24
    12d0:	fe 01       	movw	r30, r28
    12d2:	e5 51       	subi	r30, 0x15	; 21
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a6 e1       	ldi	r26, 0x16	; 22
    12dc:	b4 e4       	ldi	r27, 0x44	; 68
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	8e 01       	movw	r16, r28
    12e8:	09 51       	subi	r16, 0x19	; 25
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	fe 01       	movw	r30, r28
    12ee:	e5 51       	subi	r30, 0x15	; 21
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a ef       	ldi	r20, 0xFA	; 250
    1300:	54 e4       	ldi	r21, 0x44	; 68
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	f8 01       	movw	r30, r16
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1314:	fe 01       	movw	r30, r28
    1316:	e9 51       	subi	r30, 0x19	; 25
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	44 f4       	brge	.+16     	; 0x1342 <main+0x78c>
		__ticks = 1;
    1332:	fe 01       	movw	r30, r28
    1334:	eb 51       	subi	r30, 0x1B	; 27
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
    1340:	64 c0       	rjmp	.+200    	; 0x140a <main+0x854>
	else if (__tmp > 65535)
    1342:	fe 01       	movw	r30, r28
    1344:	e9 51       	subi	r30, 0x19	; 25
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	0c f0       	brlt	.+2      	; 0x1362 <main+0x7ac>
    1360:	43 c0       	rjmp	.+134    	; 0x13e8 <main+0x832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	fe 01       	movw	r30, r28
    1364:	e5 51       	subi	r30, 0x15	; 21
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8e 01       	movw	r16, r28
    1382:	0b 51       	subi	r16, 0x1B	; 27
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	f8 01       	movw	r30, r16
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
    1398:	1f c0       	rjmp	.+62     	; 0x13d8 <main+0x822>
    139a:	fe 01       	movw	r30, r28
    139c:	ed 51       	subi	r30, 0x1D	; 29
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 51       	subi	r30, 0x1D	; 29
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x7fc>
    13b6:	fe 01       	movw	r30, r28
    13b8:	ed 51       	subi	r30, 0x1D	; 29
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	de 01       	movw	r26, r28
    13c2:	ab 51       	subi	r26, 0x1B	; 27
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	eb 51       	subi	r30, 0x1B	; 27
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	fe 01       	movw	r30, r28
    13da:	eb 51       	subi	r30, 0x1B	; 27
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	d1 f6       	brne	.-76     	; 0x139a <main+0x7e4>
    13e6:	28 c0       	rjmp	.+80     	; 0x1438 <main+0x882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	8e 01       	movw	r16, r28
    13ea:	0b 51       	subi	r16, 0x1B	; 27
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	fe 01       	movw	r30, r28
    13f0:	e9 51       	subi	r30, 0x19	; 25
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	f8 01       	movw	r30, r16
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	de 01       	movw	r26, r28
    140c:	af 51       	subi	r26, 0x1F	; 31
    140e:	bf 4f       	sbci	r27, 0xFF	; 255
    1410:	fe 01       	movw	r30, r28
    1412:	eb 51       	subi	r30, 0x1B	; 27
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	9c 93       	st	X, r25
    141e:	8e 93       	st	-X, r24
    1420:	fe 01       	movw	r30, r28
    1422:	ef 51       	subi	r30, 0x1F	; 31
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <main+0x874>
    142e:	fe 01       	movw	r30, r28
    1430:	ef 51       	subi	r30, 0x1F	; 31
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
			data = KEYPAD_getPressedKey();



			/*first time enter pass of size 5 and display and store it in array*/
			while(data != '=')
    1438:	fe 01       	movw	r30, r28
    143a:	ec 5d       	subi	r30, 0xDC	; 220
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
    143e:	80 81       	ld	r24, Z
    1440:	8d 33       	cpi	r24, 0x3D	; 61
    1442:	09 f0       	breq	.+2      	; 0x1446 <main+0x890>
    1444:	95 cd       	rjmp	.-1238   	; 0xf70 <main+0x3ba>
				_delay_ms(600);
			}

			/* send pass to MC */

			for(i=0 ; i<5 ; i++)
    1446:	fe 01       	movw	r30, r28
    1448:	ef 5d       	subi	r30, 0xDF	; 223
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	11 82       	std	Z+1, r1	; 0x01
    144e:	10 82       	st	Z, r1
    1450:	1d c0       	rjmp	.+58     	; 0x148c <main+0x8d6>
			{
				UART_sendByte(pass1[i]);
    1452:	fe 01       	movw	r30, r28
    1454:	ef 5d       	subi	r30, 0xDF	; 223
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	9e 01       	movw	r18, r28
    145e:	2d 5c       	subi	r18, 0xCD	; 205
    1460:	3e 4f       	sbci	r19, 0xFE	; 254
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	f9 01       	movw	r30, r18
    1468:	e8 0f       	add	r30, r24
    146a:	f9 1f       	adc	r31, r25
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
				_delay_ms(600);
			}

			/* send pass to MC */

			for(i=0 ; i<5 ; i++)
    1474:	de 01       	movw	r26, r28
    1476:	af 5d       	subi	r26, 0xDF	; 223
    1478:	be 4f       	sbci	r27, 0xFE	; 254
    147a:	fe 01       	movw	r30, r28
    147c:	ef 5d       	subi	r30, 0xDF	; 223
    147e:	fe 4f       	sbci	r31, 0xFE	; 254
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
    148c:	fe 01       	movw	r30, r28
    148e:	ef 5d       	subi	r30, 0xDF	; 223
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	85 30       	cpi	r24, 0x05	; 5
    1498:	91 05       	cpc	r25, r1
    149a:	dc f2       	brlt	.-74     	; 0x1452 <main+0x89c>
			{
				UART_sendByte(pass1[i]);
			}

			/*RE_enter PASS*/
			LCD_clearScreen();
    149c:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
			LCD_displayString("plz re_enter pass :");
    14a0:	81 e7       	ldi	r24, 0x71	; 113
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
			LCD_moveCursor(1,0);
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>

			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
    14b0:	fe 01       	movw	r30, r28
    14b2:	ef 5d       	subi	r30, 0xDF	; 223
    14b4:	fe 4f       	sbci	r31, 0xFE	; 254
    14b6:	11 82       	std	Z+1, r1	; 0x01
    14b8:	10 82       	st	Z, r1
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <main+0x93c>
			{

				pass1[i] = 0;
    14bc:	fe 01       	movw	r30, r28
    14be:	ef 5d       	subi	r30, 0xDF	; 223
    14c0:	fe 4f       	sbci	r31, 0xFE	; 254
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	9e 01       	movw	r18, r28
    14c8:	2d 5c       	subi	r18, 0xCD	; 205
    14ca:	3e 4f       	sbci	r19, 0xFE	; 254
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	f9 01       	movw	r30, r18
    14d2:	e8 0f       	add	r30, r24
    14d4:	f9 1f       	adc	r31, r25
    14d6:	11 82       	std	Z+1, r1	; 0x01
    14d8:	10 82       	st	Z, r1
			LCD_clearScreen();
			LCD_displayString("plz re_enter pass :");
			LCD_moveCursor(1,0);

			/* Initialize arrays*/
			for(i=0 ; i<5 ; i++)
    14da:	de 01       	movw	r26, r28
    14dc:	af 5d       	subi	r26, 0xDF	; 223
    14de:	be 4f       	sbci	r27, 0xFE	; 254
    14e0:	fe 01       	movw	r30, r28
    14e2:	ef 5d       	subi	r30, 0xDF	; 223
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	9c 93       	st	X, r25
    14f0:	8e 93       	st	-X, r24
    14f2:	fe 01       	movw	r30, r28
    14f4:	ef 5d       	subi	r30, 0xDF	; 223
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	85 30       	cpi	r24, 0x05	; 5
    14fe:	91 05       	cpc	r25, r1
    1500:	ec f2       	brlt	.-70     	; 0x14bc <main+0x906>
			{

				pass1[i] = 0;

			}
			i=0;
    1502:	fe 01       	movw	r30, r28
    1504:	ef 5d       	subi	r30, 0xDF	; 223
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	11 82       	std	Z+1, r1	; 0x01
    150a:	10 82       	st	Z, r1
			data = KEYPAD_getPressedKey();
    150c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    1510:	fe 01       	movw	r30, r28
    1512:	ec 5d       	subi	r30, 0xDC	; 220
    1514:	fe 4f       	sbci	r31, 0xFE	; 254
    1516:	80 83       	st	Z, r24
    1518:	64 c2       	rjmp	.+1224   	; 0x19e2 <main+0xe2c>


			/*re_enter Password */
			while(data != '=')
			{
				if (i==5)
    151a:	fe 01       	movw	r30, r28
    151c:	ef 5d       	subi	r30, 0xDF	; 223
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	85 30       	cpi	r24, 0x05	; 5
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <main+0x976>
    152a:	a1 c1       	rjmp	.+834    	; 0x186e <main+0xcb8>
				{
					/* do nothinf*/
				}

				else if (data != '=')
    152c:	fe 01       	movw	r30, r28
    152e:	ec 5d       	subi	r30, 0xDC	; 220
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	80 81       	ld	r24, Z
    1534:	8d 33       	cpi	r24, 0x3D	; 61
    1536:	09 f4       	brne	.+2      	; 0x153a <main+0x984>
    1538:	9a c1       	rjmp	.+820    	; 0x186e <main+0xcb8>
				{
					LCD_intgerToString(data);
    153a:	fe 01       	movw	r30, r28
    153c:	ec 5d       	subi	r30, 0xDC	; 220
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 93 21 	call	0x4326	; 0x4326 <LCD_intgerToString>
					LCD_moveCursor(1,i);
    154a:	fe 01       	movw	r30, r28
    154c:	ef 5d       	subi	r30, 0xDF	; 223
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	90 81       	ld	r25, Z
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	69 2f       	mov	r22, r25
    1556:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
    155a:	fe 01       	movw	r30, r28
    155c:	e3 52       	subi	r30, 0x23	; 35
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	aa e7       	ldi	r26, 0x7A	; 122
    1566:	b3 e4       	ldi	r27, 0x43	; 67
    1568:	80 83       	st	Z, r24
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	a2 83       	std	Z+2, r26	; 0x02
    156e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	8e 01       	movw	r16, r28
    1572:	07 52       	subi	r16, 0x27	; 39
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	fe 01       	movw	r30, r28
    1578:	e3 52       	subi	r30, 0x23	; 35
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	f8 01       	movw	r30, r16
    1596:	80 83       	st	Z, r24
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	a2 83       	std	Z+2, r26	; 0x02
    159c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    159e:	fe 01       	movw	r30, r28
    15a0:	e7 52       	subi	r30, 0x27	; 39
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	44 f4       	brge	.+16     	; 0x15cc <main+0xa16>
		__ticks = 1;
    15bc:	fe 01       	movw	r30, r28
    15be:	e9 52       	subi	r30, 0x29	; 41
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	91 83       	std	Z+1, r25	; 0x01
    15c8:	80 83       	st	Z, r24
    15ca:	64 c0       	rjmp	.+200    	; 0x1694 <main+0xade>
	else if (__tmp > 65535)
    15cc:	fe 01       	movw	r30, r28
    15ce:	e7 52       	subi	r30, 0x27	; 39
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	0c f0       	brlt	.+2      	; 0x15ec <main+0xa36>
    15ea:	43 c0       	rjmp	.+134    	; 0x1672 <main+0xabc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	fe 01       	movw	r30, r28
    15ee:	e3 52       	subi	r30, 0x23	; 35
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8e 01       	movw	r16, r28
    160c:	09 52       	subi	r16, 0x29	; 41
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	f8 01       	movw	r30, r16
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	80 83       	st	Z, r24
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <main+0xaac>
    1624:	fe 01       	movw	r30, r28
    1626:	eb 52       	subi	r30, 0x2B	; 43
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	80 83       	st	Z, r24
    1632:	fe 01       	movw	r30, r28
    1634:	eb 52       	subi	r30, 0x2B	; 43
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <main+0xa86>
    1640:	fe 01       	movw	r30, r28
    1642:	eb 52       	subi	r30, 0x2B	; 43
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164a:	de 01       	movw	r26, r28
    164c:	a9 52       	subi	r26, 0x29	; 41
    164e:	bf 4f       	sbci	r27, 0xFF	; 255
    1650:	fe 01       	movw	r30, r28
    1652:	e9 52       	subi	r30, 0x29	; 41
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	11 96       	adiw	r26, 0x01	; 1
    165e:	9c 93       	st	X, r25
    1660:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	fe 01       	movw	r30, r28
    1664:	e9 52       	subi	r30, 0x29	; 41
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	d1 f6       	brne	.-76     	; 0x1624 <main+0xa6e>
    1670:	27 c0       	rjmp	.+78     	; 0x16c0 <main+0xb0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	8e 01       	movw	r16, r28
    1674:	09 52       	subi	r16, 0x29	; 41
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	fe 01       	movw	r30, r28
    167a:	e7 52       	subi	r30, 0x27	; 39
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	f8 01       	movw	r30, r16
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	de 01       	movw	r26, r28
    1696:	ad 52       	subi	r26, 0x2D	; 45
    1698:	bf 4f       	sbci	r27, 0xFF	; 255
    169a:	fe 01       	movw	r30, r28
    169c:	e9 52       	subi	r30, 0x29	; 41
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	8d 93       	st	X+, r24
    16a6:	9c 93       	st	X, r25
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 52       	subi	r30, 0x2D	; 45
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <main+0xafc>
    16b6:	fe 01       	movw	r30, r28
    16b8:	ed 52       	subi	r30, 0x2D	; 45
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
					_delay_ms(250);
					LCD_displayCharacter('*');
    16c0:	8a e2       	ldi	r24, 0x2A	; 42
    16c2:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <LCD_displayCharacter>
					pass1[i] = data;
    16c6:	fe 01       	movw	r30, r28
    16c8:	ef 5d       	subi	r30, 0xDF	; 223
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	fe 01       	movw	r30, r28
    16d2:	ec 5d       	subi	r30, 0xDC	; 220
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	9e 01       	movw	r18, r28
    16de:	2d 5c       	subi	r18, 0xCD	; 205
    16e0:	3e 4f       	sbci	r19, 0xFE	; 254
    16e2:	cb 01       	movw	r24, r22
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	f9 01       	movw	r30, r18
    16ea:	e8 0f       	add	r30, r24
    16ec:	f9 1f       	adc	r31, r25
    16ee:	51 83       	std	Z+1, r21	; 0x01
    16f0:	40 83       	st	Z, r20
    16f2:	fe 01       	movw	r30, r28
    16f4:	e1 53       	subi	r30, 0x31	; 49
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a6 e1       	ldi	r26, 0x16	; 22
    16fe:	b4 e4       	ldi	r27, 0x44	; 68
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	8e 01       	movw	r16, r28
    170a:	05 53       	subi	r16, 0x35	; 53
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e1 53       	subi	r30, 0x31	; 49
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1736:	fe 01       	movw	r30, r28
    1738:	e5 53       	subi	r30, 0x35	; 53
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	44 f4       	brge	.+16     	; 0x1764 <main+0xbae>
		__ticks = 1;
    1754:	fe 01       	movw	r30, r28
    1756:	e7 53       	subi	r30, 0x37	; 55
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	64 c0       	rjmp	.+200    	; 0x182c <main+0xc76>
	else if (__tmp > 65535)
    1764:	fe 01       	movw	r30, r28
    1766:	e5 53       	subi	r30, 0x35	; 53
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <main+0xbce>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <main+0xc54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	fe 01       	movw	r30, r28
    1786:	e1 53       	subi	r30, 0x31	; 49
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8e 01       	movw	r16, r28
    17a4:	07 53       	subi	r16, 0x37	; 55
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <main+0xc44>
    17bc:	fe 01       	movw	r30, r28
    17be:	e9 53       	subi	r30, 0x39	; 57
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	fe 01       	movw	r30, r28
    17cc:	e9 53       	subi	r30, 0x39	; 57
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <main+0xc1e>
    17d8:	fe 01       	movw	r30, r28
    17da:	e9 53       	subi	r30, 0x39	; 57
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	de 01       	movw	r26, r28
    17e4:	a7 53       	subi	r26, 0x37	; 55
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	e7 53       	subi	r30, 0x37	; 55
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	fe 01       	movw	r30, r28
    17fc:	e7 53       	subi	r30, 0x37	; 55
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	d1 f6       	brne	.-76     	; 0x17bc <main+0xc06>
    1808:	27 c0       	rjmp	.+78     	; 0x1858 <main+0xca2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	8e 01       	movw	r16, r28
    180c:	07 53       	subi	r16, 0x37	; 55
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e5 53       	subi	r30, 0x35	; 53
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	de 01       	movw	r26, r28
    182e:	ab 53       	subi	r26, 0x3B	; 59
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	e7 53       	subi	r30, 0x37	; 55
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	8d 93       	st	X+, r24
    183e:	9c 93       	st	X, r25
    1840:	fe 01       	movw	r30, r28
    1842:	eb 53       	subi	r30, 0x3B	; 59
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <main+0xc94>
    184e:	fe 01       	movw	r30, r28
    1850:	eb 53       	subi	r30, 0x3B	; 59
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
					_delay_ms(600);
					i++;
    1858:	de 01       	movw	r26, r28
    185a:	af 5d       	subi	r26, 0xDF	; 223
    185c:	be 4f       	sbci	r27, 0xFE	; 254
    185e:	fe 01       	movw	r30, r28
    1860:	ef 5d       	subi	r30, 0xDF	; 223
    1862:	fe 4f       	sbci	r31, 0xFE	; 254
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	8d 93       	st	X+, r24
    186c:	9c 93       	st	X, r25
				}
				data = KEYPAD_getPressedKey();
    186e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    1872:	fe 01       	movw	r30, r28
    1874:	ec 5d       	subi	r30, 0xDC	; 220
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	80 83       	st	Z, r24
    187a:	fe 01       	movw	r30, r28
    187c:	ef 53       	subi	r30, 0x3F	; 63
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a6 e1       	ldi	r26, 0x16	; 22
    1886:	b4 e4       	ldi	r27, 0x44	; 68
    1888:	80 83       	st	Z, r24
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	a2 83       	std	Z+2, r26	; 0x02
    188e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	8e 01       	movw	r16, r28
    1892:	03 54       	subi	r16, 0x43	; 67
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	ef 53       	subi	r30, 0x3F	; 63
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a ef       	ldi	r20, 0xFA	; 250
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	80 83       	st	Z, r24
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	a2 83       	std	Z+2, r26	; 0x02
    18bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18be:	fe 01       	movw	r30, r28
    18c0:	e3 54       	subi	r30, 0x43	; 67
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	44 f4       	brge	.+16     	; 0x18ec <main+0xd36>
		__ticks = 1;
    18dc:	fe 01       	movw	r30, r28
    18de:	e5 54       	subi	r30, 0x45	; 69
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	64 c0       	rjmp	.+200    	; 0x19b4 <main+0xdfe>
	else if (__tmp > 65535)
    18ec:	fe 01       	movw	r30, r28
    18ee:	e3 54       	subi	r30, 0x43	; 67
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	0c f0       	brlt	.+2      	; 0x190c <main+0xd56>
    190a:	43 c0       	rjmp	.+134    	; 0x1992 <main+0xddc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	fe 01       	movw	r30, r28
    190e:	ef 53       	subi	r30, 0x3F	; 63
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8e 01       	movw	r16, r28
    192c:	05 54       	subi	r16, 0x45	; 69
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	f8 01       	movw	r30, r16
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <main+0xdcc>
    1944:	fe 01       	movw	r30, r28
    1946:	e7 54       	subi	r30, 0x47	; 71
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	88 ec       	ldi	r24, 0xC8	; 200
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	fe 01       	movw	r30, r28
    1954:	e7 54       	subi	r30, 0x47	; 71
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <main+0xda6>
    1960:	fe 01       	movw	r30, r28
    1962:	e7 54       	subi	r30, 0x47	; 71
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	de 01       	movw	r26, r28
    196c:	a5 54       	subi	r26, 0x45	; 69
    196e:	bf 4f       	sbci	r27, 0xFF	; 255
    1970:	fe 01       	movw	r30, r28
    1972:	e5 54       	subi	r30, 0x45	; 69
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	fe 01       	movw	r30, r28
    1984:	e5 54       	subi	r30, 0x45	; 69
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	d1 f6       	brne	.-76     	; 0x1944 <main+0xd8e>
    1990:	28 c0       	rjmp	.+80     	; 0x19e2 <main+0xe2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	8e 01       	movw	r16, r28
    1994:	05 54       	subi	r16, 0x45	; 69
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	fe 01       	movw	r30, r28
    199a:	e3 54       	subi	r30, 0x43	; 67
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	f8 01       	movw	r30, r16
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	de 01       	movw	r26, r28
    19b6:	a9 54       	subi	r26, 0x49	; 73
    19b8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 54       	subi	r30, 0x45	; 69
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	9c 93       	st	X, r25
    19c8:	8e 93       	st	-X, r24
    19ca:	fe 01       	movw	r30, r28
    19cc:	e9 54       	subi	r30, 0x49	; 73
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0xe1e>
    19d8:	fe 01       	movw	r30, r28
    19da:	e9 54       	subi	r30, 0x49	; 73
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
			data = KEYPAD_getPressedKey();



			/*re_enter Password */
			while(data != '=')
    19e2:	fe 01       	movw	r30, r28
    19e4:	ec 5d       	subi	r30, 0xDC	; 220
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	80 81       	ld	r24, Z
    19ea:	8d 33       	cpi	r24, 0x3D	; 61
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <main+0xe3a>
    19ee:	95 cd       	rjmp	.-1238   	; 0x151a <main+0x964>
			}

			//_delay_ms(600);

			/*send re_pass TO MC*/
			for(i=0 ; i<5 ; i++)
    19f0:	fe 01       	movw	r30, r28
    19f2:	ef 5d       	subi	r30, 0xDF	; 223
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	11 82       	std	Z+1, r1	; 0x01
    19f8:	10 82       	st	Z, r1
    19fa:	1d c0       	rjmp	.+58     	; 0x1a36 <main+0xe80>
			{
				UART_sendByte(pass1[i]);
    19fc:	fe 01       	movw	r30, r28
    19fe:	ef 5d       	subi	r30, 0xDF	; 223
    1a00:	fe 4f       	sbci	r31, 0xFE	; 254
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	9e 01       	movw	r18, r28
    1a08:	2d 5c       	subi	r18, 0xCD	; 205
    1a0a:	3e 4f       	sbci	r19, 0xFE	; 254
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	f9 01       	movw	r30, r18
    1a12:	e8 0f       	add	r30, r24
    1a14:	f9 1f       	adc	r31, r25
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
			}

			//_delay_ms(600);

			/*send re_pass TO MC*/
			for(i=0 ; i<5 ; i++)
    1a1e:	de 01       	movw	r26, r28
    1a20:	af 5d       	subi	r26, 0xDF	; 223
    1a22:	be 4f       	sbci	r27, 0xFE	; 254
    1a24:	fe 01       	movw	r30, r28
    1a26:	ef 5d       	subi	r30, 0xDF	; 223
    1a28:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	11 96       	adiw	r26, 0x01	; 1
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
    1a36:	fe 01       	movw	r30, r28
    1a38:	ef 5d       	subi	r30, 0xDF	; 223
    1a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	85 30       	cpi	r24, 0x05	; 5
    1a42:	91 05       	cpc	r25, r1
    1a44:	dc f2       	brlt	.-74     	; 0x19fc <main+0xe46>
			{
				UART_sendByte(pass1[i]);
			}

			pass_check =UART_recieveByte();  /* result of password checking*/
    1a46:	0e 94 53 23 	call	0x46a6	; 0x46a6 <UART_recieveByte>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e1 5e       	subi	r30, 0xE1	; 225
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
	{


		/******************************** FIRST OPTION TO SET PASSWORD********************************************/

		while(pass_check == 0)
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e1 5e       	subi	r30, 0xE1	; 225
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <main+0xeb2>
    1a66:	93 c9       	rjmp	.-3290   	; 0xd8e <main+0x1d8>
    1a68:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <main+0x2278>
		}
		/******************************** MAIN OPTIONS********************************************/

		while(pass_check == 1)
		{
			LCD_moveCursor(0,0);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>

			LCD_clearScreen();
    1a74:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
			LCD_displayString("+ : open door");
    1a78:	85 e8       	ldi	r24, 0x85	; 133
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
			LCD_moveCursor(1,0);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
			LCD_displayString("- : change pass");
    1a88:	83 e9       	ldi	r24, 0x93	; 147
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
    1a90:	fe 01       	movw	r30, r28
    1a92:	ed 54       	subi	r30, 0x4D	; 77
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a6 e1       	ldi	r26, 0x16	; 22
    1a9c:	b4 e4       	ldi	r27, 0x44	; 68
    1a9e:	80 83       	st	Z, r24
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	a2 83       	std	Z+2, r26	; 0x02
    1aa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	01 55       	subi	r16, 0x51	; 81
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 54       	subi	r30, 0x4D	; 77
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	f8 01       	movw	r30, r16
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e1 55       	subi	r30, 0x51	; 81
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	44 f4       	brge	.+16     	; 0x1b02 <main+0xf4c>
		__ticks = 1;
    1af2:	fe 01       	movw	r30, r28
    1af4:	e3 55       	subi	r30, 0x53	; 83
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    1b00:	64 c0       	rjmp	.+200    	; 0x1bca <main+0x1014>
	else if (__tmp > 65535)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e1 55       	subi	r30, 0x51	; 81
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <main+0xf6c>
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <main+0xff2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	fe 01       	movw	r30, r28
    1b24:	ed 54       	subi	r30, 0x4D	; 77
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	60 81       	ld	r22, Z
    1b2a:	71 81       	ldd	r23, Z+1	; 0x01
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8e 01       	movw	r16, r28
    1b42:	03 55       	subi	r16, 0x53	; 83
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	f8 01       	movw	r30, r16
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
    1b58:	1f c0       	rjmp	.+62     	; 0x1b98 <main+0xfe2>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e5 55       	subi	r30, 0x55	; 85
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	80 83       	st	Z, r24
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e5 55       	subi	r30, 0x55	; 85
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <main+0xfbc>
    1b76:	fe 01       	movw	r30, r28
    1b78:	e5 55       	subi	r30, 0x55	; 85
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	de 01       	movw	r26, r28
    1b82:	a3 55       	subi	r26, 0x53	; 83
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e3 55       	subi	r30, 0x53	; 83
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	9c 93       	st	X, r25
    1b96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e3 55       	subi	r30, 0x53	; 83
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	d1 f6       	brne	.-76     	; 0x1b5a <main+0xfa4>
    1ba6:	27 c0       	rjmp	.+78     	; 0x1bf6 <main+0x1040>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	8e 01       	movw	r16, r28
    1baa:	03 55       	subi	r16, 0x53	; 83
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e1 55       	subi	r30, 0x51	; 81
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	de 01       	movw	r26, r28
    1bcc:	a7 55       	subi	r26, 0x57	; 87
    1bce:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e3 55       	subi	r30, 0x53	; 83
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	8d 93       	st	X+, r24
    1bdc:	9c 93       	st	X, r25
    1bde:	fe 01       	movw	r30, r28
    1be0:	e7 55       	subi	r30, 0x57	; 87
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <main+0x1032>
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 55       	subi	r30, 0x57	; 87
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
			_delay_ms(600);
			condition = KEYPAD_getPressedKey();
    1bf6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ed 5d       	subi	r30, 0xDD	; 221
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	80 83       	st	Z, r24


			/************open door CASE********************/

			if(condition == '+' )
    1c02:	fe 01       	movw	r30, r28
    1c04:	ed 5d       	subi	r30, 0xDD	; 221
    1c06:	fe 4f       	sbci	r31, 0xFE	; 254
    1c08:	80 81       	ld	r24, Z
    1c0a:	8b 32       	cpi	r24, 0x2B	; 43
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <main+0x105a>
    1c0e:	ae c4       	rjmp	.+2396   	; 0x256c <main+0x19b6>
    1c10:	96 c4       	rjmp	.+2348   	; 0x253e <main+0x1988>
			{
				while(door_pass == 0)
				{
					UART_sendByte('#');  /*door code send to MC*/
    1c12:	83 e2       	ldi	r24, 0x23	; 35
    1c14:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
					LCD_clearScreen();
    1c18:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
					LCD_displayString("enter password");
    1c1c:	83 ea       	ldi	r24, 0xA3	; 163
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
    1c24:	fe 01       	movw	r30, r28
    1c26:	eb 55       	subi	r30, 0x5B	; 91
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a6 e1       	ldi	r26, 0x16	; 22
    1c30:	b4 e4       	ldi	r27, 0x44	; 68
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	0f 55       	subi	r16, 0x5F	; 95
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	eb 55       	subi	r30, 0x5B	; 91
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a ef       	ldi	r20, 0xFA	; 250
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ef 55       	subi	r30, 0x5F	; 95
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	44 f4       	brge	.+16     	; 0x1c96 <main+0x10e0>
		__ticks = 1;
    1c86:	fe 01       	movw	r30, r28
    1c88:	e1 56       	subi	r30, 0x61	; 97
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	64 c0       	rjmp	.+200    	; 0x1d5e <main+0x11a8>
	else if (__tmp > 65535)
    1c96:	fe 01       	movw	r30, r28
    1c98:	ef 55       	subi	r30, 0x5F	; 95
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <main+0x1100>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <main+0x1186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	eb 55       	subi	r30, 0x5B	; 91
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	01 56       	subi	r16, 0x61	; 97
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <main+0x1176>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e3 56       	subi	r30, 0x63	; 99
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e3 56       	subi	r30, 0x63	; 99
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <main+0x1150>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e3 56       	subi	r30, 0x63	; 99
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	de 01       	movw	r26, r28
    1d16:	a1 56       	subi	r26, 0x61	; 97
    1d18:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e1 56       	subi	r30, 0x61	; 97
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	11 96       	adiw	r26, 0x01	; 1
    1d28:	9c 93       	st	X, r25
    1d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e1 56       	subi	r30, 0x61	; 97
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	d1 f6       	brne	.-76     	; 0x1cee <main+0x1138>
    1d3a:	27 c0       	rjmp	.+78     	; 0x1d8a <main+0x11d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	01 56       	subi	r16, 0x61	; 97
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	ef 55       	subi	r30, 0x5F	; 95
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	f8 01       	movw	r30, r16
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
    1d5e:	de 01       	movw	r26, r28
    1d60:	a5 56       	subi	r26, 0x65	; 101
    1d62:	bf 4f       	sbci	r27, 0xFF	; 255
    1d64:	fe 01       	movw	r30, r28
    1d66:	e1 56       	subi	r30, 0x61	; 97
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	8d 93       	st	X+, r24
    1d70:	9c 93       	st	X, r25
    1d72:	fe 01       	movw	r30, r28
    1d74:	e5 56       	subi	r30, 0x65	; 101
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <main+0x11c6>
    1d80:	fe 01       	movw	r30, r28
    1d82:	e5 56       	subi	r30, 0x65	; 101
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
    1d8a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ec 5d       	subi	r30, 0xDC	; 220
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	80 83       	st	Z, r24
					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    1d96:	fe 01       	movw	r30, r28
    1d98:	ef 5d       	subi	r30, 0xDF	; 223
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	11 82       	std	Z+1, r1	; 0x01
    1d9e:	10 82       	st	Z, r1
    1da0:	1b c0       	rjmp	.+54     	; 0x1dd8 <main+0x1222>
					{

						pass1[i] = 0;
    1da2:	fe 01       	movw	r30, r28
    1da4:	ef 5d       	subi	r30, 0xDF	; 223
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	9e 01       	movw	r18, r28
    1dae:	2d 5c       	subi	r18, 0xCD	; 205
    1db0:	3e 4f       	sbci	r19, 0xFE	; 254
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	f9 01       	movw	r30, r18
    1db8:	e8 0f       	add	r30, r24
    1dba:	f9 1f       	adc	r31, r25
    1dbc:	11 82       	std	Z+1, r1	; 0x01
    1dbe:	10 82       	st	Z, r1
					LCD_clearScreen();
					LCD_displayString("enter password");
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    1dc0:	de 01       	movw	r26, r28
    1dc2:	af 5d       	subi	r26, 0xDF	; 223
    1dc4:	be 4f       	sbci	r27, 0xFE	; 254
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ef 5d       	subi	r30, 0xDF	; 223
    1dca:	fe 4f       	sbci	r31, 0xFE	; 254
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	11 96       	adiw	r26, 0x01	; 1
    1dd4:	9c 93       	st	X, r25
    1dd6:	8e 93       	st	-X, r24
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ef 5d       	subi	r30, 0xDF	; 223
    1ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	85 30       	cpi	r24, 0x05	; 5
    1de4:	91 05       	cpc	r25, r1
    1de6:	ec f2       	brlt	.-70     	; 0x1da2 <main+0x11ec>
					{

						pass1[i] = 0;

					}
					i=0;
    1de8:	fe 01       	movw	r30, r28
    1dea:	ef 5d       	subi	r30, 0xDF	; 223
    1dec:	fe 4f       	sbci	r31, 0xFE	; 254
    1dee:	11 82       	std	Z+1, r1	; 0x01
    1df0:	10 82       	st	Z, r1
    1df2:	6c c2       	rjmp	.+1240   	; 0x22cc <main+0x1716>
					//LCD_moveCursor(1,i);
					while(data != '=')
					{
						if (i==5)
    1df4:	fe 01       	movw	r30, r28
    1df6:	ef 5d       	subi	r30, 0xDF	; 223
    1df8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	85 30       	cpi	r24, 0x05	; 5
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <main+0x1250>
    1e04:	a9 c1       	rjmp	.+850    	; 0x2158 <main+0x15a2>
						{
							/* do nothinf*/
						}

						else if (data != '=')
    1e06:	fe 01       	movw	r30, r28
    1e08:	ec 5d       	subi	r30, 0xDC	; 220
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8d 33       	cpi	r24, 0x3D	; 61
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <main+0x125e>
    1e12:	a2 c1       	rjmp	.+836    	; 0x2158 <main+0x15a2>
						{
							LCD_moveCursor(1,i);
    1e14:	fe 01       	movw	r30, r28
    1e16:	ef 5d       	subi	r30, 0xDF	; 223
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	90 81       	ld	r25, Z
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
							LCD_intgerToString(data);
    1e24:	fe 01       	movw	r30, r28
    1e26:	ec 5d       	subi	r30, 0xDC	; 220
    1e28:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 93 21 	call	0x4326	; 0x4326 <LCD_intgerToString>
							LCD_moveCursor(1,i);
    1e34:	fe 01       	movw	r30, r28
    1e36:	ef 5d       	subi	r30, 0xDF	; 223
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	90 81       	ld	r25, Z
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	69 2f       	mov	r22, r25
    1e40:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e9 56       	subi	r30, 0x69	; 105
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	aa e7       	ldi	r26, 0x7A	; 122
    1e50:	b3 e4       	ldi	r27, 0x43	; 67
    1e52:	80 83       	st	Z, r24
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	a2 83       	std	Z+2, r26	; 0x02
    1e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	0d 56       	subi	r16, 0x6D	; 109
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 56       	subi	r30, 0x69	; 105
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 83       	st	Z, r24
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	a2 83       	std	Z+2, r26	; 0x02
    1e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ed 56       	subi	r30, 0x6D	; 109
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	44 f4       	brge	.+16     	; 0x1eb6 <main+0x1300>
		__ticks = 1;
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ef 56       	subi	r30, 0x6F	; 111
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	64 c0       	rjmp	.+200    	; 0x1f7e <main+0x13c8>
	else if (__tmp > 65535)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 56       	subi	r30, 0x6D	; 109
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	0c f0       	brlt	.+2      	; 0x1ed6 <main+0x1320>
    1ed4:	43 c0       	rjmp	.+134    	; 0x1f5c <main+0x13a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e9 56       	subi	r30, 0x69	; 105
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	0f 56       	subi	r16, 0x6F	; 111
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	1f c0       	rjmp	.+62     	; 0x1f4c <main+0x1396>
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e1 57       	subi	r30, 0x71	; 113
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e1 57       	subi	r30, 0x71	; 113
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <main+0x1370>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e1 57       	subi	r30, 0x71	; 113
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	de 01       	movw	r26, r28
    1f36:	af 56       	subi	r26, 0x6F	; 111
    1f38:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ef 56       	subi	r30, 0x6F	; 111
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	9c 93       	st	X, r25
    1f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ef 56       	subi	r30, 0x6F	; 111
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	d1 f6       	brne	.-76     	; 0x1f0e <main+0x1358>
    1f5a:	27 c0       	rjmp	.+78     	; 0x1faa <main+0x13f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	8e 01       	movw	r16, r28
    1f5e:	0f 56       	subi	r16, 0x6F	; 111
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	fe 01       	movw	r30, r28
    1f64:	ed 56       	subi	r30, 0x6D	; 109
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	de 01       	movw	r26, r28
    1f80:	a3 57       	subi	r26, 0x73	; 115
    1f82:	bf 4f       	sbci	r27, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	ef 56       	subi	r30, 0x6F	; 111
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	8d 93       	st	X+, r24
    1f90:	9c 93       	st	X, r25
    1f92:	fe 01       	movw	r30, r28
    1f94:	e3 57       	subi	r30, 0x73	; 115
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <main+0x13e6>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e3 57       	subi	r30, 0x73	; 115
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
							_delay_ms(250);
							LCD_displayCharacter('*');
    1faa:	8a e2       	ldi	r24, 0x2A	; 42
    1fac:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <LCD_displayCharacter>
							pass1[i] = data;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ef 5d       	subi	r30, 0xDF	; 223
    1fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ec 5d       	subi	r30, 0xDC	; 220
    1fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc0:	80 81       	ld	r24, Z
    1fc2:	48 2f       	mov	r20, r24
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	9e 01       	movw	r18, r28
    1fc8:	2d 5c       	subi	r18, 0xCD	; 205
    1fca:	3e 4f       	sbci	r19, 0xFE	; 254
    1fcc:	cb 01       	movw	r24, r22
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	e8 0f       	add	r30, r24
    1fd6:	f9 1f       	adc	r31, r25
    1fd8:	51 83       	std	Z+1, r21	; 0x01
    1fda:	40 83       	st	Z, r20
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e7 57       	subi	r30, 0x77	; 119
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a6 e1       	ldi	r26, 0x16	; 22
    1fe8:	b4 e4       	ldi	r27, 0x44	; 68
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	0b 57       	subi	r16, 0x7B	; 123
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e7 57       	subi	r30, 0x77	; 119
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2020:	fe 01       	movw	r30, r28
    2022:	eb 57       	subi	r30, 0x7B	; 123
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	44 f4       	brge	.+16     	; 0x204e <main+0x1498>
		__ticks = 1;
    203e:	fe 01       	movw	r30, r28
    2040:	ed 57       	subi	r30, 0x7D	; 125
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	64 c0       	rjmp	.+200    	; 0x2116 <main+0x1560>
	else if (__tmp > 65535)
    204e:	fe 01       	movw	r30, r28
    2050:	eb 57       	subi	r30, 0x7B	; 123
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	0c f0       	brlt	.+2      	; 0x206e <main+0x14b8>
    206c:	43 c0       	rjmp	.+134    	; 0x20f4 <main+0x153e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	fe 01       	movw	r30, r28
    2070:	e7 57       	subi	r30, 0x77	; 119
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8e 01       	movw	r16, r28
    208e:	0d 57       	subi	r16, 0x7D	; 125
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	f8 01       	movw	r30, r16
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	1f c0       	rjmp	.+62     	; 0x20e4 <main+0x152e>
    20a6:	fe 01       	movw	r30, r28
    20a8:	ef 57       	subi	r30, 0x7F	; 127
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	fe 01       	movw	r30, r28
    20b6:	ef 57       	subi	r30, 0x7F	; 127
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <main+0x1508>
    20c2:	fe 01       	movw	r30, r28
    20c4:	ef 57       	subi	r30, 0x7F	; 127
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	de 01       	movw	r26, r28
    20ce:	ad 57       	subi	r26, 0x7D	; 125
    20d0:	bf 4f       	sbci	r27, 0xFF	; 255
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 57       	subi	r30, 0x7D	; 125
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	11 96       	adiw	r26, 0x01	; 1
    20e0:	9c 93       	st	X, r25
    20e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	fe 01       	movw	r30, r28
    20e6:	ed 57       	subi	r30, 0x7D	; 125
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	d1 f6       	brne	.-76     	; 0x20a6 <main+0x14f0>
    20f2:	27 c0       	rjmp	.+78     	; 0x2142 <main+0x158c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	8e 01       	movw	r16, r28
    20f6:	0d 57       	subi	r16, 0x7D	; 125
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	eb 57       	subi	r30, 0x7B	; 123
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	f8 01       	movw	r30, r16
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
    2116:	de 01       	movw	r26, r28
    2118:	a1 58       	subi	r26, 0x81	; 129
    211a:	bf 4f       	sbci	r27, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	ed 57       	subi	r30, 0x7D	; 125
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	8d 93       	st	X+, r24
    2128:	9c 93       	st	X, r25
    212a:	fe 01       	movw	r30, r28
    212c:	e1 58       	subi	r30, 0x81	; 129
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 81       	ld	r24, Z
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <main+0x157e>
    2138:	fe 01       	movw	r30, r28
    213a:	e1 58       	subi	r30, 0x81	; 129
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
							_delay_ms(600);
							i++;
    2142:	de 01       	movw	r26, r28
    2144:	af 5d       	subi	r26, 0xDF	; 223
    2146:	be 4f       	sbci	r27, 0xFE	; 254
    2148:	fe 01       	movw	r30, r28
    214a:	ef 5d       	subi	r30, 0xDF	; 223
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	8d 93       	st	X+, r24
    2156:	9c 93       	st	X, r25
						}
						data = KEYPAD_getPressedKey();
    2158:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    215c:	fe 01       	movw	r30, r28
    215e:	ec 5d       	subi	r30, 0xDC	; 220
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	80 83       	st	Z, r24
    2164:	fe 01       	movw	r30, r28
    2166:	e5 58       	subi	r30, 0x85	; 133
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a6 e1       	ldi	r26, 0x16	; 22
    2170:	b4 e4       	ldi	r27, 0x44	; 68
    2172:	80 83       	st	Z, r24
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	a2 83       	std	Z+2, r26	; 0x02
    2178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	8e 01       	movw	r16, r28
    217c:	09 58       	subi	r16, 0x89	; 137
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e5 58       	subi	r30, 0x85	; 133
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	4a ef       	ldi	r20, 0xFA	; 250
    2194:	54 e4       	ldi	r21, 0x44	; 68
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	f8 01       	movw	r30, r16
    21a0:	80 83       	st	Z, r24
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	a2 83       	std	Z+2, r26	; 0x02
    21a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a8:	fe 01       	movw	r30, r28
    21aa:	e9 58       	subi	r30, 0x89	; 137
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	44 f4       	brge	.+16     	; 0x21d6 <main+0x1620>
		__ticks = 1;
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 58       	subi	r30, 0x8B	; 139
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	64 c0       	rjmp	.+200    	; 0x229e <main+0x16e8>
	else if (__tmp > 65535)
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 58       	subi	r30, 0x89	; 137
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	0c f0       	brlt	.+2      	; 0x21f6 <main+0x1640>
    21f4:	43 c0       	rjmp	.+134    	; 0x227c <main+0x16c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	fe 01       	movw	r30, r28
    21f8:	e5 58       	subi	r30, 0x85	; 133
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8e 01       	movw	r16, r28
    2216:	0b 58       	subi	r16, 0x8B	; 139
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	1f c0       	rjmp	.+62     	; 0x226c <main+0x16b6>
    222e:	fe 01       	movw	r30, r28
    2230:	ed 58       	subi	r30, 0x8D	; 141
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	fe 01       	movw	r30, r28
    223e:	ed 58       	subi	r30, 0x8D	; 141
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <main+0x1690>
    224a:	fe 01       	movw	r30, r28
    224c:	ed 58       	subi	r30, 0x8D	; 141
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	de 01       	movw	r26, r28
    2256:	ab 58       	subi	r26, 0x8B	; 139
    2258:	bf 4f       	sbci	r27, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	eb 58       	subi	r30, 0x8B	; 139
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	9c 93       	st	X, r25
    226a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	fe 01       	movw	r30, r28
    226e:	eb 58       	subi	r30, 0x8B	; 139
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	d1 f6       	brne	.-76     	; 0x222e <main+0x1678>
    227a:	28 c0       	rjmp	.+80     	; 0x22cc <main+0x1716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	8e 01       	movw	r16, r28
    227e:	0b 58       	subi	r16, 0x8B	; 139
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	fe 01       	movw	r30, r28
    2284:	e9 58       	subi	r30, 0x89	; 137
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	de 01       	movw	r26, r28
    22a0:	af 58       	subi	r26, 0x8F	; 143
    22a2:	bf 4f       	sbci	r27, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	eb 58       	subi	r30, 0x8B	; 139
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	9c 93       	st	X, r25
    22b2:	8e 93       	st	-X, r24
    22b4:	fe 01       	movw	r30, r28
    22b6:	ef 58       	subi	r30, 0x8F	; 143
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <main+0x1708>
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 58       	subi	r30, 0x8F	; 143
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
						pass1[i] = 0;

					}
					i=0;
					//LCD_moveCursor(1,i);
					while(data != '=')
    22cc:	fe 01       	movw	r30, r28
    22ce:	ec 5d       	subi	r30, 0xDC	; 220
    22d0:	fe 4f       	sbci	r31, 0xFE	; 254
    22d2:	80 81       	ld	r24, Z
    22d4:	8d 33       	cpi	r24, 0x3D	; 61
    22d6:	09 f0       	breq	.+2      	; 0x22da <main+0x1724>
    22d8:	8d cd       	rjmp	.-1254   	; 0x1df4 <main+0x123e>
						}
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}
					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    22da:	fe 01       	movw	r30, r28
    22dc:	ef 5d       	subi	r30, 0xDF	; 223
    22de:	fe 4f       	sbci	r31, 0xFE	; 254
    22e0:	11 82       	std	Z+1, r1	; 0x01
    22e2:	10 82       	st	Z, r1
    22e4:	1d c0       	rjmp	.+58     	; 0x2320 <main+0x176a>
					{
						UART_sendByte(pass1[i]);
    22e6:	fe 01       	movw	r30, r28
    22e8:	ef 5d       	subi	r30, 0xDF	; 223
    22ea:	fe 4f       	sbci	r31, 0xFE	; 254
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	9e 01       	movw	r18, r28
    22f2:	2d 5c       	subi	r18, 0xCD	; 205
    22f4:	3e 4f       	sbci	r19, 0xFE	; 254
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	f9 01       	movw	r30, r18
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
						}
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}
					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    2308:	de 01       	movw	r26, r28
    230a:	af 5d       	subi	r26, 0xDF	; 223
    230c:	be 4f       	sbci	r27, 0xFE	; 254
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5d       	subi	r30, 0xDF	; 223
    2312:	fe 4f       	sbci	r31, 0xFE	; 254
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	9c 93       	st	X, r25
    231e:	8e 93       	st	-X, r24
    2320:	fe 01       	movw	r30, r28
    2322:	ef 5d       	subi	r30, 0xDF	; 223
    2324:	fe 4f       	sbci	r31, 0xFE	; 254
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	85 30       	cpi	r24, 0x05	; 5
    232c:	91 05       	cpc	r25, r1
    232e:	dc f2       	brlt	.-74     	; 0x22e6 <main+0x1730>
					{
						UART_sendByte(pass1[i]);
					}
					door_pass = UART_recieveByte(); /* receive pass checking result*/
    2330:	0e 94 53 23 	call	0x46a6	; 0x46a6 <UART_recieveByte>
    2334:	fe 01       	movw	r30, r28
    2336:	e3 5e       	subi	r30, 0xE3	; 227
    2338:	fe 4f       	sbci	r31, 0xFE	; 254
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	80 83       	st	Z, r24
					if(door_pass)
    2342:	fe 01       	movw	r30, r28
    2344:	e3 5e       	subi	r30, 0xE3	; 227
    2346:	fe 4f       	sbci	r31, 0xFE	; 254
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	f1 f0       	breq	.+60     	; 0x238c <main+0x17d6>
					{
						LCD_clearScreen();
    2350:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
						LCD_displayString("door is unlocking");
    2354:	82 eb       	ldi	r24, 0xB2	; 178
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
						//_delay_ms(15000);
						delay(15);
    235c:	8f e0       	ldi	r24, 0x0F	; 15
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay>
						LCD_clearScreen();
    2364:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
						LCD_displayString("door is open");
    2368:	84 ec       	ldi	r24, 0xC4	; 196
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
						//_delay_ms(3000);
						delay(3);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay>

						LCD_clearScreen();
    2378:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
						LCD_displayString("door is Locking");
    237c:	81 ed       	ldi	r24, 0xD1	; 209
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
						//_delay_ms(15000);
						delay(15);
    2384:	8f e0       	ldi	r24, 0x0F	; 15
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay>

					/*if(door_pass)
					{

					}*/
					error++;
    238c:	de 01       	movw	r26, r28
    238e:	a7 5e       	subi	r26, 0xE7	; 231
    2390:	be 4f       	sbci	r27, 0xFE	; 254
    2392:	fe 01       	movw	r30, r28
    2394:	e7 5e       	subi	r30, 0xE7	; 231
    2396:	fe 4f       	sbci	r31, 0xFE	; 254
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
					/******in case of error send 'E' to MC******/
					if(error==3)
    23a4:	fe 01       	movw	r30, r28
    23a6:	e7 5e       	subi	r30, 0xE7	; 231
    23a8:	fe 4f       	sbci	r31, 0xFE	; 254
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	83 30       	cpi	r24, 0x03	; 3
    23b0:	91 05       	cpc	r25, r1
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <main+0x1800>
    23b4:	c4 c0       	rjmp	.+392    	; 0x253e <main+0x1988>
					{
						UART_sendByte('E');   /* send 'E' to MC*/
    23b6:	85 e4       	ldi	r24, 0x45	; 69
    23b8:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
						LCD_clearScreen();
    23bc:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
						LCD_displayString("error");
    23c0:	81 ee       	ldi	r24, 0xE1	; 225
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
						door_pass=1;
    23c8:	fe 01       	movw	r30, r28
    23ca:	e3 5e       	subi	r30, 0xE3	; 227
    23cc:	fe 4f       	sbci	r31, 0xFE	; 254
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	fe 01       	movw	r30, r28
    23d8:	e3 59       	subi	r30, 0x93	; 147
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	aa e7       	ldi	r26, 0x7A	; 122
    23e2:	b4 e4       	ldi	r27, 0x44	; 68
    23e4:	80 83       	st	Z, r24
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	a2 83       	std	Z+2, r26	; 0x02
    23ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	8e 01       	movw	r16, r28
    23ee:	07 59       	subi	r16, 0x97	; 151
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e3 59       	subi	r30, 0x93	; 147
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	f8 01       	movw	r30, r16
    2412:	80 83       	st	Z, r24
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	a2 83       	std	Z+2, r26	; 0x02
    2418:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    241a:	fe 01       	movw	r30, r28
    241c:	e7 59       	subi	r30, 0x97	; 151
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	44 f4       	brge	.+16     	; 0x2448 <main+0x1892>
		__ticks = 1;
    2438:	fe 01       	movw	r30, r28
    243a:	e9 59       	subi	r30, 0x99	; 153
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
    2446:	64 c0       	rjmp	.+200    	; 0x2510 <main+0x195a>
	else if (__tmp > 65535)
    2448:	fe 01       	movw	r30, r28
    244a:	e7 59       	subi	r30, 0x97	; 151
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	0c f0       	brlt	.+2      	; 0x2468 <main+0x18b2>
    2466:	43 c0       	rjmp	.+134    	; 0x24ee <main+0x1938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	fe 01       	movw	r30, r28
    246a:	e3 59       	subi	r30, 0x93	; 147
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8e 01       	movw	r16, r28
    2488:	09 59       	subi	r16, 0x99	; 153
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	1f c0       	rjmp	.+62     	; 0x24de <main+0x1928>
    24a0:	fe 01       	movw	r30, r28
    24a2:	eb 59       	subi	r30, 0x9B	; 155
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
    24ae:	fe 01       	movw	r30, r28
    24b0:	eb 59       	subi	r30, 0x9B	; 155
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <main+0x1902>
    24bc:	fe 01       	movw	r30, r28
    24be:	eb 59       	subi	r30, 0x9B	; 155
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	de 01       	movw	r26, r28
    24c8:	a9 59       	subi	r26, 0x99	; 153
    24ca:	bf 4f       	sbci	r27, 0xFF	; 255
    24cc:	fe 01       	movw	r30, r28
    24ce:	e9 59       	subi	r30, 0x99	; 153
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	11 96       	adiw	r26, 0x01	; 1
    24da:	9c 93       	st	X, r25
    24dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	fe 01       	movw	r30, r28
    24e0:	e9 59       	subi	r30, 0x99	; 153
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	d1 f6       	brne	.-76     	; 0x24a0 <main+0x18ea>
    24ec:	28 c0       	rjmp	.+80     	; 0x253e <main+0x1988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	8e 01       	movw	r16, r28
    24f0:	09 59       	subi	r16, 0x99	; 153
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	e7 59       	subi	r30, 0x97	; 151
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	f8 01       	movw	r30, r16
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	de 01       	movw	r26, r28
    2512:	ad 59       	subi	r26, 0x9D	; 157
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e9 59       	subi	r30, 0x99	; 153
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	9c 93       	st	X, r25
    2524:	8e 93       	st	-X, r24
    2526:	fe 01       	movw	r30, r28
    2528:	ed 59       	subi	r30, 0x9D	; 157
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <main+0x197a>
    2534:	fe 01       	movw	r30, r28
    2536:	ed 59       	subi	r30, 0x9D	; 157
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24

			/************open door CASE********************/

			if(condition == '+' )
			{
				while(door_pass == 0)
    253e:	fe 01       	movw	r30, r28
    2540:	e3 5e       	subi	r30, 0xE3	; 227
    2542:	fe 4f       	sbci	r31, 0xFE	; 254
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	09 f4       	brne	.+2      	; 0x254e <main+0x1998>
    254c:	62 cb       	rjmp	.-2364   	; 0x1c12 <main+0x105c>


				}


				door_pass = 0;  /* to go in  while loop of door_case  again*/
    254e:	fe 01       	movw	r30, r28
    2550:	e3 5e       	subi	r30, 0xE3	; 227
    2552:	fe 4f       	sbci	r31, 0xFE	; 254
    2554:	11 82       	std	Z+1, r1	; 0x01
    2556:	10 82       	st	Z, r1
				error=0;
    2558:	fe 01       	movw	r30, r28
    255a:	e7 5e       	subi	r30, 0xE7	; 231
    255c:	fe 4f       	sbci	r31, 0xFE	; 254
    255e:	11 82       	std	Z+1, r1	; 0x01
    2560:	10 82       	st	Z, r1
				condition=0;
    2562:	fe 01       	movw	r30, r28
    2564:	ed 5d       	subi	r30, 0xDD	; 221
    2566:	fe 4f       	sbci	r31, 0xFE	; 254
    2568:	10 82       	st	Z, r1
    256a:	61 c4       	rjmp	.+2242   	; 0x2e2e <main+0x2278>

			}
			/******************change_pass CASE *******************/
			else if(condition == '-' )
    256c:	fe 01       	movw	r30, r28
    256e:	ed 5d       	subi	r30, 0xDD	; 221
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
    2572:	80 81       	ld	r24, Z
    2574:	8d 32       	cpi	r24, 0x2D	; 45
    2576:	09 f0       	breq	.+2      	; 0x257a <main+0x19c4>
    2578:	5a c4       	rjmp	.+2228   	; 0x2e2e <main+0x2278>
    257a:	31 c4       	rjmp	.+2146   	; 0x2dde <main+0x2228>
				while(change_pass == 0)
				{


					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    257c:	fe 01       	movw	r30, r28
    257e:	ef 5d       	subi	r30, 0xDF	; 223
    2580:	fe 4f       	sbci	r31, 0xFE	; 254
    2582:	11 82       	std	Z+1, r1	; 0x01
    2584:	10 82       	st	Z, r1
    2586:	1b c0       	rjmp	.+54     	; 0x25be <main+0x1a08>
					{

						pass1[i] = 0;
    2588:	fe 01       	movw	r30, r28
    258a:	ef 5d       	subi	r30, 0xDF	; 223
    258c:	fe 4f       	sbci	r31, 0xFE	; 254
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	9e 01       	movw	r18, r28
    2594:	2d 5c       	subi	r18, 0xCD	; 205
    2596:	3e 4f       	sbci	r19, 0xFE	; 254
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	f9 01       	movw	r30, r18
    259e:	e8 0f       	add	r30, r24
    25a0:	f9 1f       	adc	r31, r25
    25a2:	11 82       	std	Z+1, r1	; 0x01
    25a4:	10 82       	st	Z, r1
				while(change_pass == 0)
				{


					/* Initialize arrays*/
					for(i=0 ; i<5 ; i++)
    25a6:	de 01       	movw	r26, r28
    25a8:	af 5d       	subi	r26, 0xDF	; 223
    25aa:	be 4f       	sbci	r27, 0xFE	; 254
    25ac:	fe 01       	movw	r30, r28
    25ae:	ef 5d       	subi	r30, 0xDF	; 223
    25b0:	fe 4f       	sbci	r31, 0xFE	; 254
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	9c 93       	st	X, r25
    25bc:	8e 93       	st	-X, r24
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 5d       	subi	r30, 0xDF	; 223
    25c2:	fe 4f       	sbci	r31, 0xFE	; 254
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	85 30       	cpi	r24, 0x05	; 5
    25ca:	91 05       	cpc	r25, r1
    25cc:	ec f2       	brlt	.-70     	; 0x2588 <main+0x19d2>
					{

						pass1[i] = 0;
					}

					UART_sendByte('$');  /*change_password code send to MC*/
    25ce:	84 e2       	ldi	r24, 0x24	; 36
    25d0:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
					LCD_clearScreen();
    25d4:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
					LCD_displayString("enter password");
    25d8:	83 ea       	ldi	r24, 0xA3	; 163
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
    25e0:	fe 01       	movw	r30, r28
    25e2:	e1 5a       	subi	r30, 0xA1	; 161
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a6 e1       	ldi	r26, 0x16	; 22
    25ec:	b4 e4       	ldi	r27, 0x44	; 68
    25ee:	80 83       	st	Z, r24
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	a2 83       	std	Z+2, r26	; 0x02
    25f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	8e 01       	movw	r16, r28
    25f8:	05 5a       	subi	r16, 0xA5	; 165
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	fe 01       	movw	r30, r28
    25fe:	e1 5a       	subi	r30, 0xA1	; 161
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	f8 01       	movw	r30, r16
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2624:	fe 01       	movw	r30, r28
    2626:	e5 5a       	subi	r30, 0xA5	; 165
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	44 f4       	brge	.+16     	; 0x2652 <main+0x1a9c>
		__ticks = 1;
    2642:	fe 01       	movw	r30, r28
    2644:	e7 5a       	subi	r30, 0xA7	; 167
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	64 c0       	rjmp	.+200    	; 0x271a <main+0x1b64>
	else if (__tmp > 65535)
    2652:	fe 01       	movw	r30, r28
    2654:	e5 5a       	subi	r30, 0xA5	; 165
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	0c f0       	brlt	.+2      	; 0x2672 <main+0x1abc>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <main+0x1b42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	fe 01       	movw	r30, r28
    2674:	e1 5a       	subi	r30, 0xA1	; 161
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8e 01       	movw	r16, r28
    2692:	07 5a       	subi	r16, 0xA7	; 167
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	1f c0       	rjmp	.+62     	; 0x26e8 <main+0x1b32>
    26aa:	fe 01       	movw	r30, r28
    26ac:	e9 5a       	subi	r30, 0xA9	; 169
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	88 ec       	ldi	r24, 0xC8	; 200
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 5a       	subi	r30, 0xA9	; 169
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <main+0x1b0c>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e9 5a       	subi	r30, 0xA9	; 169
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	de 01       	movw	r26, r28
    26d2:	a7 5a       	subi	r26, 0xA7	; 167
    26d4:	bf 4f       	sbci	r27, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	e7 5a       	subi	r30, 0xA7	; 167
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	9c 93       	st	X, r25
    26e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 5a       	subi	r30, 0xA7	; 167
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	d1 f6       	brne	.-76     	; 0x26aa <main+0x1af4>
    26f6:	27 c0       	rjmp	.+78     	; 0x2746 <main+0x1b90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	8e 01       	movw	r16, r28
    26fa:	07 5a       	subi	r16, 0xA7	; 167
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e5 5a       	subi	r30, 0xA5	; 165
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	f8 01       	movw	r30, r16
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	de 01       	movw	r26, r28
    271c:	ab 5a       	subi	r26, 0xAB	; 171
    271e:	bf 4f       	sbci	r27, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	e7 5a       	subi	r30, 0xA7	; 167
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	8d 93       	st	X+, r24
    272c:	9c 93       	st	X, r25
    272e:	fe 01       	movw	r30, r28
    2730:	eb 5a       	subi	r30, 0xAB	; 171
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <main+0x1b82>
    273c:	fe 01       	movw	r30, r28
    273e:	eb 5a       	subi	r30, 0xAB	; 171
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
					_delay_ms(600);
					data = KEYPAD_getPressedKey();
    2746:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    274a:	fe 01       	movw	r30, r28
    274c:	ec 5d       	subi	r30, 0xDC	; 220
    274e:	fe 4f       	sbci	r31, 0xFE	; 254
    2750:	80 83       	st	Z, r24
					/* Initialize arrays*/

					i=0;
    2752:	fe 01       	movw	r30, r28
    2754:	ef 5d       	subi	r30, 0xDF	; 223
    2756:	fe 4f       	sbci	r31, 0xFE	; 254
    2758:	11 82       	std	Z+1, r1	; 0x01
    275a:	10 82       	st	Z, r1
    275c:	fc c1       	rjmp	.+1016   	; 0x2b56 <main+0x1fa0>
					//LCD_moveCursor(1,i);
					while(data != '=')
					{
						if (i==5)
    275e:	fe 01       	movw	r30, r28
    2760:	ef 5d       	subi	r30, 0xDF	; 223
    2762:	fe 4f       	sbci	r31, 0xFE	; 254
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	85 30       	cpi	r24, 0x05	; 5
    276a:	91 05       	cpc	r25, r1
    276c:	09 f4       	brne	.+2      	; 0x2770 <main+0x1bba>
    276e:	7b c1       	rjmp	.+758    	; 0x2a66 <main+0x1eb0>
						{
							/* do nothinf*/
						}

						else if (data != '=')
    2770:	fe 01       	movw	r30, r28
    2772:	ec 5d       	subi	r30, 0xDC	; 220
    2774:	fe 4f       	sbci	r31, 0xFE	; 254
    2776:	80 81       	ld	r24, Z
    2778:	8d 33       	cpi	r24, 0x3D	; 61
    277a:	09 f4       	brne	.+2      	; 0x277e <main+0x1bc8>
    277c:	74 c1       	rjmp	.+744    	; 0x2a66 <main+0x1eb0>
						{
							LCD_moveCursor(1,i);
    277e:	fe 01       	movw	r30, r28
    2780:	ef 5d       	subi	r30, 0xDF	; 223
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	90 81       	ld	r25, Z
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	69 2f       	mov	r22, r25
    278a:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
							LCD_intgerToString(data);
    278e:	fe 01       	movw	r30, r28
    2790:	ec 5d       	subi	r30, 0xDC	; 220
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	80 81       	ld	r24, Z
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 93 21 	call	0x4326	; 0x4326 <LCD_intgerToString>
							LCD_moveCursor(1,i);
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 5d       	subi	r30, 0xDF	; 223
    27a2:	fe 4f       	sbci	r31, 0xFE	; 254
    27a4:	90 81       	ld	r25, Z
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	69 2f       	mov	r22, r25
    27aa:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
    27ae:	fe 01       	movw	r30, r28
    27b0:	ef 5a       	subi	r30, 0xAF	; 175
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	aa e7       	ldi	r26, 0x7A	; 122
    27ba:	b3 e4       	ldi	r27, 0x43	; 67
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	8e 01       	movw	r16, r28
    27c6:	03 5b       	subi	r16, 0xB3	; 179
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	ef 5a       	subi	r30, 0xAF	; 175
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e3 5b       	subi	r30, 0xB3	; 179
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	44 f4       	brge	.+16     	; 0x2820 <main+0x1c6a>
		__ticks = 1;
    2810:	fe 01       	movw	r30, r28
    2812:	e5 5b       	subi	r30, 0xB5	; 181
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	64 c0       	rjmp	.+200    	; 0x28e8 <main+0x1d32>
	else if (__tmp > 65535)
    2820:	fe 01       	movw	r30, r28
    2822:	e3 5b       	subi	r30, 0xB3	; 179
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	3f ef       	ldi	r19, 0xFF	; 255
    2832:	4f e7       	ldi	r20, 0x7F	; 127
    2834:	57 e4       	ldi	r21, 0x47	; 71
    2836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283a:	18 16       	cp	r1, r24
    283c:	0c f0       	brlt	.+2      	; 0x2840 <main+0x1c8a>
    283e:	43 c0       	rjmp	.+134    	; 0x28c6 <main+0x1d10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2840:	fe 01       	movw	r30, r28
    2842:	ef 5a       	subi	r30, 0xAF	; 175
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8e 01       	movw	r16, r28
    2860:	05 5b       	subi	r16, 0xB5	; 181
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	1f c0       	rjmp	.+62     	; 0x28b6 <main+0x1d00>
    2878:	fe 01       	movw	r30, r28
    287a:	e7 5b       	subi	r30, 0xB7	; 183
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	88 ec       	ldi	r24, 0xC8	; 200
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	fe 01       	movw	r30, r28
    2888:	e7 5b       	subi	r30, 0xB7	; 183
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <main+0x1cda>
    2894:	fe 01       	movw	r30, r28
    2896:	e7 5b       	subi	r30, 0xB7	; 183
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	de 01       	movw	r26, r28
    28a0:	a5 5b       	subi	r26, 0xB5	; 181
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e5 5b       	subi	r30, 0xB5	; 181
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	fe 01       	movw	r30, r28
    28b8:	e5 5b       	subi	r30, 0xB5	; 181
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	d1 f6       	brne	.-76     	; 0x2878 <main+0x1cc2>
    28c4:	27 c0       	rjmp	.+78     	; 0x2914 <main+0x1d5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	8e 01       	movw	r16, r28
    28c8:	05 5b       	subi	r16, 0xB5	; 181
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 5b       	subi	r30, 0xB3	; 179
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	f8 01       	movw	r30, r16
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	de 01       	movw	r26, r28
    28ea:	a9 5b       	subi	r26, 0xB9	; 185
    28ec:	bf 4f       	sbci	r27, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e5 5b       	subi	r30, 0xB5	; 181
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	8d 93       	st	X+, r24
    28fa:	9c 93       	st	X, r25
    28fc:	fe 01       	movw	r30, r28
    28fe:	e9 5b       	subi	r30, 0xB9	; 185
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <main+0x1d50>
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5b       	subi	r30, 0xB9	; 185
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
							_delay_ms(250);
							LCD_displayCharacter('*');
    2914:	8a e2       	ldi	r24, 0x2A	; 42
    2916:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <LCD_displayCharacter>
							pass1[i] = data;
    291a:	fe 01       	movw	r30, r28
    291c:	ef 5d       	subi	r30, 0xDF	; 223
    291e:	fe 4f       	sbci	r31, 0xFE	; 254
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	fe 01       	movw	r30, r28
    2926:	ec 5d       	subi	r30, 0xDC	; 220
    2928:	fe 4f       	sbci	r31, 0xFE	; 254
    292a:	80 81       	ld	r24, Z
    292c:	48 2f       	mov	r20, r24
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	9e 01       	movw	r18, r28
    2932:	2d 5c       	subi	r18, 0xCD	; 205
    2934:	3e 4f       	sbci	r19, 0xFE	; 254
    2936:	cb 01       	movw	r24, r22
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	f9 01       	movw	r30, r18
    293e:	e8 0f       	add	r30, r24
    2940:	f9 1f       	adc	r31, r25
    2942:	51 83       	std	Z+1, r21	; 0x01
    2944:	40 83       	st	Z, r20
    2946:	fe 01       	movw	r30, r28
    2948:	ed 5b       	subi	r30, 0xBD	; 189
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a6 e1       	ldi	r26, 0x16	; 22
    2952:	b4 e4       	ldi	r27, 0x44	; 68
    2954:	80 83       	st	Z, r24
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	a2 83       	std	Z+2, r26	; 0x02
    295a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	8e 01       	movw	r16, r28
    295e:	01 5c       	subi	r16, 0xC1	; 193
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	ed 5b       	subi	r30, 0xBD	; 189
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	60 81       	ld	r22, Z
    296a:	71 81       	ldd	r23, Z+1	; 0x01
    296c:	82 81       	ldd	r24, Z+2	; 0x02
    296e:	93 81       	ldd	r25, Z+3	; 0x03
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a ef       	ldi	r20, 0xFA	; 250
    2976:	54 e4       	ldi	r21, 0x44	; 68
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	f8 01       	movw	r30, r16
    2982:	80 83       	st	Z, r24
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	a2 83       	std	Z+2, r26	; 0x02
    2988:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    298a:	fe 01       	movw	r30, r28
    298c:	ff 96       	adiw	r30, 0x3f	; 63
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <main+0x1dfa>
		__ticks = 1;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9e af       	std	Y+62, r25	; 0x3e
    29ac:	8d af       	std	Y+61, r24	; 0x3d
    29ae:	46 c0       	rjmp	.+140    	; 0x2a3c <main+0x1e86>
	else if (__tmp > 65535)
    29b0:	fe 01       	movw	r30, r28
    29b2:	ff 96       	adiw	r30, 0x3f	; 63
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	64 f5       	brge	.+88     	; 0x2a24 <main+0x1e6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 5b       	subi	r30, 0xBD	; 189
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e2       	ldi	r20, 0x20	; 32
    29e0:	51 e4       	ldi	r21, 0x41	; 65
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9e af       	std	Y+62, r25	; 0x3e
    29f8:	8d af       	std	Y+61, r24	; 0x3d
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <main+0x1e64>
    29fc:	88 ec       	ldi	r24, 0xC8	; 200
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9c af       	std	Y+60, r25	; 0x3c
    2a02:	8b af       	std	Y+59, r24	; 0x3b
    2a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a06:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <main+0x1e52>
    2a0c:	9c af       	std	Y+60, r25	; 0x3c
    2a0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	9e af       	std	Y+62, r25	; 0x3e
    2a18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	69 f7       	brne	.-38     	; 0x29fc <main+0x1e46>
    2a22:	16 c0       	rjmp	.+44     	; 0x2a50 <main+0x1e9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	fe 01       	movw	r30, r28
    2a26:	ff 96       	adiw	r30, 0x3f	; 63
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e af       	std	Y+62, r25	; 0x3e
    2a3a:	8d af       	std	Y+61, r24	; 0x3d
    2a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a40:	9a af       	std	Y+58, r25	; 0x3a
    2a42:	89 af       	std	Y+57, r24	; 0x39
    2a44:	89 ad       	ldd	r24, Y+57	; 0x39
    2a46:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <main+0x1e92>
    2a4c:	9a af       	std	Y+58, r25	; 0x3a
    2a4e:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(600);
							i++;
    2a50:	de 01       	movw	r26, r28
    2a52:	af 5d       	subi	r26, 0xDF	; 223
    2a54:	be 4f       	sbci	r27, 0xFE	; 254
    2a56:	fe 01       	movw	r30, r28
    2a58:	ef 5d       	subi	r30, 0xDF	; 223
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	8d 93       	st	X+, r24
    2a64:	9c 93       	st	X, r25
						}
						data = KEYPAD_getPressedKey();
    2a66:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <KEYPAD_getPressedKey>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ec 5d       	subi	r30, 0xDC	; 220
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	80 83       	st	Z, r24
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a6 e1       	ldi	r26, 0x16	; 22
    2a78:	b4 e4       	ldi	r27, 0x44	; 68
    2a7a:	8d ab       	std	Y+53, r24	; 0x35
    2a7c:	9e ab       	std	Y+54, r25	; 0x36
    2a7e:	af ab       	std	Y+55, r26	; 0x37
    2a80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	6d a9       	ldd	r22, Y+53	; 0x35
    2a84:	7e a9       	ldd	r23, Y+54	; 0x36
    2a86:	8f a9       	ldd	r24, Y+55	; 0x37
    2a88:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	89 ab       	std	Y+49, r24	; 0x31
    2a9c:	9a ab       	std	Y+50, r25	; 0x32
    2a9e:	ab ab       	std	Y+51, r26	; 0x33
    2aa0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <main+0x1f0e>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	98 ab       	std	Y+48, r25	; 0x30
    2ac0:	8f a7       	std	Y+47, r24	; 0x2f
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <main+0x1f8c>
	else if (__tmp > 65535)
    2ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aca:	9c a9       	ldd	r25, Y+52	; 0x34
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <main+0x1f78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	6d a9       	ldd	r22, Y+53	; 0x35
    2ade:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	98 ab       	std	Y+48, r25	; 0x30
    2b02:	8f a7       	std	Y+47, r24	; 0x2f
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <main+0x1f6e>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9e a7       	std	Y+46, r25	; 0x2e
    2b0c:	8d a7       	std	Y+45, r24	; 0x2d
    2b0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b10:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <main+0x1f5c>
    2b16:	9e a7       	std	Y+46, r25	; 0x2e
    2b18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	98 ab       	std	Y+48, r25	; 0x30
    2b22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b26:	98 a9       	ldd	r25, Y+48	; 0x30
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <main+0x1f50>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <main+0x1fa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b30:	7a a9       	ldd	r23, Y+50	; 0x32
    2b32:	8b a9       	ldd	r24, Y+51	; 0x33
    2b34:	9c a9       	ldd	r25, Y+52	; 0x34
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	98 ab       	std	Y+48, r25	; 0x30
    2b40:	8f a7       	std	Y+47, r24	; 0x2f
    2b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b44:	98 a9       	ldd	r25, Y+48	; 0x30
    2b46:	9c a7       	std	Y+44, r25	; 0x2c
    2b48:	8b a7       	std	Y+43, r24	; 0x2b
    2b4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <main+0x1f98>
    2b52:	9c a7       	std	Y+44, r25	; 0x2c
    2b54:	8b a7       	std	Y+43, r24	; 0x2b
					data = KEYPAD_getPressedKey();
					/* Initialize arrays*/

					i=0;
					//LCD_moveCursor(1,i);
					while(data != '=')
    2b56:	fe 01       	movw	r30, r28
    2b58:	ec 5d       	subi	r30, 0xDC	; 220
    2b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8d 33       	cpi	r24, 0x3D	; 61
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <main+0x1fae>
    2b62:	fd cd       	rjmp	.-1030   	; 0x275e <main+0x1ba8>
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}

					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    2b64:	fe 01       	movw	r30, r28
    2b66:	ef 5d       	subi	r30, 0xDF	; 223
    2b68:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6a:	11 82       	std	Z+1, r1	; 0x01
    2b6c:	10 82       	st	Z, r1
    2b6e:	1d c0       	rjmp	.+58     	; 0x2baa <main+0x1ff4>
					{
						UART_sendByte(pass1[i]);
    2b70:	fe 01       	movw	r30, r28
    2b72:	ef 5d       	subi	r30, 0xDF	; 223
    2b74:	fe 4f       	sbci	r31, 0xFE	; 254
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	9e 01       	movw	r18, r28
    2b7c:	2d 5c       	subi	r18, 0xCD	; 205
    2b7e:	3e 4f       	sbci	r19, 0xFE	; 254
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	f9 01       	movw	r30, r18
    2b86:	e8 0f       	add	r30, r24
    2b88:	f9 1f       	adc	r31, r25
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
						data = KEYPAD_getPressedKey();
						_delay_ms(600);
					}

					/*send pass to MC*/
					for(i=0 ; i<5 ; i++)
    2b92:	de 01       	movw	r26, r28
    2b94:	af 5d       	subi	r26, 0xDF	; 223
    2b96:	be 4f       	sbci	r27, 0xFE	; 254
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ef 5d       	subi	r30, 0xDF	; 223
    2b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	11 96       	adiw	r26, 0x01	; 1
    2ba6:	9c 93       	st	X, r25
    2ba8:	8e 93       	st	-X, r24
    2baa:	fe 01       	movw	r30, r28
    2bac:	ef 5d       	subi	r30, 0xDF	; 223
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	85 30       	cpi	r24, 0x05	; 5
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	dc f2       	brlt	.-74     	; 0x2b70 <main+0x1fba>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e2       	ldi	r26, 0x20	; 32
    2bc0:	b1 e4       	ldi	r27, 0x41	; 65
    2bc2:	8f a3       	std	Y+39, r24	; 0x27
    2bc4:	98 a7       	std	Y+40, r25	; 0x28
    2bc6:	a9 a7       	std	Y+41, r26	; 0x29
    2bc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6f a1       	ldd	r22, Y+39	; 0x27
    2bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bce:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8b a3       	std	Y+35, r24	; 0x23
    2be4:	9c a3       	std	Y+36, r25	; 0x24
    2be6:	ad a3       	std	Y+37, r26	; 0x25
    2be8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bea:	6b a1       	ldd	r22, Y+35	; 0x23
    2bec:	7c a1       	ldd	r23, Y+36	; 0x24
    2bee:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <main+0x2056>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9a a3       	std	Y+34, r25	; 0x22
    2c08:	89 a3       	std	Y+33, r24	; 0x21
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <main+0x20d4>
	else if (__tmp > 65535)
    2c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c10:	8d a1       	ldd	r24, Y+37	; 0x25
    2c12:	9e a1       	ldd	r25, Y+38	; 0x26
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <main+0x20c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6f a1       	ldd	r22, Y+39	; 0x27
    2c26:	78 a5       	ldd	r23, Y+40	; 0x28
    2c28:	89 a5       	ldd	r24, Y+41	; 0x29
    2c2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9a a3       	std	Y+34, r25	; 0x22
    2c4a:	89 a3       	std	Y+33, r24	; 0x21
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <main+0x20b6>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	98 a3       	std	Y+32, r25	; 0x20
    2c54:	8f 8f       	std	Y+31, r24	; 0x1f
    2c56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c58:	98 a1       	ldd	r25, Y+32	; 0x20
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <main+0x20a4>
    2c5e:	98 a3       	std	Y+32, r25	; 0x20
    2c60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	89 a1       	ldd	r24, Y+33	; 0x21
    2c64:	9a a1       	ldd	r25, Y+34	; 0x22
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9a a3       	std	Y+34, r25	; 0x22
    2c6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <main+0x2098>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <main+0x20e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6b a1       	ldd	r22, Y+35	; 0x23
    2c78:	7c a1       	ldd	r23, Y+36	; 0x24
    2c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9a a3       	std	Y+34, r25	; 0x22
    2c88:	89 a3       	std	Y+33, r24	; 0x21
    2c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c90:	8d 8f       	std	Y+29, r24	; 0x1d
    2c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <main+0x20e0>
    2c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c9c:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						UART_sendByte(pass1[i]);
					}
					_delay_ms(10);
					change_pass = UART_recieveByte(); /* receive pass_checking result from MC*/
    2c9e:	0e 94 53 23 	call	0x46a6	; 0x46a6 <UART_recieveByte>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e5 5e       	subi	r30, 0xE5	; 229
    2ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24

					error++;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	a7 5e       	subi	r26, 0xE7	; 231
    2cb4:	be 4f       	sbci	r27, 0xFE	; 254
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e7 5e       	subi	r30, 0xE7	; 231
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	9c 93       	st	X, r25
    2cc6:	8e 93       	st	-X, r24

					/******in case of error send 'E' to MC******/
					if(error==3)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e7 5e       	subi	r30, 0xE7	; 231
    2ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	83 30       	cpi	r24, 0x03	; 3
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <main+0x2124>
    2cd8:	82 c0       	rjmp	.+260    	; 0x2dde <main+0x2228>
					{
						UART_sendByte('E');
    2cda:	85 e4       	ldi	r24, 0x45	; 69
    2cdc:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
						LCD_clearScreen();
    2ce0:	0e 94 b6 21 	call	0x436c	; 0x436c <LCD_clearScreen>
						LCD_displayString("error");
    2ce4:	81 ee       	ldi	r24, 0xE1	; 225
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
						change_pass=1;
    2cec:	fe 01       	movw	r30, r28
    2cee:	e5 5e       	subi	r30, 0xE5	; 229
    2cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	aa e7       	ldi	r26, 0x7A	; 122
    2d00:	b4 e4       	ldi	r27, 0x44	; 68
    2d02:	89 8f       	std	Y+25, r24	; 0x19
    2d04:	9a 8f       	std	Y+26, r25	; 0x1a
    2d06:	ab 8f       	std	Y+27, r26	; 0x1b
    2d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a ef       	ldi	r20, 0xFA	; 250
    2d18:	54 e4       	ldi	r21, 0x44	; 68
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8d 8b       	std	Y+21, r24	; 0x15
    2d24:	9e 8b       	std	Y+22, r25	; 0x16
    2d26:	af 8b       	std	Y+23, r26	; 0x17
    2d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d30:	98 8d       	ldd	r25, Y+24	; 0x18
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <main+0x2196>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <main+0x2214>
	else if (__tmp > 65535)
    2d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d50:	8f 89       	ldd	r24, Y+23	; 0x17
    2d52:	98 8d       	ldd	r25, Y+24	; 0x18
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <main+0x2200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	69 8d       	ldd	r22, Y+25	; 0x19
    2d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e2       	ldi	r20, 0x20	; 32
    2d72:	51 e4       	ldi	r21, 0x41	; 65
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <main+0x21f6>
    2d8e:	88 ec       	ldi	r24, 0xC8	; 200
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9a 8b       	std	Y+18, r25	; 0x12
    2d94:	89 8b       	std	Y+17, r24	; 0x11
    2d96:	89 89       	ldd	r24, Y+17	; 0x11
    2d98:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <main+0x21e4>
    2d9e:	9a 8b       	std	Y+18, r25	; 0x12
    2da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8b 89       	ldd	r24, Y+19	; 0x13
    2da4:	9c 89       	ldd	r25, Y+20	; 0x14
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9c 8b       	std	Y+20, r25	; 0x14
    2daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <main+0x21d8>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <main+0x2228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	6d 89       	ldd	r22, Y+21	; 0x15
    2db8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dba:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	8b 89       	ldd	r24, Y+19	; 0x13
    2dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dce:	98 8b       	std	Y+16, r25	; 0x10
    2dd0:	8f 87       	std	Y+15, r24	; 0x0f
    2dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd4:	98 89       	ldd	r25, Y+16	; 0x10
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <main+0x2220>
    2dda:	98 8b       	std	Y+16, r25	; 0x10
    2ddc:	8f 87       	std	Y+15, r24	; 0x0f
			/******************change_pass CASE *******************/
			else if(condition == '-' )
			{


				while(change_pass == 0)
    2dde:	fe 01       	movw	r30, r28
    2de0:	e5 5e       	subi	r30, 0xE5	; 229
    2de2:	fe 4f       	sbci	r31, 0xFE	; 254
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	09 f4       	brne	.+2      	; 0x2dee <main+0x2238>
    2dec:	c7 cb       	rjmp	.-2162   	; 0x257c <main+0x19c6>

					}

				}

				change_pass = 0;   /* to go in  while loop of change_case  again*/
    2dee:	fe 01       	movw	r30, r28
    2df0:	e5 5e       	subi	r30, 0xE5	; 229
    2df2:	fe 4f       	sbci	r31, 0xFE	; 254
    2df4:	11 82       	std	Z+1, r1	; 0x01
    2df6:	10 82       	st	Z, r1
				if(error ==3)
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e7 5e       	subi	r30, 0xE7	; 231
    2dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	83 30       	cpi	r24, 0x03	; 3
    2e04:	91 05       	cpc	r25, r1
    2e06:	29 f0       	breq	.+10     	; 0x2e12 <main+0x225c>
				{
				}
				else
				{
					pass_check=0;
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e1 5e       	subi	r30, 0xE1	; 225
    2e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	10 82       	st	Z, r1
				}
				change_pass=0;
    2e12:	fe 01       	movw	r30, r28
    2e14:	e5 5e       	subi	r30, 0xE5	; 229
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	11 82       	std	Z+1, r1	; 0x01
    2e1a:	10 82       	st	Z, r1
				error=0;
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e7 5e       	subi	r30, 0xE7	; 231
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	11 82       	std	Z+1, r1	; 0x01
    2e24:	10 82       	st	Z, r1
				condition=0;
    2e26:	fe 01       	movw	r30, r28
    2e28:	ed 5d       	subi	r30, 0xDD	; 221
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	10 82       	st	Z, r1
			pass_check =UART_recieveByte();  /* result of password checking*/

		}
		/******************************** MAIN OPTIONS********************************************/

		while(pass_check == 1)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e1 5e       	subi	r30, 0xE1	; 225
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	11 f4       	brne	.+4      	; 0x2e42 <main+0x228c>
    2e3e:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <main+0xeb6>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a6 e1       	ldi	r26, 0x16	; 22
    2e48:	b4 e4       	ldi	r27, 0x44	; 68
    2e4a:	8b 87       	std	Y+11, r24	; 0x0b
    2e4c:	9c 87       	std	Y+12, r25	; 0x0c
    2e4e:	ad 87       	std	Y+13, r26	; 0x0d
    2e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a ef       	ldi	r20, 0xFA	; 250
    2e60:	54 e4       	ldi	r21, 0x44	; 68
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	8f 83       	std	Y+7, r24	; 0x07
    2e6c:	98 87       	std	Y+8, r25	; 0x08
    2e6e:	a9 87       	std	Y+9, r26	; 0x09
    2e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e72:	6f 81       	ldd	r22, Y+7	; 0x07
    2e74:	78 85       	ldd	r23, Y+8	; 0x08
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <main+0x22de>
		__ticks = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	40 c0       	rjmp	.+128    	; 0x2f14 <main+0x235e>
	else if (__tmp > 65535)
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	57 e4       	ldi	r21, 0x47	; 71
    2ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	54 f5       	brge	.+84     	; 0x2f00 <main+0x234a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e2       	ldi	r20, 0x20	; 32
    2eba:	51 e4       	ldi	r21, 0x41	; 65
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <main+0x233e>
    2ed6:	88 ec       	ldi	r24, 0xC8	; 200
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <main+0x232c>
    2ee6:	9c 83       	std	Y+4, r25	; 0x04
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f7       	brne	.-38     	; 0x2ed6 <main+0x2320>
    2efc:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <main+0xea2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0x236a>
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <main+0xea2>

00002f2c <Buzzer_init>:
⮚ Setup the direction for the buzzer pin as output pin through the
GPIO driver.
⮚ Turn off the buzzer through the GPIO.*/

void Buzzer_init(void)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);  /* set pin as output*/
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	64 e0       	ldi	r22, 0x04	; 4
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	64 e0       	ldi	r22, 0x04	; 4
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>

}
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <Buzzer_on>:
/*Description
⮚ Function to enable the Buzzer through the GPIO.*/


void Buzzer_on(void)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);/* turn ON BUZZER*/
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	64 e0       	ldi	r22, 0x04	; 4
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>

}
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <Buzzer_off>:

/*Function to disable the Buzzer through the GPIO*/

void Buzzer_off(void)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	64 e0       	ldi	r22, 0x04	; 4
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
}
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction )
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <GPIO_setupPinDirection+0x6>
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <GPIO_setupPinDirection+0x8>
    2f86:	0f 92       	push	r0
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	6a 83       	std	Y+2, r22	; 0x02
    2f90:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	84 30       	cpi	r24, 0x04	; 4
    2f96:	08 f0       	brcs	.+2      	; 0x2f9a <GPIO_setupPinDirection+0x1c>
    2f98:	d5 c0       	rjmp	.+426    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	88 30       	cpi	r24, 0x08	; 8
    2f9e:	08 f0       	brcs	.+2      	; 0x2fa2 <GPIO_setupPinDirection+0x24>
    2fa0:	d1 c0       	rjmp	.+418    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
	}
	else
	{


		switch(port_num)
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	3d 83       	std	Y+5, r19	; 0x05
    2faa:	2c 83       	std	Y+4, r18	; 0x04
    2fac:	8c 81       	ldd	r24, Y+4	; 0x04
    2fae:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <GPIO_setupPinDirection+0x3a>
    2fb6:	43 c0       	rjmp	.+134    	; 0x303e <GPIO_setupPinDirection+0xc0>
    2fb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2fba:	3d 81       	ldd	r19, Y+5	; 0x05
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	2c f4       	brge	.+10     	; 0x2fcc <GPIO_setupPinDirection+0x4e>
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	71 f0       	breq	.+28     	; 0x2fe6 <GPIO_setupPinDirection+0x68>
    2fca:	bc c0       	rjmp	.+376    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
    2fcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2fce:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd0:	22 30       	cpi	r18, 0x02	; 2
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <GPIO_setupPinDirection+0x5a>
    2fd6:	5f c0       	rjmp	.+190    	; 0x3096 <GPIO_setupPinDirection+0x118>
    2fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fda:	9d 81       	ldd	r25, Y+5	; 0x05
    2fdc:	83 30       	cpi	r24, 0x03	; 3
    2fde:	91 05       	cpc	r25, r1
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <GPIO_setupPinDirection+0x66>
    2fe2:	85 c0       	rjmp	.+266    	; 0x30ee <GPIO_setupPinDirection+0x170>
    2fe4:	af c0       	rjmp	.+350    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	a1 f4       	brne	.+40     	; 0x3014 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2fec:	aa e3       	ldi	r26, 0x3A	; 58
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	ea e3       	ldi	r30, 0x3A	; 58
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	48 2f       	mov	r20, r24
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	02 2e       	mov	r0, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <GPIO_setupPinDirection+0x8c>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	0a 94       	dec	r0
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <GPIO_setupPinDirection+0x88>
    300e:	84 2b       	or	r24, r20
    3010:	8c 93       	st	X, r24
    3012:	98 c0       	rjmp	.+304    	; 0x3144 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3014:	aa e3       	ldi	r26, 0x3A	; 58
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	ea e3       	ldi	r30, 0x3A	; 58
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	48 2f       	mov	r20, r24
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 2e       	mov	r0, r18
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <GPIO_setupPinDirection+0xb4>
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	0a 94       	dec	r0
    3034:	e2 f7       	brpl	.-8      	; 0x302e <GPIO_setupPinDirection+0xb0>
    3036:	80 95       	com	r24
    3038:	84 23       	and	r24, r20
    303a:	8c 93       	st	X, r24
    303c:	83 c0       	rjmp	.+262    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	a1 f4       	brne	.+40     	; 0x306c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3044:	a7 e3       	ldi	r26, 0x37	; 55
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e7 e3       	ldi	r30, 0x37	; 55
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	48 2f       	mov	r20, r24
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	02 2e       	mov	r0, r18
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <GPIO_setupPinDirection+0xe4>
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	0a 94       	dec	r0
    3064:	e2 f7       	brpl	.-8      	; 0x305e <GPIO_setupPinDirection+0xe0>
    3066:	84 2b       	or	r24, r20
    3068:	8c 93       	st	X, r24
    306a:	6c c0       	rjmp	.+216    	; 0x3144 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    306c:	a7 e3       	ldi	r26, 0x37	; 55
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e7 e3       	ldi	r30, 0x37	; 55
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	48 2f       	mov	r20, r24
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	02 2e       	mov	r0, r18
    3084:	02 c0       	rjmp	.+4      	; 0x308a <GPIO_setupPinDirection+0x10c>
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	0a 94       	dec	r0
    308c:	e2 f7       	brpl	.-8      	; 0x3086 <GPIO_setupPinDirection+0x108>
    308e:	80 95       	com	r24
    3090:	84 23       	and	r24, r20
    3092:	8c 93       	st	X, r24
    3094:	57 c0       	rjmp	.+174    	; 0x3144 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	81 30       	cpi	r24, 0x01	; 1
    309a:	a1 f4       	brne	.+40     	; 0x30c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    309c:	a4 e3       	ldi	r26, 0x34	; 52
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e4 e3       	ldi	r30, 0x34	; 52
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	48 2f       	mov	r20, r24
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	28 2f       	mov	r18, r24
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	02 2e       	mov	r0, r18
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <GPIO_setupPinDirection+0x13c>
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	0a 94       	dec	r0
    30bc:	e2 f7       	brpl	.-8      	; 0x30b6 <GPIO_setupPinDirection+0x138>
    30be:	84 2b       	or	r24, r20
    30c0:	8c 93       	st	X, r24
    30c2:	40 c0       	rjmp	.+128    	; 0x3144 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    30c4:	a4 e3       	ldi	r26, 0x34	; 52
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e4 e3       	ldi	r30, 0x34	; 52
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	48 2f       	mov	r20, r24
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	02 2e       	mov	r0, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <GPIO_setupPinDirection+0x164>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <GPIO_setupPinDirection+0x160>
    30e6:	80 95       	com	r24
    30e8:	84 23       	and	r24, r20
    30ea:	8c 93       	st	X, r24
    30ec:	2b c0       	rjmp	.+86     	; 0x3144 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	a1 f4       	brne	.+40     	; 0x311c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    30f4:	a1 e3       	ldi	r26, 0x31	; 49
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e1 e3       	ldi	r30, 0x31	; 49
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	48 2f       	mov	r20, r24
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	02 2e       	mov	r0, r18
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <GPIO_setupPinDirection+0x194>
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	0a 94       	dec	r0
    3114:	e2 f7       	brpl	.-8      	; 0x310e <GPIO_setupPinDirection+0x190>
    3116:	84 2b       	or	r24, r20
    3118:	8c 93       	st	X, r24
    311a:	14 c0       	rjmp	.+40     	; 0x3144 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    311c:	a1 e3       	ldi	r26, 0x31	; 49
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e1 e3       	ldi	r30, 0x31	; 49
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	48 2f       	mov	r20, r24
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	02 2e       	mov	r0, r18
    3134:	02 c0       	rjmp	.+4      	; 0x313a <GPIO_setupPinDirection+0x1bc>
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	0a 94       	dec	r0
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <GPIO_setupPinDirection+0x1b8>
    313e:	80 95       	com	r24
    3140:	84 23       	and	r24, r20
    3142:	8c 93       	st	X, r24


		}
	}

}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <GPIO_writePin+0x6>
    315a:	00 d0       	rcall	.+0      	; 0x315c <GPIO_writePin+0x8>
    315c:	0f 92       	push	r0
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	6a 83       	std	Y+2, r22	; 0x02
    3166:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	84 30       	cpi	r24, 0x04	; 4
    316c:	08 f0       	brcs	.+2      	; 0x3170 <GPIO_writePin+0x1c>
    316e:	d5 c0       	rjmp	.+426    	; 0x331a <GPIO_writePin+0x1c6>
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	88 30       	cpi	r24, 0x08	; 8
    3174:	08 f0       	brcs	.+2      	; 0x3178 <GPIO_writePin+0x24>
    3176:	d1 c0       	rjmp	.+418    	; 0x331a <GPIO_writePin+0x1c6>
	{
		/****do nothing***/
	}
	else
	{
		switch(port_num)
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	3d 83       	std	Y+5, r19	; 0x05
    3180:	2c 83       	std	Y+4, r18	; 0x04
    3182:	8c 81       	ldd	r24, Y+4	; 0x04
    3184:	9d 81       	ldd	r25, Y+5	; 0x05
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	91 05       	cpc	r25, r1
    318a:	09 f4       	brne	.+2      	; 0x318e <GPIO_writePin+0x3a>
    318c:	43 c0       	rjmp	.+134    	; 0x3214 <GPIO_writePin+0xc0>
    318e:	2c 81       	ldd	r18, Y+4	; 0x04
    3190:	3d 81       	ldd	r19, Y+5	; 0x05
    3192:	22 30       	cpi	r18, 0x02	; 2
    3194:	31 05       	cpc	r19, r1
    3196:	2c f4       	brge	.+10     	; 0x31a2 <GPIO_writePin+0x4e>
    3198:	8c 81       	ldd	r24, Y+4	; 0x04
    319a:	9d 81       	ldd	r25, Y+5	; 0x05
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	71 f0       	breq	.+28     	; 0x31bc <GPIO_writePin+0x68>
    31a0:	bc c0       	rjmp	.+376    	; 0x331a <GPIO_writePin+0x1c6>
    31a2:	2c 81       	ldd	r18, Y+4	; 0x04
    31a4:	3d 81       	ldd	r19, Y+5	; 0x05
    31a6:	22 30       	cpi	r18, 0x02	; 2
    31a8:	31 05       	cpc	r19, r1
    31aa:	09 f4       	brne	.+2      	; 0x31ae <GPIO_writePin+0x5a>
    31ac:	5f c0       	rjmp	.+190    	; 0x326c <GPIO_writePin+0x118>
    31ae:	8c 81       	ldd	r24, Y+4	; 0x04
    31b0:	9d 81       	ldd	r25, Y+5	; 0x05
    31b2:	83 30       	cpi	r24, 0x03	; 3
    31b4:	91 05       	cpc	r25, r1
    31b6:	09 f4       	brne	.+2      	; 0x31ba <GPIO_writePin+0x66>
    31b8:	85 c0       	rjmp	.+266    	; 0x32c4 <GPIO_writePin+0x170>
    31ba:	af c0       	rjmp	.+350    	; 0x331a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:


			if(value == LOGIC_HIGH)
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	a1 f4       	brne	.+40     	; 0x31ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA , pin_num);
    31c2:	ab e3       	ldi	r26, 0x3B	; 59
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	eb e3       	ldi	r30, 0x3B	; 59
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	48 2f       	mov	r20, r24
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	02 2e       	mov	r0, r18
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <GPIO_writePin+0x8c>
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <GPIO_writePin+0x88>
    31e4:	84 2b       	or	r24, r20
    31e6:	8c 93       	st	X, r24
    31e8:	98 c0       	rjmp	.+304    	; 0x331a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA , pin_num);
    31ea:	ab e3       	ldi	r26, 0x3B	; 59
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	eb e3       	ldi	r30, 0x3B	; 59
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	48 2f       	mov	r20, r24
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	02 2e       	mov	r0, r18
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <GPIO_writePin+0xb4>
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	0a 94       	dec	r0
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <GPIO_writePin+0xb0>
    320c:	80 95       	com	r24
    320e:	84 23       	and	r24, r20
    3210:	8c 93       	st	X, r24
    3212:	83 c0       	rjmp	.+262    	; 0x331a <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:


			if(value == LOGIC_HIGH)
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	a1 f4       	brne	.+40     	; 0x3242 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB , pin_num);
    321a:	a8 e3       	ldi	r26, 0x38	; 56
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e8 e3       	ldi	r30, 0x38	; 56
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	48 2f       	mov	r20, r24
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	02 2e       	mov	r0, r18
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <GPIO_writePin+0xe4>
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	0a 94       	dec	r0
    323a:	e2 f7       	brpl	.-8      	; 0x3234 <GPIO_writePin+0xe0>
    323c:	84 2b       	or	r24, r20
    323e:	8c 93       	st	X, r24
    3240:	6c c0       	rjmp	.+216    	; 0x331a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB , pin_num);
    3242:	a8 e3       	ldi	r26, 0x38	; 56
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e8 e3       	ldi	r30, 0x38	; 56
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	48 2f       	mov	r20, r24
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	02 2e       	mov	r0, r18
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <GPIO_writePin+0x10c>
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	0a 94       	dec	r0
    3262:	e2 f7       	brpl	.-8      	; 0x325c <GPIO_writePin+0x108>
    3264:	80 95       	com	r24
    3266:	84 23       	and	r24, r20
    3268:	8c 93       	st	X, r24
    326a:	57 c0       	rjmp	.+174    	; 0x331a <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:


			if(value == LOGIC_HIGH)
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	81 30       	cpi	r24, 0x01	; 1
    3270:	a1 f4       	brne	.+40     	; 0x329a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC , pin_num);
    3272:	a5 e3       	ldi	r26, 0x35	; 53
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e5 e3       	ldi	r30, 0x35	; 53
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	48 2f       	mov	r20, r24
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	28 2f       	mov	r18, r24
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	02 2e       	mov	r0, r18
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <GPIO_writePin+0x13c>
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	0a 94       	dec	r0
    3292:	e2 f7       	brpl	.-8      	; 0x328c <GPIO_writePin+0x138>
    3294:	84 2b       	or	r24, r20
    3296:	8c 93       	st	X, r24
    3298:	40 c0       	rjmp	.+128    	; 0x331a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC , pin_num);
    329a:	a5 e3       	ldi	r26, 0x35	; 53
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e5 e3       	ldi	r30, 0x35	; 53
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	48 2f       	mov	r20, r24
    32a6:	8a 81       	ldd	r24, Y+2	; 0x02
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	02 2e       	mov	r0, r18
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <GPIO_writePin+0x164>
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	0a 94       	dec	r0
    32ba:	e2 f7       	brpl	.-8      	; 0x32b4 <GPIO_writePin+0x160>
    32bc:	80 95       	com	r24
    32be:	84 23       	and	r24, r20
    32c0:	8c 93       	st	X, r24
    32c2:	2b c0       	rjmp	.+86     	; 0x331a <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:


			if(value == LOGIC_HIGH)
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	a1 f4       	brne	.+40     	; 0x32f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD , pin_num);
    32ca:	a2 e3       	ldi	r26, 0x32	; 50
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e2 e3       	ldi	r30, 0x32	; 50
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	48 2f       	mov	r20, r24
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 2e       	mov	r0, r18
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <GPIO_writePin+0x194>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	0a 94       	dec	r0
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <GPIO_writePin+0x190>
    32ec:	84 2b       	or	r24, r20
    32ee:	8c 93       	st	X, r24
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD , pin_num);
    32f2:	a2 e3       	ldi	r26, 0x32	; 50
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e2 e3       	ldi	r30, 0x32	; 50
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	48 2f       	mov	r20, r24
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	02 2e       	mov	r0, r18
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <GPIO_writePin+0x1bc>
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	0a 94       	dec	r0
    3312:	e2 f7       	brpl	.-8      	; 0x330c <GPIO_writePin+0x1b8>
    3314:	80 95       	com	r24
    3316:	84 23       	and	r24, r20
    3318:	8c 93       	st	X, r24



	}

}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	00 d0       	rcall	.+0      	; 0x3330 <GPIO_readPin+0x6>
    3330:	00 d0       	rcall	.+0      	; 0x3332 <GPIO_readPin+0x8>
    3332:	0f 92       	push	r0
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=0;
    333c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	84 30       	cpi	r24, 0x04	; 4
    3342:	08 f0       	brcs	.+2      	; 0x3346 <GPIO_readPin+0x1c>
    3344:	84 c0       	rjmp	.+264    	; 0x344e <GPIO_readPin+0x124>
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	88 30       	cpi	r24, 0x08	; 8
    334a:	08 f0       	brcs	.+2      	; 0x334e <GPIO_readPin+0x24>
    334c:	80 c0       	rjmp	.+256    	; 0x344e <GPIO_readPin+0x124>
	{
		/****return 0***/
	}
	else
	{
		switch(port_num)
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	3d 83       	std	Y+5, r19	; 0x05
    3356:	2c 83       	std	Y+4, r18	; 0x04
    3358:	4c 81       	ldd	r20, Y+4	; 0x04
    335a:	5d 81       	ldd	r21, Y+5	; 0x05
    335c:	41 30       	cpi	r20, 0x01	; 1
    335e:	51 05       	cpc	r21, r1
    3360:	79 f1       	breq	.+94     	; 0x33c0 <GPIO_readPin+0x96>
    3362:	8c 81       	ldd	r24, Y+4	; 0x04
    3364:	9d 81       	ldd	r25, Y+5	; 0x05
    3366:	82 30       	cpi	r24, 0x02	; 2
    3368:	91 05       	cpc	r25, r1
    336a:	34 f4       	brge	.+12     	; 0x3378 <GPIO_readPin+0x4e>
    336c:	2c 81       	ldd	r18, Y+4	; 0x04
    336e:	3d 81       	ldd	r19, Y+5	; 0x05
    3370:	21 15       	cp	r18, r1
    3372:	31 05       	cpc	r19, r1
    3374:	69 f0       	breq	.+26     	; 0x3390 <GPIO_readPin+0x66>
    3376:	6b c0       	rjmp	.+214    	; 0x344e <GPIO_readPin+0x124>
    3378:	4c 81       	ldd	r20, Y+4	; 0x04
    337a:	5d 81       	ldd	r21, Y+5	; 0x05
    337c:	42 30       	cpi	r20, 0x02	; 2
    337e:	51 05       	cpc	r21, r1
    3380:	b9 f1       	breq	.+110    	; 0x33f0 <GPIO_readPin+0xc6>
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	9d 81       	ldd	r25, Y+5	; 0x05
    3386:	83 30       	cpi	r24, 0x03	; 3
    3388:	91 05       	cpc	r25, r1
    338a:	09 f4       	brne	.+2      	; 0x338e <GPIO_readPin+0x64>
    338c:	49 c0       	rjmp	.+146    	; 0x3420 <GPIO_readPin+0xf6>
    338e:	5f c0       	rjmp	.+190    	; 0x344e <GPIO_readPin+0x124>
		{
		case PORTA_ID:

			if(BIT_IS_SET(PINA,pin_num))
    3390:	e9 e3       	ldi	r30, 0x39	; 57
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a9 01       	movw	r20, r18
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <GPIO_readPin+0x7e>
    33a4:	55 95       	asr	r21
    33a6:	47 95       	ror	r20
    33a8:	8a 95       	dec	r24
    33aa:	e2 f7       	brpl	.-8      	; 0x33a4 <GPIO_readPin+0x7a>
    33ac:	ca 01       	movw	r24, r20
    33ae:	81 70       	andi	r24, 0x01	; 1
    33b0:	90 70       	andi	r25, 0x00	; 0
    33b2:	88 23       	and	r24, r24
    33b4:	19 f0       	breq	.+6      	; 0x33bc <GPIO_readPin+0x92>
			{
				value=LOGIC_HIGH;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	49 c0       	rjmp	.+146    	; 0x344e <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    33bc:	19 82       	std	Y+1, r1	; 0x01
    33be:	47 c0       	rjmp	.+142    	; 0x344e <GPIO_readPin+0x124>
			}break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    33c0:	e6 e3       	ldi	r30, 0x36	; 54
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	a9 01       	movw	r20, r18
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <GPIO_readPin+0xae>
    33d4:	55 95       	asr	r21
    33d6:	47 95       	ror	r20
    33d8:	8a 95       	dec	r24
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <GPIO_readPin+0xaa>
    33dc:	ca 01       	movw	r24, r20
    33de:	81 70       	andi	r24, 0x01	; 1
    33e0:	90 70       	andi	r25, 0x00	; 0
    33e2:	88 23       	and	r24, r24
    33e4:	19 f0       	breq	.+6      	; 0x33ec <GPIO_readPin+0xc2>
			{
				value=LOGIC_HIGH;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	31 c0       	rjmp	.+98     	; 0x344e <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    33ec:	19 82       	std	Y+1, r1	; 0x01
    33ee:	2f c0       	rjmp	.+94     	; 0x344e <GPIO_readPin+0x124>
			}break;

		case PORTC_ID:

			if(BIT_IS_SET(PINC,pin_num))
    33f0:	e3 e3       	ldi	r30, 0x33	; 51
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a9 01       	movw	r20, r18
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <GPIO_readPin+0xde>
    3404:	55 95       	asr	r21
    3406:	47 95       	ror	r20
    3408:	8a 95       	dec	r24
    340a:	e2 f7       	brpl	.-8      	; 0x3404 <GPIO_readPin+0xda>
    340c:	ca 01       	movw	r24, r20
    340e:	81 70       	andi	r24, 0x01	; 1
    3410:	90 70       	andi	r25, 0x00	; 0
    3412:	88 23       	and	r24, r24
    3414:	19 f0       	breq	.+6      	; 0x341c <GPIO_readPin+0xf2>
			{
				value=LOGIC_HIGH;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	19 c0       	rjmp	.+50     	; 0x344e <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    341c:	19 82       	std	Y+1, r1	; 0x01
    341e:	17 c0       	rjmp	.+46     	; 0x344e <GPIO_readPin+0x124>
			}break;
		case PORTD_ID:

			if(BIT_IS_SET(PIND,pin_num))
    3420:	e0 e3       	ldi	r30, 0x30	; 48
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	a9 01       	movw	r20, r18
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <GPIO_readPin+0x10e>
    3434:	55 95       	asr	r21
    3436:	47 95       	ror	r20
    3438:	8a 95       	dec	r24
    343a:	e2 f7       	brpl	.-8      	; 0x3434 <GPIO_readPin+0x10a>
    343c:	ca 01       	movw	r24, r20
    343e:	81 70       	andi	r24, 0x01	; 1
    3440:	90 70       	andi	r25, 0x00	; 0
    3442:	88 23       	and	r24, r24
    3444:	19 f0       	breq	.+6      	; 0x344c <GPIO_readPin+0x122>
			{
				value=LOGIC_HIGH;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	01 c0       	rjmp	.+2      	; 0x344e <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    344c:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return value;
    344e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	00 d0       	rcall	.+0      	; 0x3466 <GPIO_setupPortDirection+0x6>
    3466:	00 d0       	rcall	.+0      	; 0x3468 <GPIO_setupPortDirection+0x8>
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	84 30       	cpi	r24, 0x04	; 4
    3474:	90 f5       	brcc	.+100    	; 0x34da <GPIO_setupPortDirection+0x7a>
		/**do nothing**/
	}
	else
	{

		switch(port_num)
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	28 2f       	mov	r18, r24
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	3c 83       	std	Y+4, r19	; 0x04
    347e:	2b 83       	std	Y+3, r18	; 0x03
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	81 30       	cpi	r24, 0x01	; 1
    3486:	91 05       	cpc	r25, r1
    3488:	d1 f0       	breq	.+52     	; 0x34be <GPIO_setupPortDirection+0x5e>
    348a:	2b 81       	ldd	r18, Y+3	; 0x03
    348c:	3c 81       	ldd	r19, Y+4	; 0x04
    348e:	22 30       	cpi	r18, 0x02	; 2
    3490:	31 05       	cpc	r19, r1
    3492:	2c f4       	brge	.+10     	; 0x349e <GPIO_setupPortDirection+0x3e>
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	61 f0       	breq	.+24     	; 0x34b4 <GPIO_setupPortDirection+0x54>
    349c:	1e c0       	rjmp	.+60     	; 0x34da <GPIO_setupPortDirection+0x7a>
    349e:	2b 81       	ldd	r18, Y+3	; 0x03
    34a0:	3c 81       	ldd	r19, Y+4	; 0x04
    34a2:	22 30       	cpi	r18, 0x02	; 2
    34a4:	31 05       	cpc	r19, r1
    34a6:	81 f0       	breq	.+32     	; 0x34c8 <GPIO_setupPortDirection+0x68>
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	83 30       	cpi	r24, 0x03	; 3
    34ae:	91 05       	cpc	r25, r1
    34b0:	81 f0       	breq	.+32     	; 0x34d2 <GPIO_setupPortDirection+0x72>
    34b2:	13 c0       	rjmp	.+38     	; 0x34da <GPIO_setupPortDirection+0x7a>
		{

		case PORTA_ID:DDRA=direction;break;
    34b4:	ea e3       	ldi	r30, 0x3A	; 58
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	80 83       	st	Z, r24
    34bc:	0e c0       	rjmp	.+28     	; 0x34da <GPIO_setupPortDirection+0x7a>
		case PORTB_ID:DDRB=direction;break;
    34be:	e7 e3       	ldi	r30, 0x37	; 55
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	80 83       	st	Z, r24
    34c6:	09 c0       	rjmp	.+18     	; 0x34da <GPIO_setupPortDirection+0x7a>
		case PORTC_ID:DDRC=direction;break;
    34c8:	e4 e3       	ldi	r30, 0x34	; 52
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	80 83       	st	Z, r24
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <GPIO_setupPortDirection+0x7a>
		case PORTD_ID:DDRD=direction;break;
    34d2:	e1 e3       	ldi	r30, 0x31	; 49
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	80 83       	st	Z, r24

	}
	}

}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <GPIO_writePort+0x6>
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <GPIO_writePort+0x8>
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	84 30       	cpi	r24, 0x04	; 4
    34fc:	90 f5       	brcc	.+100    	; 0x3562 <GPIO_writePort+0x7a>
			/**do nothing**/
		}
		else
		{

			switch(port_num)
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	3c 83       	std	Y+4, r19	; 0x04
    3506:	2b 83       	std	Y+3, r18	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	81 30       	cpi	r24, 0x01	; 1
    350e:	91 05       	cpc	r25, r1
    3510:	d1 f0       	breq	.+52     	; 0x3546 <GPIO_writePort+0x5e>
    3512:	2b 81       	ldd	r18, Y+3	; 0x03
    3514:	3c 81       	ldd	r19, Y+4	; 0x04
    3516:	22 30       	cpi	r18, 0x02	; 2
    3518:	31 05       	cpc	r19, r1
    351a:	2c f4       	brge	.+10     	; 0x3526 <GPIO_writePort+0x3e>
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	61 f0       	breq	.+24     	; 0x353c <GPIO_writePort+0x54>
    3524:	1e c0       	rjmp	.+60     	; 0x3562 <GPIO_writePort+0x7a>
    3526:	2b 81       	ldd	r18, Y+3	; 0x03
    3528:	3c 81       	ldd	r19, Y+4	; 0x04
    352a:	22 30       	cpi	r18, 0x02	; 2
    352c:	31 05       	cpc	r19, r1
    352e:	81 f0       	breq	.+32     	; 0x3550 <GPIO_writePort+0x68>
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	83 30       	cpi	r24, 0x03	; 3
    3536:	91 05       	cpc	r25, r1
    3538:	81 f0       	breq	.+32     	; 0x355a <GPIO_writePort+0x72>
    353a:	13 c0       	rjmp	.+38     	; 0x3562 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:PORTA=value;break;
    353c:	eb e3       	ldi	r30, 0x3B	; 59
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	80 83       	st	Z, r24
    3544:	0e c0       	rjmp	.+28     	; 0x3562 <GPIO_writePort+0x7a>
			case PORTB_ID:PORTB=value;break;
    3546:	e8 e3       	ldi	r30, 0x38	; 56
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	80 83       	st	Z, r24
    354e:	09 c0       	rjmp	.+18     	; 0x3562 <GPIO_writePort+0x7a>
			case PORTC_ID:PORTC=value;break;
    3550:	e5 e3       	ldi	r30, 0x35	; 53
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	80 83       	st	Z, r24
    3558:	04 c0       	rjmp	.+8      	; 0x3562 <GPIO_writePort+0x7a>
			case PORTD_ID:PORTD=value;break;
    355a:	e2 e3       	ldi	r30, 0x32	; 50
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	80 83       	st	Z, r24

			}
		}


}
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	00 d0       	rcall	.+0      	; 0x3576 <GPIO_readPort+0x6>
    3576:	00 d0       	rcall	.+0      	; 0x3578 <GPIO_readPort+0x8>
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    357e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	84 30       	cpi	r24, 0x04	; 4
    3584:	90 f5       	brcc	.+100    	; 0x35ea <GPIO_readPort+0x7a>
			{
				/**retuen 0**/
			}
			else
			{
				switch(port_num)
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	28 2f       	mov	r18, r24
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	3c 83       	std	Y+4, r19	; 0x04
    358e:	2b 83       	std	Y+3, r18	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	91 05       	cpc	r25, r1
    3598:	d1 f0       	breq	.+52     	; 0x35ce <GPIO_readPort+0x5e>
    359a:	2b 81       	ldd	r18, Y+3	; 0x03
    359c:	3c 81       	ldd	r19, Y+4	; 0x04
    359e:	22 30       	cpi	r18, 0x02	; 2
    35a0:	31 05       	cpc	r19, r1
    35a2:	2c f4       	brge	.+10     	; 0x35ae <GPIO_readPort+0x3e>
    35a4:	8b 81       	ldd	r24, Y+3	; 0x03
    35a6:	9c 81       	ldd	r25, Y+4	; 0x04
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	61 f0       	breq	.+24     	; 0x35c4 <GPIO_readPort+0x54>
    35ac:	1e c0       	rjmp	.+60     	; 0x35ea <GPIO_readPort+0x7a>
    35ae:	2b 81       	ldd	r18, Y+3	; 0x03
    35b0:	3c 81       	ldd	r19, Y+4	; 0x04
    35b2:	22 30       	cpi	r18, 0x02	; 2
    35b4:	31 05       	cpc	r19, r1
    35b6:	81 f0       	breq	.+32     	; 0x35d8 <GPIO_readPort+0x68>
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	9c 81       	ldd	r25, Y+4	; 0x04
    35bc:	83 30       	cpi	r24, 0x03	; 3
    35be:	91 05       	cpc	r25, r1
    35c0:	81 f0       	breq	.+32     	; 0x35e2 <GPIO_readPort+0x72>
    35c2:	13 c0       	rjmp	.+38     	; 0x35ea <GPIO_readPort+0x7a>
				{
				case PORTA_ID : value = PINA;break;
    35c4:	e9 e3       	ldi	r30, 0x39	; 57
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	0e c0       	rjmp	.+28     	; 0x35ea <GPIO_readPort+0x7a>
				case PORTB_ID : value = PINB;break;
    35ce:	e6 e3       	ldi	r30, 0x36	; 54
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	09 c0       	rjmp	.+18     	; 0x35ea <GPIO_readPort+0x7a>
				case PORTC_ID : value = PINC;break;
    35d8:	e3 e3       	ldi	r30, 0x33	; 51
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	04 c0       	rjmp	.+8      	; 0x35ea <GPIO_readPort+0x7a>
				case PORTD_ID : value = PIND;break;
    35e2:	e0 e3       	ldi	r30, 0x30	; 48
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	89 83       	std	Y+1, r24	; 0x01

				}
			}

	return value;
    35ea:	89 81       	ldd	r24, Y+1	; 0x01

			}
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <KEYPAD_getPressedKey>:

#endif /*STANDARD_KEYPAD**/

/******FUNCTION_DEFINITION***////
uint8 KEYPAD_getPressedKey(void)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	60 97       	sbiw	r28, 0x10	; 16
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
	uint8 row;
	uint8 col;
	/**SET KEYPAD_ROW AS INPUT*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	62 e0       	ldi	r22, 0x02	; 2
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	63 e0       	ldi	r22, 0x03	; 3
    3630:	40 e0       	ldi	r20, 0x00	; 0
    3632:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	/**SET KEYPAD_COL AS INPUT*/

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	64 e0       	ldi	r22, 0x04	; 4
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	65 e0       	ldi	r22, 0x05	; 5
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	66 e0       	ldi	r22, 0x06	; 6
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	67 e0       	ldi	r22, 0x07	; 7
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
    365e:	18 8a       	std	Y+16, r1	; 0x10
    3660:	ab c0       	rjmp	.+342    	; 0x37b8 <KEYPAD_getPressedKey+0x1be>
		{
			/*set pin row as output and write  0 on it and check each column to find the pressed key*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	68 89       	ldd	r22, Y+16	; 0x10
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	68 89       	ldd	r22, Y+16	; 0x10
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
			for(col=0 ; col<KEYPAD_NUM_COLS; col++)
    3676:	1f 86       	std	Y+15, r1	; 0x0f
    3678:	22 c0       	rjmp	.+68     	; 0x36be <KEYPAD_getPressedKey+0xc4>
			{
				if( GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    367a:	8f 85       	ldd	r24, Y+15	; 0x0f
    367c:	98 2f       	mov	r25, r24
    367e:	9c 5f       	subi	r25, 0xFC	; 252
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	69 2f       	mov	r22, r25
    3684:	0e 94 95 19 	call	0x332a	; 0x332a <GPIO_readPin>
    3688:	88 23       	and	r24, r24
    368a:	b1 f4       	brne	.+44     	; 0x36b8 <KEYPAD_getPressedKey+0xbe>

                          #elif (KEYPAD_NUM_COLS == 4)
                                 #ifdef STANDARD_KEYPAD
					              return ((row*KEYPAD_NUM_COLS)+col+1) ;
                                  #else
					              return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    368c:	88 89       	ldd	r24, Y+16	; 0x10
    368e:	88 2f       	mov	r24, r24
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	88 0f       	add	r24, r24
    3694:	99 1f       	adc	r25, r25
    3696:	88 0f       	add	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	98 2f       	mov	r25, r24
    369c:	8f 85       	ldd	r24, Y+15	; 0x0f
    369e:	89 0f       	add	r24, r25
    36a0:	8f 5f       	subi	r24, 0xFF	; 255
    36a2:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <KEYPAD_4x4_adjustKeyNumber>
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */


		}
  }
}
    36a6:	60 96       	adiw	r28, 0x10	; 16
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
		{
			/*set pin row as output and write  0 on it and check each column to find the pressed key*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
			for(col=0 ; col<KEYPAD_NUM_COLS; col++)
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	8f 5f       	subi	r24, 0xFF	; 255
    36bc:	8f 87       	std	Y+15, r24	; 0x0f
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	84 30       	cpi	r24, 0x04	; 4
    36c2:	d8 f2       	brcs	.-74     	; 0x367a <KEYPAD_getPressedKey+0x80>
                          #endif

				}

			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	68 89       	ldd	r22, Y+16	; 0x10
    36c8:	40 e0       	ldi	r20, 0x00	; 0
    36ca:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	a0 ea       	ldi	r26, 0xA0	; 160
    36d4:	b0 e4       	ldi	r27, 0x40	; 64
    36d6:	8b 87       	std	Y+11, r24	; 0x0b
    36d8:	9c 87       	std	Y+12, r25	; 0x0c
    36da:	ad 87       	std	Y+13, r26	; 0x0d
    36dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36de:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4a ef       	ldi	r20, 0xFA	; 250
    36ec:	54 e4       	ldi	r21, 0x44	; 68
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	8f 83       	std	Y+7, r24	; 0x07
    36f8:	98 87       	std	Y+8, r25	; 0x08
    36fa:	a9 87       	std	Y+9, r26	; 0x09
    36fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3700:	78 85       	ldd	r23, Y+8	; 0x08
    3702:	89 85       	ldd	r24, Y+9	; 0x09
    3704:	9a 85       	ldd	r25, Y+10	; 0x0a
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e8       	ldi	r20, 0x80	; 128
    370c:	5f e3       	ldi	r21, 0x3F	; 63
    370e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3712:	88 23       	and	r24, r24
    3714:	2c f4       	brge	.+10     	; 0x3720 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	9e 83       	std	Y+6, r25	; 0x06
    371c:	8d 83       	std	Y+5, r24	; 0x05
    371e:	3f c0       	rjmp	.+126    	; 0x379e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3720:	6f 81       	ldd	r22, Y+7	; 0x07
    3722:	78 85       	ldd	r23, Y+8	; 0x08
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	3f ef       	ldi	r19, 0xFF	; 255
    372c:	4f e7       	ldi	r20, 0x7F	; 127
    372e:	57 e4       	ldi	r21, 0x47	; 71
    3730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3734:	18 16       	cp	r1, r24
    3736:	4c f5       	brge	.+82     	; 0x378a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3738:	6b 85       	ldd	r22, Y+11	; 0x0b
    373a:	7c 85       	ldd	r23, Y+12	; 0x0c
    373c:	8d 85       	ldd	r24, Y+13	; 0x0d
    373e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e2       	ldi	r20, 0x20	; 32
    3746:	51 e4       	ldi	r21, 0x41	; 65
    3748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	9e 83       	std	Y+6, r25	; 0x06
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	0f c0       	rjmp	.+30     	; 0x3780 <KEYPAD_getPressedKey+0x186>
    3762:	88 ec       	ldi	r24, 0xC8	; 200
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	9c 83       	std	Y+4, r25	; 0x04
    3768:	8b 83       	std	Y+3, r24	; 0x03
    376a:	8b 81       	ldd	r24, Y+3	; 0x03
    376c:	9c 81       	ldd	r25, Y+4	; 0x04
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <KEYPAD_getPressedKey+0x174>
    3772:	9c 83       	std	Y+4, r25	; 0x04
    3774:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3776:	8d 81       	ldd	r24, Y+5	; 0x05
    3778:	9e 81       	ldd	r25, Y+6	; 0x06
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	9e 83       	std	Y+6, r25	; 0x06
    377e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3780:	8d 81       	ldd	r24, Y+5	; 0x05
    3782:	9e 81       	ldd	r25, Y+6	; 0x06
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	69 f7       	brne	.-38     	; 0x3762 <KEYPAD_getPressedKey+0x168>
    3788:	14 c0       	rjmp	.+40     	; 0x37b2 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378a:	6f 81       	ldd	r22, Y+7	; 0x07
    378c:	78 85       	ldd	r23, Y+8	; 0x08
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	9a 81       	ldd	r25, Y+2	; 0x02
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <KEYPAD_getPressedKey+0x1b0>
    37ae:	9a 83       	std	Y+2, r25	; 0x02
    37b0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS ; row++)
    37b2:	88 89       	ldd	r24, Y+16	; 0x10
    37b4:	8f 5f       	subi	r24, 0xFF	; 255
    37b6:	88 8b       	std	Y+16, r24	; 0x10
    37b8:	88 89       	ldd	r24, Y+16	; 0x10
    37ba:	84 30       	cpi	r24, 0x04	; 4
    37bc:	08 f4       	brcc	.+2      	; 0x37c0 <KEYPAD_getPressedKey+0x1c6>
    37be:	51 cf       	rjmp	.-350    	; 0x3662 <KEYPAD_getPressedKey+0x68>
    37c0:	4e cf       	rjmp	.-356    	; 0x365e <KEYPAD_getPressedKey+0x64>

000037c2 <KEYPAD_4x4_adjustKeyNumber>:
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <KEYPAD_4x4_adjustKeyNumber+0x8>
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    37d0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	3c 83       	std	Y+4, r19	; 0x04
    37da:	2b 83       	std	Y+3, r18	; 0x03
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
    37de:	9c 81       	ldd	r25, Y+4	; 0x04
    37e0:	88 30       	cpi	r24, 0x08	; 8
    37e2:	91 05       	cpc	r25, r1
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    37e6:	70 c0       	rjmp	.+224    	; 0x38c8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    37e8:	2b 81       	ldd	r18, Y+3	; 0x03
    37ea:	3c 81       	ldd	r19, Y+4	; 0x04
    37ec:	29 30       	cpi	r18, 0x09	; 9
    37ee:	31 05       	cpc	r19, r1
    37f0:	5c f5       	brge	.+86     	; 0x3848 <KEYPAD_4x4_adjustKeyNumber+0x86>
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	84 30       	cpi	r24, 0x04	; 4
    37f8:	91 05       	cpc	r25, r1
    37fa:	09 f4       	brne	.+2      	; 0x37fe <KEYPAD_4x4_adjustKeyNumber+0x3c>
    37fc:	59 c0       	rjmp	.+178    	; 0x38b0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    37fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3800:	3c 81       	ldd	r19, Y+4	; 0x04
    3802:	25 30       	cpi	r18, 0x05	; 5
    3804:	31 05       	cpc	r19, r1
    3806:	9c f4       	brge	.+38     	; 0x382e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	9c 81       	ldd	r25, Y+4	; 0x04
    380c:	82 30       	cpi	r24, 0x02	; 2
    380e:	91 05       	cpc	r25, r1
    3810:	09 f4       	brne	.+2      	; 0x3814 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3812:	48 c0       	rjmp	.+144    	; 0x38a4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3814:	2b 81       	ldd	r18, Y+3	; 0x03
    3816:	3c 81       	ldd	r19, Y+4	; 0x04
    3818:	23 30       	cpi	r18, 0x03	; 3
    381a:	31 05       	cpc	r19, r1
    381c:	0c f0       	brlt	.+2      	; 0x3820 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    381e:	45 c0       	rjmp	.+138    	; 0x38aa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	81 30       	cpi	r24, 0x01	; 1
    3826:	91 05       	cpc	r25, r1
    3828:	09 f4       	brne	.+2      	; 0x382c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    382a:	39 c0       	rjmp	.+114    	; 0x389e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    382c:	67 c0       	rjmp	.+206    	; 0x38fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    382e:	2b 81       	ldd	r18, Y+3	; 0x03
    3830:	3c 81       	ldd	r19, Y+4	; 0x04
    3832:	26 30       	cpi	r18, 0x06	; 6
    3834:	31 05       	cpc	r19, r1
    3836:	09 f4       	brne	.+2      	; 0x383a <KEYPAD_4x4_adjustKeyNumber+0x78>
    3838:	41 c0       	rjmp	.+130    	; 0x38bc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	87 30       	cpi	r24, 0x07	; 7
    3840:	91 05       	cpc	r25, r1
    3842:	0c f0       	brlt	.+2      	; 0x3846 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3844:	3e c0       	rjmp	.+124    	; 0x38c2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3846:	37 c0       	rjmp	.+110    	; 0x38b6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3848:	2b 81       	ldd	r18, Y+3	; 0x03
    384a:	3c 81       	ldd	r19, Y+4	; 0x04
    384c:	2c 30       	cpi	r18, 0x0C	; 12
    384e:	31 05       	cpc	r19, r1
    3850:	09 f4       	brne	.+2      	; 0x3854 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3852:	46 c0       	rjmp	.+140    	; 0x38e0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3854:	8b 81       	ldd	r24, Y+3	; 0x03
    3856:	9c 81       	ldd	r25, Y+4	; 0x04
    3858:	8d 30       	cpi	r24, 0x0D	; 13
    385a:	91 05       	cpc	r25, r1
    385c:	5c f4       	brge	.+22     	; 0x3874 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    385e:	2b 81       	ldd	r18, Y+3	; 0x03
    3860:	3c 81       	ldd	r19, Y+4	; 0x04
    3862:	2a 30       	cpi	r18, 0x0A	; 10
    3864:	31 05       	cpc	r19, r1
    3866:	b1 f1       	breq	.+108    	; 0x38d4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	8b 30       	cpi	r24, 0x0B	; 11
    386e:	91 05       	cpc	r25, r1
    3870:	a4 f5       	brge	.+104    	; 0x38da <KEYPAD_4x4_adjustKeyNumber+0x118>
    3872:	2d c0       	rjmp	.+90     	; 0x38ce <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3874:	2b 81       	ldd	r18, Y+3	; 0x03
    3876:	3c 81       	ldd	r19, Y+4	; 0x04
    3878:	2e 30       	cpi	r18, 0x0E	; 14
    387a:	31 05       	cpc	r19, r1
    387c:	b9 f1       	breq	.+110    	; 0x38ec <KEYPAD_4x4_adjustKeyNumber+0x12a>
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	9c 81       	ldd	r25, Y+4	; 0x04
    3882:	8e 30       	cpi	r24, 0x0E	; 14
    3884:	91 05       	cpc	r25, r1
    3886:	7c f1       	brlt	.+94     	; 0x38e6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3888:	2b 81       	ldd	r18, Y+3	; 0x03
    388a:	3c 81       	ldd	r19, Y+4	; 0x04
    388c:	2f 30       	cpi	r18, 0x0F	; 15
    388e:	31 05       	cpc	r19, r1
    3890:	79 f1       	breq	.+94     	; 0x38f0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	80 31       	cpi	r24, 0x10	; 16
    3898:	91 05       	cpc	r25, r1
    389a:	69 f1       	breq	.+90     	; 0x38f6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    389c:	2f c0       	rjmp	.+94     	; 0x38fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    389e:	87 e0       	ldi	r24, 0x07	; 7
    38a0:	89 83       	std	Y+1, r24	; 0x01
    38a2:	2e c0       	rjmp	.+92     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 2: keypad_button = 8;
    38a4:	88 e0       	ldi	r24, 0x08	; 8
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	2b c0       	rjmp	.+86     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 3: keypad_button = 9;
    38aa:	89 e0       	ldi	r24, 0x09	; 9
    38ac:	89 83       	std	Y+1, r24	; 0x01
    38ae:	28 c0       	rjmp	.+80     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 4: keypad_button = '%'; // ASCII Code of %
    38b0:	85 e2       	ldi	r24, 0x25	; 37
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	25 c0       	rjmp	.+74     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 5: keypad_button = 4;
    38b6:	84 e0       	ldi	r24, 0x04	; 4
    38b8:	89 83       	std	Y+1, r24	; 0x01
    38ba:	22 c0       	rjmp	.+68     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 6: keypad_button = 5;
    38bc:	85 e0       	ldi	r24, 0x05	; 5
    38be:	89 83       	std	Y+1, r24	; 0x01
    38c0:	1f c0       	rjmp	.+62     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 7: keypad_button = 6;
    38c2:	86 e0       	ldi	r24, 0x06	; 6
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	1c c0       	rjmp	.+56     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 8: keypad_button = '*'; /* ASCII Code of '*' */
    38c8:	8a e2       	ldi	r24, 0x2A	; 42
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	19 c0       	rjmp	.+50     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 9: keypad_button = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	16 c0       	rjmp	.+44     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 10: keypad_button = 2;
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	13 c0       	rjmp	.+38     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 11: keypad_button = 3;
    38da:	83 e0       	ldi	r24, 0x03	; 3
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	10 c0       	rjmp	.+32     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 12: keypad_button = '-'; /* ASCII Code of '-' */
    38e0:	8d e2       	ldi	r24, 0x2D	; 45
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	0d c0       	rjmp	.+26     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 13: keypad_button = 13;  /* ASCII of Enter */
    38e6:	8d e0       	ldi	r24, 0x0D	; 13
    38e8:	89 83       	std	Y+1, r24	; 0x01
    38ea:	0a c0       	rjmp	.+20     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 14: keypad_button = 0;
    38ec:	19 82       	std	Y+1, r1	; 0x01
    38ee:	08 c0       	rjmp	.+16     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 15: keypad_button = '='; /* ASCII Code of '=' */
    38f0:	8d e3       	ldi	r24, 0x3D	; 61
    38f2:	89 83       	std	Y+1, r24	; 0x01
    38f4:	05 c0       	rjmp	.+10     	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 16: keypad_button = '+'; /* ASCII Code of '+' */
    38f6:	8b e2       	ldi	r24, 0x2B	; 43
    38f8:	89 83       	std	Y+1, r24	; 0x01
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			default: keypad_button = button_number;
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	89 83       	std	Y+1, r24	; 0x01
					break;



	}
	return keypad_button;
    3900:	89 81       	ldd	r24, Y+1	; 0x01

}
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <LCD_init>:


/****************    Functions Definitions *******************/

void LCD_init(void)
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	2e 97       	sbiw	r28, 0x0e	; 14
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	f8 94       	cli
    391e:	de bf       	out	0x3e, r29	; 62
    3920:	0f be       	out	0x3f, r0	; 63
    3922:	cd bf       	out	0x3d, r28	; 61
	/*set direction of screen pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT); /*LCD RS*/
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	41 e0       	ldi	r20, 0x01	; 1
    392a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);  /*LCD E*/
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	63 e0       	ldi	r22, 0x03	; 3
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <GPIO_setupPinDirection>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	a0 ea       	ldi	r26, 0xA0	; 160
    393e:	b1 e4       	ldi	r27, 0x41	; 65
    3940:	8b 87       	std	Y+11, r24	; 0x0b
    3942:	9c 87       	std	Y+12, r25	; 0x0c
    3944:	ad 87       	std	Y+13, r26	; 0x0d
    3946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	6b 85       	ldd	r22, Y+11	; 0x0b
    394a:	7c 85       	ldd	r23, Y+12	; 0x0c
    394c:	8d 85       	ldd	r24, Y+13	; 0x0d
    394e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a ef       	ldi	r20, 0xFA	; 250
    3956:	54 e4       	ldi	r21, 0x44	; 68
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8f 83       	std	Y+7, r24	; 0x07
    3962:	98 87       	std	Y+8, r25	; 0x08
    3964:	a9 87       	std	Y+9, r26	; 0x09
    3966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <LCD_init+0x7a>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <LCD_init+0xf8>
	else if (__tmp > 65535)
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <LCD_init+0xda>
    39cc:	88 ec       	ldi	r24, 0xC8	; 200
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	9c 81       	ldd	r25, Y+4	; 0x04
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <LCD_init+0xc8>
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	9e 81       	ldd	r25, Y+6	; 0x06
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <LCD_init+0xbc>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9e 83       	std	Y+6, r25	; 0x06
    3a06:	8d 83       	std	Y+5, r24	; 0x05
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <LCD_init+0x104>
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01

		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID ,PORT_OUTPUT);  /*data port*/
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	6f ef       	ldi	r22, 0xFF	; 255
    3a20:	0e 94 30 1a 	call	0x3460	; 0x3460 <GPIO_setupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3a24:	88 e3       	ldi	r24, 0x38	; 56
    3a26:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LCD_sendCommand>
#endif


	/*5*7 dot display Mode */
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3a2a:	8c e0       	ldi	r24, 0x0C	; 12
    3a2c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LCD_sendCommand>

}
    3a36:	2e 96       	adiw	r28, 0x0e	; 14
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	08 95       	ret

00003a48 <LCD_sendCommand>:

/**********************************************************************/


void LCD_sendCommand(uint8 command)
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	e9 97       	sbiw	r28, 0x39	; 57
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_LOW);   /* write zero to RS pin to send instruction*/
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	62 e0       	ldi	r22, 0x02	; 2
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e8       	ldi	r26, 0x80	; 128
    3a6e:	bf e3       	ldi	r27, 0x3F	; 63
    3a70:	8d ab       	std	Y+53, r24	; 0x35
    3a72:	9e ab       	std	Y+54, r25	; 0x36
    3a74:	af ab       	std	Y+55, r26	; 0x37
    3a76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	6d a9       	ldd	r22, Y+53	; 0x35
    3a7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a ef       	ldi	r20, 0xFA	; 250
    3a86:	54 e4       	ldi	r21, 0x44	; 68
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	89 ab       	std	Y+49, r24	; 0x31
    3a92:	9a ab       	std	Y+50, r25	; 0x32
    3a94:	ab ab       	std	Y+51, r26	; 0x33
    3a96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a98:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	2c f4       	brge	.+10     	; 0x3aba <LCD_sendCommand+0x72>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	98 ab       	std	Y+48, r25	; 0x30
    3ab6:	8f a7       	std	Y+47, r24	; 0x2f
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3aba:	69 a9       	ldd	r22, Y+49	; 0x31
    3abc:	7a a9       	ldd	r23, Y+50	; 0x32
    3abe:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	4c f5       	brge	.+82     	; 0x3b24 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ad4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ad6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ad8:	98 ad       	ldd	r25, Y+56	; 0x38
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	98 ab       	std	Y+48, r25	; 0x30
    3af8:	8f a7       	std	Y+47, r24	; 0x2f
    3afa:	0f c0       	rjmp	.+30     	; 0x3b1a <LCD_sendCommand+0xd2>
    3afc:	88 ec       	ldi	r24, 0xC8	; 200
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9e a7       	std	Y+46, r25	; 0x2e
    3b02:	8d a7       	std	Y+45, r24	; 0x2d
    3b04:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b06:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <LCD_sendCommand+0xc0>
    3b0c:	9e a7       	std	Y+46, r25	; 0x2e
    3b0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b12:	98 a9       	ldd	r25, Y+48	; 0x30
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	98 ab       	std	Y+48, r25	; 0x30
    3b18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	69 f7       	brne	.-38     	; 0x3afc <LCD_sendCommand+0xb4>
    3b22:	14 c0       	rjmp	.+40     	; 0x3b4c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	69 a9       	ldd	r22, Y+49	; 0x31
    3b26:	7a a9       	ldd	r23, Y+50	; 0x32
    3b28:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	98 ab       	std	Y+48, r25	; 0x30
    3b36:	8f a7       	std	Y+47, r24	; 0x2f
    3b38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b3c:	9c a7       	std	Y+44, r25	; 0x2c
    3b3e:	8b a7       	std	Y+43, r24	; 0x2b
    3b40:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b42:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <LCD_sendCommand+0xfc>
    3b48:	9c a7       	std	Y+44, r25	; 0x2c
    3b4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to enable pin*/
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	63 e0       	ldi	r22, 0x03	; 3
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e8       	ldi	r26, 0x80	; 128
    3b5c:	bf e3       	ldi	r27, 0x3F	; 63
    3b5e:	8f a3       	std	Y+39, r24	; 0x27
    3b60:	98 a7       	std	Y+40, r25	; 0x28
    3b62:	a9 a7       	std	Y+41, r26	; 0x29
    3b64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b66:	6f a1       	ldd	r22, Y+39	; 0x27
    3b68:	78 a5       	ldd	r23, Y+40	; 0x28
    3b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	4a ef       	ldi	r20, 0xFA	; 250
    3b74:	54 e4       	ldi	r21, 0x44	; 68
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	8b a3       	std	Y+35, r24	; 0x23
    3b80:	9c a3       	std	Y+36, r25	; 0x24
    3b82:	ad a3       	std	Y+37, r26	; 0x25
    3b84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b86:	6b a1       	ldd	r22, Y+35	; 0x23
    3b88:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	40 e8       	ldi	r20, 0x80	; 128
    3b94:	5f e3       	ldi	r21, 0x3F	; 63
    3b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b9a:	88 23       	and	r24, r24
    3b9c:	2c f4       	brge	.+10     	; 0x3ba8 <LCD_sendCommand+0x160>
		__ticks = 1;
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9a a3       	std	Y+34, r25	; 0x22
    3ba4:	89 a3       	std	Y+33, r24	; 0x21
    3ba6:	3f c0       	rjmp	.+126    	; 0x3c26 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    3baa:	7c a1       	ldd	r23, Y+36	; 0x24
    3bac:	8d a1       	ldd	r24, Y+37	; 0x25
    3bae:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	3f ef       	ldi	r19, 0xFF	; 255
    3bb4:	4f e7       	ldi	r20, 0x7F	; 127
    3bb6:	57 e4       	ldi	r21, 0x47	; 71
    3bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bbc:	18 16       	cp	r1, r24
    3bbe:	4c f5       	brge	.+82     	; 0x3c12 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e2       	ldi	r20, 0x20	; 32
    3bce:	51 e4       	ldi	r21, 0x41	; 65
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9a a3       	std	Y+34, r25	; 0x22
    3be6:	89 a3       	std	Y+33, r24	; 0x21
    3be8:	0f c0       	rjmp	.+30     	; 0x3c08 <LCD_sendCommand+0x1c0>
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	98 a3       	std	Y+32, r25	; 0x20
    3bf0:	8f 8f       	std	Y+31, r24	; 0x1f
    3bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <LCD_sendCommand+0x1ae>
    3bfa:	98 a3       	std	Y+32, r25	; 0x20
    3bfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3c00:	9a a1       	ldd	r25, Y+34	; 0x22
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	9a a3       	std	Y+34, r25	; 0x22
    3c06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	89 a1       	ldd	r24, Y+33	; 0x21
    3c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	69 f7       	brne	.-38     	; 0x3bea <LCD_sendCommand+0x1a2>
    3c10:	14 c0       	rjmp	.+40     	; 0x3c3a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c12:	6b a1       	ldd	r22, Y+35	; 0x23
    3c14:	7c a1       	ldd	r23, Y+36	; 0x24
    3c16:	8d a1       	ldd	r24, Y+37	; 0x25
    3c18:	9e a1       	ldd	r25, Y+38	; 0x26
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	9a a3       	std	Y+34, r25	; 0x22
    3c24:	89 a3       	std	Y+33, r24	; 0x21
    3c26:	89 a1       	ldd	r24, Y+33	; 0x21
    3c28:	9a a1       	ldd	r25, Y+34	; 0x22
    3c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <LCD_sendCommand+0x1ea>
    3c36:	9e 8f       	std	Y+30, r25	; 0x1e
    3c38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,command);   /*send command to screen*/
    3c3a:	82 e0       	ldi	r24, 0x02	; 2
    3c3c:	69 ad       	ldd	r22, Y+57	; 0x39
    3c3e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GPIO_writePort>
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	a0 e8       	ldi	r26, 0x80	; 128
    3c48:	bf e3       	ldi	r27, 0x3F	; 63
    3c4a:	89 8f       	std	Y+25, r24	; 0x19
    3c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    3c4e:	ab 8f       	std	Y+27, r26	; 0x1b
    3c50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c52:	69 8d       	ldd	r22, Y+25	; 0x19
    3c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a ef       	ldi	r20, 0xFA	; 250
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	8d 8b       	std	Y+21, r24	; 0x15
    3c6c:	9e 8b       	std	Y+22, r25	; 0x16
    3c6e:	af 8b       	std	Y+23, r26	; 0x17
    3c70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c72:	6d 89       	ldd	r22, Y+21	; 0x15
    3c74:	7e 89       	ldd	r23, Y+22	; 0x16
    3c76:	8f 89       	ldd	r24, Y+23	; 0x17
    3c78:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e8       	ldi	r20, 0x80	; 128
    3c80:	5f e3       	ldi	r21, 0x3F	; 63
    3c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c86:	88 23       	and	r24, r24
    3c88:	2c f4       	brge	.+10     	; 0x3c94 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	9c 8b       	std	Y+20, r25	; 0x14
    3c90:	8b 8b       	std	Y+19, r24	; 0x13
    3c92:	3f c0       	rjmp	.+126    	; 0x3d12 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3c94:	6d 89       	ldd	r22, Y+21	; 0x15
    3c96:	7e 89       	ldd	r23, Y+22	; 0x16
    3c98:	8f 89       	ldd	r24, Y+23	; 0x17
    3c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ca0:	4f e7       	ldi	r20, 0x7F	; 127
    3ca2:	57 e4       	ldi	r21, 0x47	; 71
    3ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ca8:	18 16       	cp	r1, r24
    3caa:	4c f5       	brge	.+82     	; 0x3cfe <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cac:	69 8d       	ldd	r22, Y+25	; 0x19
    3cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e2       	ldi	r20, 0x20	; 32
    3cba:	51 e4       	ldi	r21, 0x41	; 65
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	9c 8b       	std	Y+20, r25	; 0x14
    3cd2:	8b 8b       	std	Y+19, r24	; 0x13
    3cd4:	0f c0       	rjmp	.+30     	; 0x3cf4 <LCD_sendCommand+0x2ac>
    3cd6:	88 ec       	ldi	r24, 0xC8	; 200
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	9a 8b       	std	Y+18, r25	; 0x12
    3cdc:	89 8b       	std	Y+17, r24	; 0x11
    3cde:	89 89       	ldd	r24, Y+17	; 0x11
    3ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <LCD_sendCommand+0x29a>
    3ce6:	9a 8b       	std	Y+18, r25	; 0x12
    3ce8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cea:	8b 89       	ldd	r24, Y+19	; 0x13
    3cec:	9c 89       	ldd	r25, Y+20	; 0x14
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	9c 8b       	std	Y+20, r25	; 0x14
    3cf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	69 f7       	brne	.-38     	; 0x3cd6 <LCD_sendCommand+0x28e>
    3cfc:	14 c0       	rjmp	.+40     	; 0x3d26 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3d00:	7e 89       	ldd	r23, Y+22	; 0x16
    3d02:	8f 89       	ldd	r24, Y+23	; 0x17
    3d04:	98 8d       	ldd	r25, Y+24	; 0x18
    3d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	9c 8b       	std	Y+20, r25	; 0x14
    3d10:	8b 8b       	std	Y+19, r24	; 0x13
    3d12:	8b 89       	ldd	r24, Y+19	; 0x13
    3d14:	9c 89       	ldd	r25, Y+20	; 0x14
    3d16:	98 8b       	std	Y+16, r25	; 0x10
    3d18:	8f 87       	std	Y+15, r24	; 0x0f
    3d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d1c:	98 89       	ldd	r25, Y+16	; 0x10
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <LCD_sendCommand+0x2d6>
    3d22:	98 8b       	std	Y+16, r25	; 0x10
    3d24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	63 e0       	ldi	r22, 0x03	; 3
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	a0 e8       	ldi	r26, 0x80	; 128
    3d36:	bf e3       	ldi	r27, 0x3F	; 63
    3d38:	8b 87       	std	Y+11, r24	; 0x0b
    3d3a:	9c 87       	std	Y+12, r25	; 0x0c
    3d3c:	ad 87       	std	Y+13, r26	; 0x0d
    3d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	4a ef       	ldi	r20, 0xFA	; 250
    3d4e:	54 e4       	ldi	r21, 0x44	; 68
    3d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	8f 83       	std	Y+7, r24	; 0x07
    3d5a:	98 87       	std	Y+8, r25	; 0x08
    3d5c:	a9 87       	std	Y+9, r26	; 0x09
    3d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d60:	6f 81       	ldd	r22, Y+7	; 0x07
    3d62:	78 85       	ldd	r23, Y+8	; 0x08
    3d64:	89 85       	ldd	r24, Y+9	; 0x09
    3d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	40 e8       	ldi	r20, 0x80	; 128
    3d6e:	5f e3       	ldi	r21, 0x3F	; 63
    3d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d74:	88 23       	and	r24, r24
    3d76:	2c f4       	brge	.+10     	; 0x3d82 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	3f c0       	rjmp	.+126    	; 0x3e00 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3d82:	6f 81       	ldd	r22, Y+7	; 0x07
    3d84:	78 85       	ldd	r23, Y+8	; 0x08
    3d86:	89 85       	ldd	r24, Y+9	; 0x09
    3d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	3f ef       	ldi	r19, 0xFF	; 255
    3d8e:	4f e7       	ldi	r20, 0x7F	; 127
    3d90:	57 e4       	ldi	r21, 0x47	; 71
    3d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d96:	18 16       	cp	r1, r24
    3d98:	4c f5       	brge	.+82     	; 0x3dec <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e2       	ldi	r20, 0x20	; 32
    3da8:	51 e4       	ldi	r21, 0x41	; 65
    3daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	bc 01       	movw	r22, r24
    3db4:	cd 01       	movw	r24, r26
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	0f c0       	rjmp	.+30     	; 0x3de2 <LCD_sendCommand+0x39a>
    3dc4:	88 ec       	ldi	r24, 0xC8	; 200
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	9c 83       	std	Y+4, r25	; 0x04
    3dca:	8b 83       	std	Y+3, r24	; 0x03
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <LCD_sendCommand+0x388>
    3dd4:	9c 83       	std	Y+4, r25	; 0x04
    3dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de2:	8d 81       	ldd	r24, Y+5	; 0x05
    3de4:	9e 81       	ldd	r25, Y+6	; 0x06
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	69 f7       	brne	.-38     	; 0x3dc4 <LCD_sendCommand+0x37c>
    3dea:	14 c0       	rjmp	.+40     	; 0x3e14 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dec:	6f 81       	ldd	r22, Y+7	; 0x07
    3dee:	78 85       	ldd	r23, Y+8	; 0x08
    3df0:	89 85       	ldd	r24, Y+9	; 0x09
    3df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	9e 83       	std	Y+6, r25	; 0x06
    3dfe:	8d 83       	std	Y+5, r24	; 0x05
    3e00:	8d 81       	ldd	r24, Y+5	; 0x05
    3e02:	9e 81       	ldd	r25, Y+6	; 0x06
    3e04:	9a 83       	std	Y+2, r25	; 0x02
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	f1 f7       	brne	.-4      	; 0x3e0c <LCD_sendCommand+0x3c4>
    3e10:	9a 83       	std	Y+2, r25	; 0x02
    3e12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif

}
    3e14:	e9 96       	adiw	r28, 0x39	; 57
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <LCD_displayCharacter>:

/**********************************************************************/


void LCD_displayCharacter(uint8 character)
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	e9 97       	sbiw	r28, 0x39	; 57
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_HIGH);   /* write 1 to RS pin to send DATA*/
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	62 e0       	ldi	r22, 0x02	; 2
    3e40:	41 e0       	ldi	r20, 0x01	; 1
    3e42:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	a0 e8       	ldi	r26, 0x80	; 128
    3e4c:	bf e3       	ldi	r27, 0x3F	; 63
    3e4e:	8d ab       	std	Y+53, r24	; 0x35
    3e50:	9e ab       	std	Y+54, r25	; 0x36
    3e52:	af ab       	std	Y+55, r26	; 0x37
    3e54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e56:	6d a9       	ldd	r22, Y+53	; 0x35
    3e58:	7e a9       	ldd	r23, Y+54	; 0x36
    3e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    3e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	4a ef       	ldi	r20, 0xFA	; 250
    3e64:	54 e4       	ldi	r21, 0x44	; 68
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	89 ab       	std	Y+49, r24	; 0x31
    3e70:	9a ab       	std	Y+50, r25	; 0x32
    3e72:	ab ab       	std	Y+51, r26	; 0x33
    3e74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e76:	69 a9       	ldd	r22, Y+49	; 0x31
    3e78:	7a a9       	ldd	r23, Y+50	; 0x32
    3e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	5f e3       	ldi	r21, 0x3F	; 63
    3e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e8a:	88 23       	and	r24, r24
    3e8c:	2c f4       	brge	.+10     	; 0x3e98 <LCD_displayCharacter+0x72>
		__ticks = 1;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	98 ab       	std	Y+48, r25	; 0x30
    3e94:	8f a7       	std	Y+47, r24	; 0x2f
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3e98:	69 a9       	ldd	r22, Y+49	; 0x31
    3e9a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	3f ef       	ldi	r19, 0xFF	; 255
    3ea4:	4f e7       	ldi	r20, 0x7F	; 127
    3ea6:	57 e4       	ldi	r21, 0x47	; 71
    3ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eac:	18 16       	cp	r1, r24
    3eae:	4c f5       	brge	.+82     	; 0x3f02 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb0:	6d a9       	ldd	r22, Y+53	; 0x35
    3eb2:	7e a9       	ldd	r23, Y+54	; 0x36
    3eb4:	8f a9       	ldd	r24, Y+55	; 0x37
    3eb6:	98 ad       	ldd	r25, Y+56	; 0x38
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e2       	ldi	r20, 0x20	; 32
    3ebe:	51 e4       	ldi	r21, 0x41	; 65
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	98 ab       	std	Y+48, r25	; 0x30
    3ed6:	8f a7       	std	Y+47, r24	; 0x2f
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <LCD_displayCharacter+0xd2>
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	9e a7       	std	Y+46, r25	; 0x2e
    3ee0:	8d a7       	std	Y+45, r24	; 0x2d
    3ee2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ee4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <LCD_displayCharacter+0xc0>
    3eea:	9e a7       	std	Y+46, r25	; 0x2e
    3eec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	98 ab       	std	Y+48, r25	; 0x30
    3ef6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3efa:	98 a9       	ldd	r25, Y+48	; 0x30
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	69 f7       	brne	.-38     	; 0x3eda <LCD_displayCharacter+0xb4>
    3f00:	14 c0       	rjmp	.+40     	; 0x3f2a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	69 a9       	ldd	r22, Y+49	; 0x31
    3f04:	7a a9       	ldd	r23, Y+50	; 0x32
    3f06:	8b a9       	ldd	r24, Y+51	; 0x33
    3f08:	9c a9       	ldd	r25, Y+52	; 0x34
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	98 ab       	std	Y+48, r25	; 0x30
    3f14:	8f a7       	std	Y+47, r24	; 0x2f
    3f16:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f18:	98 a9       	ldd	r25, Y+48	; 0x30
    3f1a:	9c a7       	std	Y+44, r25	; 0x2c
    3f1c:	8b a7       	std	Y+43, r24	; 0x2b
    3f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <LCD_displayCharacter+0xfc>
    3f26:	9c a7       	std	Y+44, r25	; 0x2c
    3f28:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to  E enable pin*/
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	63 e0       	ldi	r22, 0x03	; 3
    3f2e:	41 e0       	ldi	r20, 0x01	; 1
    3f30:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	a0 e8       	ldi	r26, 0x80	; 128
    3f3a:	bf e3       	ldi	r27, 0x3F	; 63
    3f3c:	8f a3       	std	Y+39, r24	; 0x27
    3f3e:	98 a7       	std	Y+40, r25	; 0x28
    3f40:	a9 a7       	std	Y+41, r26	; 0x29
    3f42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f44:	6f a1       	ldd	r22, Y+39	; 0x27
    3f46:	78 a5       	ldd	r23, Y+40	; 0x28
    3f48:	89 a5       	ldd	r24, Y+41	; 0x29
    3f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	4a ef       	ldi	r20, 0xFA	; 250
    3f52:	54 e4       	ldi	r21, 0x44	; 68
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	8b a3       	std	Y+35, r24	; 0x23
    3f5e:	9c a3       	std	Y+36, r25	; 0x24
    3f60:	ad a3       	std	Y+37, r26	; 0x25
    3f62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f64:	6b a1       	ldd	r22, Y+35	; 0x23
    3f66:	7c a1       	ldd	r23, Y+36	; 0x24
    3f68:	8d a1       	ldd	r24, Y+37	; 0x25
    3f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e8       	ldi	r20, 0x80	; 128
    3f72:	5f e3       	ldi	r21, 0x3F	; 63
    3f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f78:	88 23       	and	r24, r24
    3f7a:	2c f4       	brge	.+10     	; 0x3f86 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	9a a3       	std	Y+34, r25	; 0x22
    3f82:	89 a3       	std	Y+33, r24	; 0x21
    3f84:	3f c0       	rjmp	.+126    	; 0x4004 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3f86:	6b a1       	ldd	r22, Y+35	; 0x23
    3f88:	7c a1       	ldd	r23, Y+36	; 0x24
    3f8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	3f ef       	ldi	r19, 0xFF	; 255
    3f92:	4f e7       	ldi	r20, 0x7F	; 127
    3f94:	57 e4       	ldi	r21, 0x47	; 71
    3f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f9a:	18 16       	cp	r1, r24
    3f9c:	4c f5       	brge	.+82     	; 0x3ff0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9e:	6f a1       	ldd	r22, Y+39	; 0x27
    3fa0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fa2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9a a3       	std	Y+34, r25	; 0x22
    3fc4:	89 a3       	std	Y+33, r24	; 0x21
    3fc6:	0f c0       	rjmp	.+30     	; 0x3fe6 <LCD_displayCharacter+0x1c0>
    3fc8:	88 ec       	ldi	r24, 0xC8	; 200
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	98 a3       	std	Y+32, r25	; 0x20
    3fce:	8f 8f       	std	Y+31, r24	; 0x1f
    3fd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fd2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <LCD_displayCharacter+0x1ae>
    3fd8:	98 a3       	std	Y+32, r25	; 0x20
    3fda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fdc:	89 a1       	ldd	r24, Y+33	; 0x21
    3fde:	9a a1       	ldd	r25, Y+34	; 0x22
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	9a a3       	std	Y+34, r25	; 0x22
    3fe4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe6:	89 a1       	ldd	r24, Y+33	; 0x21
    3fe8:	9a a1       	ldd	r25, Y+34	; 0x22
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	69 f7       	brne	.-38     	; 0x3fc8 <LCD_displayCharacter+0x1a2>
    3fee:	14 c0       	rjmp	.+40     	; 0x4018 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	9a a3       	std	Y+34, r25	; 0x22
    4002:	89 a3       	std	Y+33, r24	; 0x21
    4004:	89 a1       	ldd	r24, Y+33	; 0x21
    4006:	9a a1       	ldd	r25, Y+34	; 0x22
    4008:	9e 8f       	std	Y+30, r25	; 0x1e
    400a:	8d 8f       	std	Y+29, r24	; 0x1d
    400c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    400e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	f1 f7       	brne	.-4      	; 0x4010 <LCD_displayCharacter+0x1ea>
    4014:	9e 8f       	std	Y+30, r25	; 0x1e
    4016:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,character);   /*send command to screen*/
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	69 ad       	ldd	r22, Y+57	; 0x39
    401c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <GPIO_writePort>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	a0 e8       	ldi	r26, 0x80	; 128
    4026:	bf e3       	ldi	r27, 0x3F	; 63
    4028:	89 8f       	std	Y+25, r24	; 0x19
    402a:	9a 8f       	std	Y+26, r25	; 0x1a
    402c:	ab 8f       	std	Y+27, r26	; 0x1b
    402e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4030:	69 8d       	ldd	r22, Y+25	; 0x19
    4032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	4a ef       	ldi	r20, 0xFA	; 250
    403e:	54 e4       	ldi	r21, 0x44	; 68
    4040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	8d 8b       	std	Y+21, r24	; 0x15
    404a:	9e 8b       	std	Y+22, r25	; 0x16
    404c:	af 8b       	std	Y+23, r26	; 0x17
    404e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4050:	6d 89       	ldd	r22, Y+21	; 0x15
    4052:	7e 89       	ldd	r23, Y+22	; 0x16
    4054:	8f 89       	ldd	r24, Y+23	; 0x17
    4056:	98 8d       	ldd	r25, Y+24	; 0x18
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4064:	88 23       	and	r24, r24
    4066:	2c f4       	brge	.+10     	; 0x4072 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	9c 8b       	std	Y+20, r25	; 0x14
    406e:	8b 8b       	std	Y+19, r24	; 0x13
    4070:	3f c0       	rjmp	.+126    	; 0x40f0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4072:	6d 89       	ldd	r22, Y+21	; 0x15
    4074:	7e 89       	ldd	r23, Y+22	; 0x16
    4076:	8f 89       	ldd	r24, Y+23	; 0x17
    4078:	98 8d       	ldd	r25, Y+24	; 0x18
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	3f ef       	ldi	r19, 0xFF	; 255
    407e:	4f e7       	ldi	r20, 0x7F	; 127
    4080:	57 e4       	ldi	r21, 0x47	; 71
    4082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4086:	18 16       	cp	r1, r24
    4088:	4c f5       	brge	.+82     	; 0x40dc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408a:	69 8d       	ldd	r22, Y+25	; 0x19
    408c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    408e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e2       	ldi	r20, 0x20	; 32
    4098:	51 e4       	ldi	r21, 0x41	; 65
    409a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9c 8b       	std	Y+20, r25	; 0x14
    40b0:	8b 8b       	std	Y+19, r24	; 0x13
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <LCD_displayCharacter+0x2ac>
    40b4:	88 ec       	ldi	r24, 0xC8	; 200
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	9a 8b       	std	Y+18, r25	; 0x12
    40ba:	89 8b       	std	Y+17, r24	; 0x11
    40bc:	89 89       	ldd	r24, Y+17	; 0x11
    40be:	9a 89       	ldd	r25, Y+18	; 0x12
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <LCD_displayCharacter+0x29a>
    40c4:	9a 8b       	std	Y+18, r25	; 0x12
    40c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	8b 89       	ldd	r24, Y+19	; 0x13
    40ca:	9c 89       	ldd	r25, Y+20	; 0x14
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	9c 8b       	std	Y+20, r25	; 0x14
    40d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	8b 89       	ldd	r24, Y+19	; 0x13
    40d4:	9c 89       	ldd	r25, Y+20	; 0x14
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	69 f7       	brne	.-38     	; 0x40b4 <LCD_displayCharacter+0x28e>
    40da:	14 c0       	rjmp	.+40     	; 0x4104 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	6d 89       	ldd	r22, Y+21	; 0x15
    40de:	7e 89       	ldd	r23, Y+22	; 0x16
    40e0:	8f 89       	ldd	r24, Y+23	; 0x17
    40e2:	98 8d       	ldd	r25, Y+24	; 0x18
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	9c 8b       	std	Y+20, r25	; 0x14
    40ee:	8b 8b       	std	Y+19, r24	; 0x13
    40f0:	8b 89       	ldd	r24, Y+19	; 0x13
    40f2:	9c 89       	ldd	r25, Y+20	; 0x14
    40f4:	98 8b       	std	Y+16, r25	; 0x10
    40f6:	8f 87       	std	Y+15, r24	; 0x0f
    40f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fa:	98 89       	ldd	r25, Y+16	; 0x10
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <LCD_displayCharacter+0x2d6>
    4100:	98 8b       	std	Y+16, r25	; 0x10
    4102:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	63 e0       	ldi	r22, 0x03	; 3
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	0e 94 aa 18 	call	0x3154	; 0x3154 <GPIO_writePin>
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	a0 e8       	ldi	r26, 0x80	; 128
    4114:	bf e3       	ldi	r27, 0x3F	; 63
    4116:	8b 87       	std	Y+11, r24	; 0x0b
    4118:	9c 87       	std	Y+12, r25	; 0x0c
    411a:	ad 87       	std	Y+13, r26	; 0x0d
    411c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4120:	7c 85       	ldd	r23, Y+12	; 0x0c
    4122:	8d 85       	ldd	r24, Y+13	; 0x0d
    4124:	9e 85       	ldd	r25, Y+14	; 0x0e
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	4a ef       	ldi	r20, 0xFA	; 250
    412c:	54 e4       	ldi	r21, 0x44	; 68
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	8f 83       	std	Y+7, r24	; 0x07
    4138:	98 87       	std	Y+8, r25	; 0x08
    413a:	a9 87       	std	Y+9, r26	; 0x09
    413c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e8       	ldi	r20, 0x80	; 128
    414c:	5f e3       	ldi	r21, 0x3F	; 63
    414e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4152:	88 23       	and	r24, r24
    4154:	2c f4       	brge	.+10     	; 0x4160 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	9e 83       	std	Y+6, r25	; 0x06
    415c:	8d 83       	std	Y+5, r24	; 0x05
    415e:	3f c0       	rjmp	.+126    	; 0x41de <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	4f e7       	ldi	r20, 0x7F	; 127
    416e:	57 e4       	ldi	r21, 0x47	; 71
    4170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4174:	18 16       	cp	r1, r24
    4176:	4c f5       	brge	.+82     	; 0x41ca <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4178:	6b 85       	ldd	r22, Y+11	; 0x0b
    417a:	7c 85       	ldd	r23, Y+12	; 0x0c
    417c:	8d 85       	ldd	r24, Y+13	; 0x0d
    417e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e2       	ldi	r20, 0x20	; 32
    4186:	51 e4       	ldi	r21, 0x41	; 65
    4188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9e 83       	std	Y+6, r25	; 0x06
    419e:	8d 83       	std	Y+5, r24	; 0x05
    41a0:	0f c0       	rjmp	.+30     	; 0x41c0 <LCD_displayCharacter+0x39a>
    41a2:	88 ec       	ldi	r24, 0xC8	; 200
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	9c 83       	std	Y+4, r25	; 0x04
    41a8:	8b 83       	std	Y+3, r24	; 0x03
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	9c 81       	ldd	r25, Y+4	; 0x04
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <LCD_displayCharacter+0x388>
    41b2:	9c 83       	std	Y+4, r25	; 0x04
    41b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	69 f7       	brne	.-38     	; 0x41a2 <LCD_displayCharacter+0x37c>
    41c8:	14 c0       	rjmp	.+40     	; 0x41f2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ca:	6f 81       	ldd	r22, Y+7	; 0x07
    41cc:	78 85       	ldd	r23, Y+8	; 0x08
    41ce:	89 85       	ldd	r24, Y+9	; 0x09
    41d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	8d 81       	ldd	r24, Y+5	; 0x05
    41e0:	9e 81       	ldd	r25, Y+6	; 0x06
    41e2:	9a 83       	std	Y+2, r25	; 0x02
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <LCD_displayCharacter+0x3c4>
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif


}
    41f2:	e9 96       	adiw	r28, 0x39	; 57
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <LCD_displayString>:

/**********************************************************************/

void LCD_displayString(const char *Str)
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	00 d0       	rcall	.+0      	; 0x420a <LCD_displayString+0x6>
    420a:	00 d0       	rcall	.+0      	; 0x420c <LCD_displayString+0x8>
    420c:	00 d0       	rcall	.+0      	; 0x420e <LCD_displayString+0xa>
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
	uint32 i=0;
    4216:	19 82       	std	Y+1, r1	; 0x01
    4218:	1a 82       	std	Y+2, r1	; 0x02
    421a:	1b 82       	std	Y+3, r1	; 0x03
    421c:	1c 82       	std	Y+4, r1	; 0x04
    421e:	15 c0       	rjmp	.+42     	; 0x424a <LCD_displayString+0x46>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4220:	29 81       	ldd	r18, Y+1	; 0x01
    4222:	3a 81       	ldd	r19, Y+2	; 0x02
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	9e 81       	ldd	r25, Y+6	; 0x06
    4228:	fc 01       	movw	r30, r24
    422a:	e2 0f       	add	r30, r18
    422c:	f3 1f       	adc	r31, r19
    422e:	80 81       	ld	r24, Z
    4230:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <LCD_displayCharacter>
		i++;
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	9a 81       	ldd	r25, Y+2	; 0x02
    4238:	ab 81       	ldd	r26, Y+3	; 0x03
    423a:	bc 81       	ldd	r27, Y+4	; 0x04
    423c:	01 96       	adiw	r24, 0x01	; 1
    423e:	a1 1d       	adc	r26, r1
    4240:	b1 1d       	adc	r27, r1
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	ab 83       	std	Y+3, r26	; 0x03
    4248:	bc 83       	std	Y+4, r27	; 0x04
/**********************************************************************/

void LCD_displayString(const char *Str)
{
	uint32 i=0;
	while(Str[i] != '\0')
    424a:	29 81       	ldd	r18, Y+1	; 0x01
    424c:	3a 81       	ldd	r19, Y+2	; 0x02
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	fc 01       	movw	r30, r24
    4254:	e2 0f       	add	r30, r18
    4256:	f3 1f       	adc	r31, r19
    4258:	80 81       	ld	r24, Z
    425a:	88 23       	and	r24, r24
    425c:	09 f7       	brne	.-62     	; 0x4220 <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    425e:	26 96       	adiw	r28, 0x06	; 6
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <LCD_moveCursor>:

/**********************************************************************/


void LCD_moveCursor(uint8 row,uint8 col)
{
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	00 d0       	rcall	.+0      	; 0x4276 <LCD_moveCursor+0x6>
    4276:	00 d0       	rcall	.+0      	; 0x4278 <LCD_moveCursor+0x8>
    4278:	0f 92       	push	r0
    427a:	cd b7       	in	r28, 0x3d	; 61
    427c:	de b7       	in	r29, 0x3e	; 62
    427e:	8a 83       	std	Y+2, r24	; 0x02
    4280:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	28 2f       	mov	r18, r24
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	3d 83       	std	Y+5, r19	; 0x05
    428a:	2c 83       	std	Y+4, r18	; 0x04
    428c:	8c 81       	ldd	r24, Y+4	; 0x04
    428e:	9d 81       	ldd	r25, Y+5	; 0x05
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	91 05       	cpc	r25, r1
    4294:	c1 f0       	breq	.+48     	; 0x42c6 <LCD_moveCursor+0x56>
    4296:	2c 81       	ldd	r18, Y+4	; 0x04
    4298:	3d 81       	ldd	r19, Y+5	; 0x05
    429a:	22 30       	cpi	r18, 0x02	; 2
    429c:	31 05       	cpc	r19, r1
    429e:	2c f4       	brge	.+10     	; 0x42aa <LCD_moveCursor+0x3a>
    42a0:	8c 81       	ldd	r24, Y+4	; 0x04
    42a2:	9d 81       	ldd	r25, Y+5	; 0x05
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	61 f0       	breq	.+24     	; 0x42c0 <LCD_moveCursor+0x50>
    42a8:	19 c0       	rjmp	.+50     	; 0x42dc <LCD_moveCursor+0x6c>
    42aa:	2c 81       	ldd	r18, Y+4	; 0x04
    42ac:	3d 81       	ldd	r19, Y+5	; 0x05
    42ae:	22 30       	cpi	r18, 0x02	; 2
    42b0:	31 05       	cpc	r19, r1
    42b2:	69 f0       	breq	.+26     	; 0x42ce <LCD_moveCursor+0x5e>
    42b4:	8c 81       	ldd	r24, Y+4	; 0x04
    42b6:	9d 81       	ldd	r25, Y+5	; 0x05
    42b8:	83 30       	cpi	r24, 0x03	; 3
    42ba:	91 05       	cpc	r25, r1
    42bc:	61 f0       	breq	.+24     	; 0x42d6 <LCD_moveCursor+0x66>
    42be:	0e c0       	rjmp	.+28     	; 0x42dc <LCD_moveCursor+0x6c>
	{
	case 0 : lcd_memory_address= col;break;
    42c0:	8b 81       	ldd	r24, Y+3	; 0x03
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	0b c0       	rjmp	.+22     	; 0x42dc <LCD_moveCursor+0x6c>
	case 1:  lcd_memory_address= col+0x40;break;
    42c6:	8b 81       	ldd	r24, Y+3	; 0x03
    42c8:	80 5c       	subi	r24, 0xC0	; 192
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	07 c0       	rjmp	.+14     	; 0x42dc <LCD_moveCursor+0x6c>
	case 2:  lcd_memory_address= col+0x10;break;
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	80 5f       	subi	r24, 0xF0	; 240
    42d2:	89 83       	std	Y+1, r24	; 0x01
    42d4:	03 c0       	rjmp	.+6      	; 0x42dc <LCD_moveCursor+0x6c>
	case 3:  lcd_memory_address= col+0x50;break;
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	80 5b       	subi	r24, 0xB0	; 176
    42da:	89 83       	std	Y+1, r24	; 0x01


	}

	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);  /*address of cursor the MSB always be 1*/
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	80 68       	ori	r24, 0x80	; 128
    42e0:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LCD_sendCommand>
	/*so thats why we made address or with 0x80*/


}
    42e4:	0f 90       	pop	r0
    42e6:	0f 90       	pop	r0
    42e8:	0f 90       	pop	r0
    42ea:	0f 90       	pop	r0
    42ec:	0f 90       	pop	r0
    42ee:	cf 91       	pop	r28
    42f0:	df 91       	pop	r29
    42f2:	08 95       	ret

000042f4 <LCD_displayStringRowColumn>:

/**********************************************************************/

void LCD_displayStringRowColumn(uint8 row , uint8 col,const char *str)
{
    42f4:	df 93       	push	r29
    42f6:	cf 93       	push	r28
    42f8:	00 d0       	rcall	.+0      	; 0x42fa <LCD_displayStringRowColumn+0x6>
    42fa:	00 d0       	rcall	.+0      	; 0x42fc <LCD_displayStringRowColumn+0x8>
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	89 83       	std	Y+1, r24	; 0x01
    4302:	6a 83       	std	Y+2, r22	; 0x02
    4304:	5c 83       	std	Y+4, r21	; 0x04
    4306:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);  /*required position*/
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	6a 81       	ldd	r22, Y+2	; 0x02
    430c:	0e 94 38 21 	call	0x4270	; 0x4270 <LCD_moveCursor>
	LCD_displayString(str);  /*display string/*/
    4310:	8b 81       	ldd	r24, Y+3	; 0x03
    4312:	9c 81       	ldd	r25, Y+4	; 0x04
    4314:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>

}
    4318:	0f 90       	pop	r0
    431a:	0f 90       	pop	r0
    431c:	0f 90       	pop	r0
    431e:	0f 90       	pop	r0
    4320:	cf 91       	pop	r28
    4322:	df 91       	pop	r29
    4324:	08 95       	ret

00004326 <LCD_intgerToString>:
/**********************************************************************/

void LCD_intgerToString(int data)
{
    4326:	df 93       	push	r29
    4328:	cf 93       	push	r28
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	62 97       	sbiw	r28, 0x12	; 18
    4330:	0f b6       	in	r0, 0x3f	; 63
    4332:	f8 94       	cli
    4334:	de bf       	out	0x3e, r29	; 62
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	cd bf       	out	0x3d, r28	; 61
    433a:	9a 8b       	std	Y+18, r25	; 0x12
    433c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    433e:	89 89       	ldd	r24, Y+17	; 0x11
    4340:	9a 89       	ldd	r25, Y+18	; 0x12
    4342:	9e 01       	movw	r18, r28
    4344:	2f 5f       	subi	r18, 0xFF	; 255
    4346:	3f 4f       	sbci	r19, 0xFF	; 255
    4348:	b9 01       	movw	r22, r18
    434a:	4a e0       	ldi	r20, 0x0A	; 10
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	0e 94 29 24 	call	0x4852	; 0x4852 <itoa>
	LCD_displayString(buff);
    4352:	ce 01       	movw	r24, r28
    4354:	01 96       	adiw	r24, 0x01	; 1
    4356:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_displayString>
}
    435a:	62 96       	adiw	r28, 0x12	; 18
    435c:	0f b6       	in	r0, 0x3f	; 63
    435e:	f8 94       	cli
    4360:	de bf       	out	0x3e, r29	; 62
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <LCD_clearScreen>:

/**********************************************************************/

void LCD_clearScreen(void)
{
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LCD_sendCommand>
}
    437a:	cf 91       	pop	r28
    437c:	df 91       	pop	r29
    437e:	08 95       	ret

00004380 <__vector_7>:

/************************  Interrupt Service Routines ****************************/

/*for CTC mode*/
ISR(TIMER1_COMPA_vect)
{
    4380:	1f 92       	push	r1
    4382:	0f 92       	push	r0
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	0f 92       	push	r0
    4388:	11 24       	eor	r1, r1
    438a:	2f 93       	push	r18
    438c:	3f 93       	push	r19
    438e:	4f 93       	push	r20
    4390:	5f 93       	push	r21
    4392:	6f 93       	push	r22
    4394:	7f 93       	push	r23
    4396:	8f 93       	push	r24
    4398:	9f 93       	push	r25
    439a:	af 93       	push	r26
    439c:	bf 93       	push	r27
    439e:	ef 93       	push	r30
    43a0:	ff 93       	push	r31
    43a2:	df 93       	push	r29
    43a4:	cf 93       	push	r28
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    43aa:	80 91 00 01 	lds	r24, 0x0100
    43ae:	90 91 01 01 	lds	r25, 0x0101
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	29 f0       	breq	.+10     	; 0x43c0 <__vector_7+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    43b6:	e0 91 00 01 	lds	r30, 0x0100
    43ba:	f0 91 01 01 	lds	r31, 0x0101
    43be:	09 95       	icall
	}


}
    43c0:	cf 91       	pop	r28
    43c2:	df 91       	pop	r29
    43c4:	ff 91       	pop	r31
    43c6:	ef 91       	pop	r30
    43c8:	bf 91       	pop	r27
    43ca:	af 91       	pop	r26
    43cc:	9f 91       	pop	r25
    43ce:	8f 91       	pop	r24
    43d0:	7f 91       	pop	r23
    43d2:	6f 91       	pop	r22
    43d4:	5f 91       	pop	r21
    43d6:	4f 91       	pop	r20
    43d8:	3f 91       	pop	r19
    43da:	2f 91       	pop	r18
    43dc:	0f 90       	pop	r0
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	0f 90       	pop	r0
    43e2:	1f 90       	pop	r1
    43e4:	18 95       	reti

000043e6 <__vector_9>:

/* for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    43e6:	1f 92       	push	r1
    43e8:	0f 92       	push	r0
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	0f 92       	push	r0
    43ee:	11 24       	eor	r1, r1
    43f0:	2f 93       	push	r18
    43f2:	3f 93       	push	r19
    43f4:	4f 93       	push	r20
    43f6:	5f 93       	push	r21
    43f8:	6f 93       	push	r22
    43fa:	7f 93       	push	r23
    43fc:	8f 93       	push	r24
    43fe:	9f 93       	push	r25
    4400:	af 93       	push	r26
    4402:	bf 93       	push	r27
    4404:	ef 93       	push	r30
    4406:	ff 93       	push	r31
    4408:	df 93       	push	r29
    440a:	cf 93       	push	r28
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    4410:	80 91 00 01 	lds	r24, 0x0100
    4414:	90 91 01 01 	lds	r25, 0x0101
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	29 f0       	breq	.+10     	; 0x4426 <__vector_9+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    441c:	e0 91 00 01 	lds	r30, 0x0100
    4420:	f0 91 01 01 	lds	r31, 0x0101
    4424:	09 95       	icall
	}

}
    4426:	cf 91       	pop	r28
    4428:	df 91       	pop	r29
    442a:	ff 91       	pop	r31
    442c:	ef 91       	pop	r30
    442e:	bf 91       	pop	r27
    4430:	af 91       	pop	r26
    4432:	9f 91       	pop	r25
    4434:	8f 91       	pop	r24
    4436:	7f 91       	pop	r23
    4438:	6f 91       	pop	r22
    443a:	5f 91       	pop	r21
    443c:	4f 91       	pop	r20
    443e:	3f 91       	pop	r19
    4440:	2f 91       	pop	r18
    4442:	0f 90       	pop	r0
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	0f 90       	pop	r0
    4448:	1f 90       	pop	r1
    444a:	18 95       	reti

0000444c <Timer1_init>:

/*****************FINCTION_DEFINTION***************************************/


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    444c:	df 93       	push	r29
    444e:	cf 93       	push	r28
    4450:	00 d0       	rcall	.+0      	; 0x4452 <Timer1_init+0x6>
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	9a 83       	std	Y+2, r25	; 0x02
    4458:	89 83       	std	Y+1, r24	; 0x01
	/**Normal port operation, OC1A/OC1B disconnected*/
	TCCR1A = (1<<FOC1A) ;
    445a:	ef e4       	ldi	r30, 0x4F	; 79
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	88 e0       	ldi	r24, 0x08	; 8
    4460:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B &0xF7) |  ((Config_Ptr->mode) <<3 );   /* to set timer mode*/
    4462:	ae e4       	ldi	r26, 0x4E	; 78
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	ee e4       	ldi	r30, 0x4E	; 78
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	28 2f       	mov	r18, r24
    446e:	27 7f       	andi	r18, 0xF7	; 247
    4470:	e9 81       	ldd	r30, Y+1	; 0x01
    4472:	fa 81       	ldd	r31, Y+2	; 0x02
    4474:	85 81       	ldd	r24, Z+5	; 0x05
    4476:	88 2f       	mov	r24, r24
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	88 0f       	add	r24, r24
    447c:	99 1f       	adc	r25, r25
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	88 0f       	add	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	82 2b       	or	r24, r18
    4488:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B &0xF8) |  ((Config_Ptr->prescaler) );  /* prescaler*/
    448a:	ae e4       	ldi	r26, 0x4E	; 78
    448c:	b0 e0       	ldi	r27, 0x00	; 0
    448e:	ee e4       	ldi	r30, 0x4E	; 78
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	80 81       	ld	r24, Z
    4494:	98 2f       	mov	r25, r24
    4496:	98 7f       	andi	r25, 0xF8	; 248
    4498:	e9 81       	ldd	r30, Y+1	; 0x01
    449a:	fa 81       	ldd	r31, Y+2	; 0x02
    449c:	84 81       	ldd	r24, Z+4	; 0x04
    449e:	89 2b       	or	r24, r25
    44a0:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    44a2:	ac e4       	ldi	r26, 0x4C	; 76
    44a4:	b0 e0       	ldi	r27, 0x00	; 0
    44a6:	e9 81       	ldd	r30, Y+1	; 0x01
    44a8:	fa 81       	ldd	r31, Y+2	; 0x02
    44aa:	80 81       	ld	r24, Z
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	11 96       	adiw	r26, 0x01	; 1
    44b0:	9c 93       	st	X, r25
    44b2:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == CTC )
    44b4:	e9 81       	ldd	r30, Y+1	; 0x01
    44b6:	fa 81       	ldd	r31, Y+2	; 0x02
    44b8:	85 81       	ldd	r24, Z+5	; 0x05
    44ba:	81 30       	cpi	r24, 0x01	; 1
    44bc:	71 f4       	brne	.+28     	; 0x44da <Timer1_init+0x8e>
	{
		OCR1A = Config_Ptr->compare_value ;
    44be:	aa e4       	ldi	r26, 0x4A	; 74
    44c0:	b0 e0       	ldi	r27, 0x00	; 0
    44c2:	e9 81       	ldd	r30, Y+1	; 0x01
    44c4:	fa 81       	ldd	r31, Y+2	; 0x02
    44c6:	82 81       	ldd	r24, Z+2	; 0x02
    44c8:	93 81       	ldd	r25, Z+3	; 0x03
    44ca:	11 96       	adiw	r26, 0x01	; 1
    44cc:	9c 93       	st	X, r25
    44ce:	8e 93       	st	-X, r24
		TIMSK  = (1<<OCIE1A); /*Output Compare A Match Interrupt Enable*/
    44d0:	e9 e5       	ldi	r30, 0x59	; 89
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	80 e1       	ldi	r24, 0x10	; 16
    44d6:	80 83       	st	Z, r24
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <Timer1_init+0x96>
	}
	else
	{
		TIMSK  = (1<<TOIE1); /*Overflow Interrupt Enable*/
    44da:	e9 e5       	ldi	r30, 0x59	; 89
    44dc:	f0 e0       	ldi	r31, 0x00	; 0
    44de:	84 e0       	ldi	r24, 0x04	; 4
    44e0:	80 83       	st	Z, r24

	}
}
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	08 95       	ret

000044ec <Timer1_deInit>:

	/****************************************************************************/
	void Timer1_deInit(void)
	{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
		TCCR1B = 0 ;  /*no clock*/
    44f4:	ee e4       	ldi	r30, 0x4E	; 78
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	10 82       	st	Z, r1

	}
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	08 95       	ret

00004500 <Timer1_setCallBack>:
	/**************************************************************/

	void Timer1_setCallBack(void(*a_ptr)(void))
	{
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	00 d0       	rcall	.+0      	; 0x4506 <Timer1_setCallBack+0x6>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
		g_callBackPtr = a_ptr ;
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	90 93 01 01 	sts	0x0101, r25
    4516:	80 93 00 01 	sts	0x0100, r24

	}
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <UART_init>:

/*****Function DEFINITIONS**************/


void UART_init(const USART_ConfigType* Config_Ptr )
{
    4524:	df 93       	push	r29
    4526:	cf 93       	push	r28
    4528:	00 d0       	rcall	.+0      	; 0x452a <UART_init+0x6>
    452a:	00 d0       	rcall	.+0      	; 0x452c <UART_init+0x8>
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	9c 83       	std	Y+4, r25	; 0x04
    4532:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value =0;
    4534:	1a 82       	std	Y+2, r1	; 0x02
    4536:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X) ;   /* Double the USART Transmission Speed*/
    4538:	eb e2       	ldi	r30, 0x2B	; 43
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	82 e0       	ldi	r24, 0x02	; 2
    453e:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);  /* enable UART*/
    4540:	ea e2       	ldi	r30, 0x2A	; 42
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	88 e1       	ldi	r24, 0x18	; 24
    4546:	80 83       	st	Z, r24

	UCSRB = (UCSRB&0xFB) | ((Config_Ptr->datasize) & 0x4) ;  /*  UCSZ2 for data size*/
    4548:	aa e2       	ldi	r26, 0x2A	; 42
    454a:	b0 e0       	ldi	r27, 0x00	; 0
    454c:	ea e2       	ldi	r30, 0x2A	; 42
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	98 2f       	mov	r25, r24
    4554:	9b 7f       	andi	r25, 0xFB	; 251
    4556:	eb 81       	ldd	r30, Y+3	; 0x03
    4558:	fc 81       	ldd	r31, Y+4	; 0x04
    455a:	83 81       	ldd	r24, Z+3	; 0x03
    455c:	84 70       	andi	r24, 0x04	; 4
    455e:	89 2b       	or	r24, r25
    4560:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL); /* to select UCSRC register*/
    4562:	a0 e4       	ldi	r26, 0x40	; 64
    4564:	b0 e0       	ldi	r27, 0x00	; 0
    4566:	e0 e4       	ldi	r30, 0x40	; 64
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	80 68       	ori	r24, 0x80	; 128
    456e:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);  /* to select USART MODE*/
    4570:	a0 e4       	ldi	r26, 0x40	; 64
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	e0 e4       	ldi	r30, 0x40	; 64
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	28 2f       	mov	r18, r24
    457c:	2f 7b       	andi	r18, 0xBF	; 191
    457e:	eb 81       	ldd	r30, Y+3	; 0x03
    4580:	fc 81       	ldd	r31, Y+4	; 0x04
    4582:	80 81       	ld	r24, Z
    4584:	88 2f       	mov	r24, r24
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	00 24       	eor	r0, r0
    458a:	96 95       	lsr	r25
    458c:	87 95       	ror	r24
    458e:	07 94       	ror	r0
    4590:	96 95       	lsr	r25
    4592:	87 95       	ror	r24
    4594:	07 94       	ror	r0
    4596:	98 2f       	mov	r25, r24
    4598:	80 2d       	mov	r24, r0
    459a:	82 2b       	or	r24, r18
    459c:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)  << 4); /*Parity Mode*/
    459e:	a0 e4       	ldi	r26, 0x40	; 64
    45a0:	b0 e0       	ldi	r27, 0x00	; 0
    45a2:	e0 e4       	ldi	r30, 0x40	; 64
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	28 2f       	mov	r18, r24
    45aa:	2f 7c       	andi	r18, 0xCF	; 207
    45ac:	eb 81       	ldd	r30, Y+3	; 0x03
    45ae:	fc 81       	ldd	r31, Y+4	; 0x04
    45b0:	81 81       	ldd	r24, Z+1	; 0x01
    45b2:	88 2f       	mov	r24, r24
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	82 95       	swap	r24
    45b8:	92 95       	swap	r25
    45ba:	90 7f       	andi	r25, 0xF0	; 240
    45bc:	98 27       	eor	r25, r24
    45be:	80 7f       	andi	r24, 0xF0	; 240
    45c0:	98 27       	eor	r25, r24
    45c2:	82 2b       	or	r24, r18
    45c4:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopbit)  << 3); /* stop bit*/
    45c6:	a0 e4       	ldi	r26, 0x40	; 64
    45c8:	b0 e0       	ldi	r27, 0x00	; 0
    45ca:	e0 e4       	ldi	r30, 0x40	; 64
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	80 81       	ld	r24, Z
    45d0:	28 2f       	mov	r18, r24
    45d2:	27 7f       	andi	r18, 0xF7	; 247
    45d4:	eb 81       	ldd	r30, Y+3	; 0x03
    45d6:	fc 81       	ldd	r31, Y+4	; 0x04
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	88 2f       	mov	r24, r24
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	82 2b       	or	r24, r18
    45ec:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (( (Config_Ptr->datasize)& 0x3) <<1) ; /* for data size*/
    45ee:	a0 e4       	ldi	r26, 0x40	; 64
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	e0 e4       	ldi	r30, 0x40	; 64
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	28 2f       	mov	r18, r24
    45fa:	29 7f       	andi	r18, 0xF9	; 249
    45fc:	eb 81       	ldd	r30, Y+3	; 0x03
    45fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4600:	83 81       	ldd	r24, Z+3	; 0x03
    4602:	88 2f       	mov	r24, r24
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	83 70       	andi	r24, 0x03	; 3
    4608:	90 70       	andi	r25, 0x00	; 0
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	82 2b       	or	r24, r18
    4610:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    4612:	eb 81       	ldd	r30, Y+3	; 0x03
    4614:	fc 81       	ldd	r31, Y+4	; 0x04
    4616:	84 81       	ldd	r24, Z+4	; 0x04
    4618:	95 81       	ldd	r25, Z+5	; 0x05
    461a:	a6 81       	ldd	r26, Z+6	; 0x06
    461c:	b7 81       	ldd	r27, Z+7	; 0x07
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	aa 1f       	adc	r26, r26
    4624:	bb 1f       	adc	r27, r27
    4626:	88 0f       	add	r24, r24
    4628:	99 1f       	adc	r25, r25
    462a:	aa 1f       	adc	r26, r26
    462c:	bb 1f       	adc	r27, r27
    462e:	88 0f       	add	r24, r24
    4630:	99 1f       	adc	r25, r25
    4632:	aa 1f       	adc	r26, r26
    4634:	bb 1f       	adc	r27, r27
    4636:	9c 01       	movw	r18, r24
    4638:	ad 01       	movw	r20, r26
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	92 e1       	ldi	r25, 0x12	; 18
    463e:	aa e7       	ldi	r26, 0x7A	; 122
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	bc 01       	movw	r22, r24
    4644:	cd 01       	movw	r24, r26
    4646:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__udivmodsi4>
    464a:	da 01       	movw	r26, r20
    464c:	c9 01       	movw	r24, r18
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	9a 83       	std	Y+2, r25	; 0x02
    4652:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    4654:	e0 e4       	ldi	r30, 0x40	; 64
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	89 81       	ldd	r24, Y+1	; 0x01
    465a:	9a 81       	ldd	r25, Y+2	; 0x02
    465c:	89 2f       	mov	r24, r25
    465e:	99 27       	eor	r25, r25
    4660:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    4662:	e9 e2       	ldi	r30, 0x29	; 41
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	89 81       	ldd	r24, Y+1	; 0x01
    4668:	80 83       	st	Z, r24

}
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <UART_sendByte>:
/***********************************************************************************************/

void UART_sendByte(const uint8 data)

{
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	0f 92       	push	r0
    467e:	cd b7       	in	r28, 0x3d	; 61
    4680:	de b7       	in	r29, 0x3e	; 62
    4682:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}  /* wait until transmit is complete*/
    4684:	eb e2       	ldi	r30, 0x2B	; 43
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	80 81       	ld	r24, Z
    468a:	88 2f       	mov	r24, r24
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	80 72       	andi	r24, 0x20	; 32
    4690:	90 70       	andi	r25, 0x00	; 0
    4692:	00 97       	sbiw	r24, 0x00	; 0
    4694:	b9 f3       	breq	.-18     	; 0x4684 <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4696:	ec e2       	ldi	r30, 0x2C	; 44
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	80 83       	st	Z, r24

}
    469e:	0f 90       	pop	r0
    46a0:	cf 91       	pop	r28
    46a2:	df 91       	pop	r29
    46a4:	08 95       	ret

000046a6 <UART_recieveByte>:
/*************************************************************************************************/

uint8 UART_recieveByte(void)
{
    46a6:	df 93       	push	r29
    46a8:	cf 93       	push	r28
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    46ae:	eb e2       	ldi	r30, 0x2B	; 43
    46b0:	f0 e0       	ldi	r31, 0x00	; 0
    46b2:	80 81       	ld	r24, Z
    46b4:	88 23       	and	r24, r24
    46b6:	dc f7       	brge	.-10     	; 0x46ae <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    46b8:	ec e2       	ldi	r30, 0x2C	; 44
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z

}
    46be:	cf 91       	pop	r28
    46c0:	df 91       	pop	r29
    46c2:	08 95       	ret

000046c4 <UART_sendString>:
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
    46c4:	df 93       	push	r29
    46c6:	cf 93       	push	r28
    46c8:	00 d0       	rcall	.+0      	; 0x46ca <UART_sendString+0x6>
    46ca:	00 d0       	rcall	.+0      	; 0x46cc <UART_sendString+0x8>
    46cc:	cd b7       	in	r28, 0x3d	; 61
    46ce:	de b7       	in	r29, 0x3e	; 62
    46d0:	9c 83       	std	Y+4, r25	; 0x04
    46d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i =0;
    46d4:	1a 82       	std	Y+2, r1	; 0x02
    46d6:	19 82       	std	Y+1, r1	; 0x01
    46d8:	0f c0       	rjmp	.+30     	; 0x46f8 <UART_sendString+0x34>
while(Str[i] != '\0')
{
	UART_sendByte(Str[i]);
    46da:	2b 81       	ldd	r18, Y+3	; 0x03
    46dc:	3c 81       	ldd	r19, Y+4	; 0x04
    46de:	89 81       	ldd	r24, Y+1	; 0x01
    46e0:	9a 81       	ldd	r25, Y+2	; 0x02
    46e2:	f9 01       	movw	r30, r18
    46e4:	e8 0f       	add	r30, r24
    46e6:	f9 1f       	adc	r31, r25
    46e8:	80 81       	ld	r24, Z
    46ea:	0e 94 3c 23 	call	0x4678	; 0x4678 <UART_sendByte>
	i++;
    46ee:	89 81       	ldd	r24, Y+1	; 0x01
    46f0:	9a 81       	ldd	r25, Y+2	; 0x02
    46f2:	01 96       	adiw	r24, 0x01	; 1
    46f4:	9a 83       	std	Y+2, r25	; 0x02
    46f6:	89 83       	std	Y+1, r24	; 0x01
}
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint16 i =0;
while(Str[i] != '\0')
    46f8:	2b 81       	ldd	r18, Y+3	; 0x03
    46fa:	3c 81       	ldd	r19, Y+4	; 0x04
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4700:	f9 01       	movw	r30, r18
    4702:	e8 0f       	add	r30, r24
    4704:	f9 1f       	adc	r31, r25
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	39 f7       	brne	.-50     	; 0x46da <UART_sendString+0x16>
{
	UART_sendByte(Str[i]);
	i++;
}

}
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <UART_receiveString>:

/*******************************************************************************************/
void UART_receiveString(uint8 *Str)
{
    471a:	0f 93       	push	r16
    471c:	1f 93       	push	r17
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	00 d0       	rcall	.+0      	; 0x4724 <UART_receiveString+0xa>
    4724:	0f 92       	push	r0
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	9b 83       	std	Y+3, r25	; 0x03
    472c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    472e:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	28 2f       	mov	r18, r24
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	9b 81       	ldd	r25, Y+3	; 0x03
    473a:	8c 01       	movw	r16, r24
    473c:	02 0f       	add	r16, r18
    473e:	13 1f       	adc	r17, r19
    4740:	0e 94 53 23 	call	0x46a6	; 0x46a6 <UART_recieveByte>
    4744:	f8 01       	movw	r30, r16
    4746:	80 83       	st	Z, r24
    4748:	0f c0       	rjmp	.+30     	; 0x4768 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    474a:	89 81       	ldd	r24, Y+1	; 0x01
    474c:	8f 5f       	subi	r24, 0xFF	; 255
    474e:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	28 2f       	mov	r18, r24
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	9b 81       	ldd	r25, Y+3	; 0x03
    475a:	8c 01       	movw	r16, r24
    475c:	02 0f       	add	r16, r18
    475e:	13 1f       	adc	r17, r19
    4760:	0e 94 53 23 	call	0x46a6	; 0x46a6 <UART_recieveByte>
    4764:	f8 01       	movw	r30, r16
    4766:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	8a 81       	ldd	r24, Y+2	; 0x02
    4770:	9b 81       	ldd	r25, Y+3	; 0x03
    4772:	fc 01       	movw	r30, r24
    4774:	e2 0f       	add	r30, r18
    4776:	f3 1f       	adc	r31, r19
    4778:	80 81       	ld	r24, Z
    477a:	83 32       	cpi	r24, 0x23	; 35
    477c:	31 f7       	brne	.-52     	; 0x474a <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	28 2f       	mov	r18, r24
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	8a 81       	ldd	r24, Y+2	; 0x02
    4786:	9b 81       	ldd	r25, Y+3	; 0x03
    4788:	fc 01       	movw	r30, r24
    478a:	e2 0f       	add	r30, r18
    478c:	f3 1f       	adc	r31, r19
    478e:	10 82       	st	Z, r1


}
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	1f 91       	pop	r17
    479c:	0f 91       	pop	r16
    479e:	08 95       	ret

000047a0 <__udivmodsi4>:
    47a0:	a1 e2       	ldi	r26, 0x21	; 33
    47a2:	1a 2e       	mov	r1, r26
    47a4:	aa 1b       	sub	r26, r26
    47a6:	bb 1b       	sub	r27, r27
    47a8:	fd 01       	movw	r30, r26
    47aa:	0d c0       	rjmp	.+26     	; 0x47c6 <__udivmodsi4_ep>

000047ac <__udivmodsi4_loop>:
    47ac:	aa 1f       	adc	r26, r26
    47ae:	bb 1f       	adc	r27, r27
    47b0:	ee 1f       	adc	r30, r30
    47b2:	ff 1f       	adc	r31, r31
    47b4:	a2 17       	cp	r26, r18
    47b6:	b3 07       	cpc	r27, r19
    47b8:	e4 07       	cpc	r30, r20
    47ba:	f5 07       	cpc	r31, r21
    47bc:	20 f0       	brcs	.+8      	; 0x47c6 <__udivmodsi4_ep>
    47be:	a2 1b       	sub	r26, r18
    47c0:	b3 0b       	sbc	r27, r19
    47c2:	e4 0b       	sbc	r30, r20
    47c4:	f5 0b       	sbc	r31, r21

000047c6 <__udivmodsi4_ep>:
    47c6:	66 1f       	adc	r22, r22
    47c8:	77 1f       	adc	r23, r23
    47ca:	88 1f       	adc	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	1a 94       	dec	r1
    47d0:	69 f7       	brne	.-38     	; 0x47ac <__udivmodsi4_loop>
    47d2:	60 95       	com	r22
    47d4:	70 95       	com	r23
    47d6:	80 95       	com	r24
    47d8:	90 95       	com	r25
    47da:	9b 01       	movw	r18, r22
    47dc:	ac 01       	movw	r20, r24
    47de:	bd 01       	movw	r22, r26
    47e0:	cf 01       	movw	r24, r30
    47e2:	08 95       	ret

000047e4 <__prologue_saves__>:
    47e4:	2f 92       	push	r2
    47e6:	3f 92       	push	r3
    47e8:	4f 92       	push	r4
    47ea:	5f 92       	push	r5
    47ec:	6f 92       	push	r6
    47ee:	7f 92       	push	r7
    47f0:	8f 92       	push	r8
    47f2:	9f 92       	push	r9
    47f4:	af 92       	push	r10
    47f6:	bf 92       	push	r11
    47f8:	cf 92       	push	r12
    47fa:	df 92       	push	r13
    47fc:	ef 92       	push	r14
    47fe:	ff 92       	push	r15
    4800:	0f 93       	push	r16
    4802:	1f 93       	push	r17
    4804:	cf 93       	push	r28
    4806:	df 93       	push	r29
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    480c:	ca 1b       	sub	r28, r26
    480e:	db 0b       	sbc	r29, r27
    4810:	0f b6       	in	r0, 0x3f	; 63
    4812:	f8 94       	cli
    4814:	de bf       	out	0x3e, r29	; 62
    4816:	0f be       	out	0x3f, r0	; 63
    4818:	cd bf       	out	0x3d, r28	; 61
    481a:	09 94       	ijmp

0000481c <__epilogue_restores__>:
    481c:	2a 88       	ldd	r2, Y+18	; 0x12
    481e:	39 88       	ldd	r3, Y+17	; 0x11
    4820:	48 88       	ldd	r4, Y+16	; 0x10
    4822:	5f 84       	ldd	r5, Y+15	; 0x0f
    4824:	6e 84       	ldd	r6, Y+14	; 0x0e
    4826:	7d 84       	ldd	r7, Y+13	; 0x0d
    4828:	8c 84       	ldd	r8, Y+12	; 0x0c
    482a:	9b 84       	ldd	r9, Y+11	; 0x0b
    482c:	aa 84       	ldd	r10, Y+10	; 0x0a
    482e:	b9 84       	ldd	r11, Y+9	; 0x09
    4830:	c8 84       	ldd	r12, Y+8	; 0x08
    4832:	df 80       	ldd	r13, Y+7	; 0x07
    4834:	ee 80       	ldd	r14, Y+6	; 0x06
    4836:	fd 80       	ldd	r15, Y+5	; 0x05
    4838:	0c 81       	ldd	r16, Y+4	; 0x04
    483a:	1b 81       	ldd	r17, Y+3	; 0x03
    483c:	aa 81       	ldd	r26, Y+2	; 0x02
    483e:	b9 81       	ldd	r27, Y+1	; 0x01
    4840:	ce 0f       	add	r28, r30
    4842:	d1 1d       	adc	r29, r1
    4844:	0f b6       	in	r0, 0x3f	; 63
    4846:	f8 94       	cli
    4848:	de bf       	out	0x3e, r29	; 62
    484a:	0f be       	out	0x3f, r0	; 63
    484c:	cd bf       	out	0x3d, r28	; 61
    484e:	ed 01       	movw	r28, r26
    4850:	08 95       	ret

00004852 <itoa>:
    4852:	fb 01       	movw	r30, r22
    4854:	9f 01       	movw	r18, r30
    4856:	e8 94       	clt
    4858:	42 30       	cpi	r20, 0x02	; 2
    485a:	c4 f0       	brlt	.+48     	; 0x488c <itoa+0x3a>
    485c:	45 32       	cpi	r20, 0x25	; 37
    485e:	b4 f4       	brge	.+44     	; 0x488c <itoa+0x3a>
    4860:	4a 30       	cpi	r20, 0x0A	; 10
    4862:	29 f4       	brne	.+10     	; 0x486e <itoa+0x1c>
    4864:	97 fb       	bst	r25, 7
    4866:	1e f4       	brtc	.+6      	; 0x486e <itoa+0x1c>
    4868:	90 95       	com	r25
    486a:	81 95       	neg	r24
    486c:	9f 4f       	sbci	r25, 0xFF	; 255
    486e:	64 2f       	mov	r22, r20
    4870:	77 27       	eor	r23, r23
    4872:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <__udivmodhi4>
    4876:	80 5d       	subi	r24, 0xD0	; 208
    4878:	8a 33       	cpi	r24, 0x3A	; 58
    487a:	0c f0       	brlt	.+2      	; 0x487e <itoa+0x2c>
    487c:	89 5d       	subi	r24, 0xD9	; 217
    487e:	81 93       	st	Z+, r24
    4880:	cb 01       	movw	r24, r22
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	a1 f7       	brne	.-24     	; 0x486e <itoa+0x1c>
    4886:	16 f4       	brtc	.+4      	; 0x488c <itoa+0x3a>
    4888:	5d e2       	ldi	r21, 0x2D	; 45
    488a:	51 93       	st	Z+, r21
    488c:	10 82       	st	Z, r1
    488e:	c9 01       	movw	r24, r18
    4890:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <strrev>

00004894 <strrev>:
    4894:	dc 01       	movw	r26, r24
    4896:	fc 01       	movw	r30, r24
    4898:	67 2f       	mov	r22, r23
    489a:	71 91       	ld	r23, Z+
    489c:	77 23       	and	r23, r23
    489e:	e1 f7       	brne	.-8      	; 0x4898 <strrev+0x4>
    48a0:	32 97       	sbiw	r30, 0x02	; 2
    48a2:	04 c0       	rjmp	.+8      	; 0x48ac <strrev+0x18>
    48a4:	7c 91       	ld	r23, X
    48a6:	6d 93       	st	X+, r22
    48a8:	70 83       	st	Z, r23
    48aa:	62 91       	ld	r22, -Z
    48ac:	ae 17       	cp	r26, r30
    48ae:	bf 07       	cpc	r27, r31
    48b0:	c8 f3       	brcs	.-14     	; 0x48a4 <strrev+0x10>
    48b2:	08 95       	ret

000048b4 <__udivmodhi4>:
    48b4:	aa 1b       	sub	r26, r26
    48b6:	bb 1b       	sub	r27, r27
    48b8:	51 e1       	ldi	r21, 0x11	; 17
    48ba:	07 c0       	rjmp	.+14     	; 0x48ca <__udivmodhi4_ep>

000048bc <__udivmodhi4_loop>:
    48bc:	aa 1f       	adc	r26, r26
    48be:	bb 1f       	adc	r27, r27
    48c0:	a6 17       	cp	r26, r22
    48c2:	b7 07       	cpc	r27, r23
    48c4:	10 f0       	brcs	.+4      	; 0x48ca <__udivmodhi4_ep>
    48c6:	a6 1b       	sub	r26, r22
    48c8:	b7 0b       	sbc	r27, r23

000048ca <__udivmodhi4_ep>:
    48ca:	88 1f       	adc	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	5a 95       	dec	r21
    48d0:	a9 f7       	brne	.-22     	; 0x48bc <__udivmodhi4_loop>
    48d2:	80 95       	com	r24
    48d4:	90 95       	com	r25
    48d6:	bc 01       	movw	r22, r24
    48d8:	cd 01       	movw	r24, r26
    48da:	08 95       	ret

000048dc <_exit>:
    48dc:	f8 94       	cli

000048de <__stop_program>:
    48de:	ff cf       	rjmp	.-2      	; 0x48de <__stop_program>
