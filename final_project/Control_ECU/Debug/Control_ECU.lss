
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002c96  00002d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  00002d40  2**0
                  ALLOC
  3 .stab         00002e14  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a2  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007036  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4b 06 	call	0xc96	; 0xc96 <main>
      8a:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <tickk>:
/*****************************************************************/
uint16  g_tick = 0;

/*function call in  the ISR of Timer 1*/
void tickk(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 76 00 	lds	r24, 0x0076
     b52:	90 91 77 00 	lds	r25, 0x0077
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 77 00 	sts	0x0077, r25
     b5c:	80 93 76 00 	sts	0x0076, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <delay_s>:

/*delay time function in second */
void delay_s (uint16 time)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <delay_s+0x6>
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	89 83       	std	Y+1, r24	; 0x01
	SREG |=(1<<7);
     b76:	af e5       	ldi	r26, 0x5F	; 95
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ef e5       	ldi	r30, 0x5F	; 95
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	8c 93       	st	X, r24

	while(g_tick != time);
     b84:	20 91 76 00 	lds	r18, 0x0076
     b88:	30 91 77 00 	lds	r19, 0x0077
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	b9 f7       	brne	.-18     	; 0xb84 <delay_s+0x1e>
	g_tick = 0;
     b96:	10 92 77 00 	sts	0x0077, r1
     b9a:	10 92 76 00 	sts	0x0076, r1

	SREG &= !(1<<7);
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	ef e5       	ldi	r30, 0x5F	; 95
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	10 82       	st	Z, r1


}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <check_pass>:
/* function to compare between to passwords
 * return 1 if they match
 * else return 0
 * */
uint8 check_pass(uint8* pass1  , uint8* pass1_confirm)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <check_pass+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <check_pass+0x8>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <check_pass+0xa>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	9b 83       	std	Y+3, r25	; 0x03
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	7d 83       	std	Y+5, r23	; 0x05
     bca:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0 ; i<5 ; i++)
     bcc:	19 82       	std	Y+1, r1	; 0x01
     bce:	19 c0       	rjmp	.+50     	; 0xc02 <check_pass+0x4c>
	{
		if(pass1[i]  != pass1_confirm[i] )
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	fc 01       	movw	r30, r24
     bdc:	e2 0f       	add	r30, r18
     bde:	f3 1f       	adc	r31, r19
     be0:	40 81       	ld	r20, Z
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	9d 81       	ldd	r25, Y+5	; 0x05
     bec:	fc 01       	movw	r30, r24
     bee:	e2 0f       	add	r30, r18
     bf0:	f3 1f       	adc	r31, r19
     bf2:	80 81       	ld	r24, Z
     bf4:	48 17       	cp	r20, r24
     bf6:	11 f0       	breq	.+4      	; 0xbfc <check_pass+0x46>
		{
			return 0;
     bf8:	1e 82       	std	Y+6, r1	; 0x06
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <check_pass+0x56>
 * else return 0
 * */
uint8 check_pass(uint8* pass1  , uint8* pass1_confirm)
{
	uint8 i;
	for(i=0 ; i<5 ; i++)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	20 f3       	brcs	.-56     	; 0xbd0 <check_pass+0x1a>
		if(pass1[i]  != pass1_confirm[i] )
		{
			return 0;
		}
	}
	return 1 ;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	8e 83       	std	Y+6, r24	; 0x06
     c0c:	8e 81       	ldd	r24, Y+6	; 0x06

}
     c0e:	26 96       	adiw	r28, 0x06	; 6
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <check_pass_eeprom>:

/*check pass from EEPROM*/

uint8 check_pass_eeprom(uint8* pass1 , uint8 memory_ptr)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <check_pass_eeprom+0x6>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <check_pass_eeprom+0x8>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <check_pass_eeprom+0xa>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i ;
	uint8 data =0;
     c34:	1a 82       	std	Y+2, r1	; 0x02
	for(i=0 ; i<5 ; i++)
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	1f c0       	rjmp	.+62     	; 0xc78 <check_pass_eeprom+0x58>
	{
		EEPROM_readByte(memory_ptr+i,&data);
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	9e 01       	movw	r18, r28
     c4c:	2e 5f       	subi	r18, 0xFE	; 254
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	b9 01       	movw	r22, r18
     c52:	0e 94 48 0a 	call	0x1490	; 0x1490 <EEPROM_readByte>
		if(data != pass1[i])
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	fc 01       	movw	r30, r24
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	90 81       	ld	r25, Z
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	98 17       	cp	r25, r24
     c6c:	11 f0       	breq	.+4      	; 0xc72 <check_pass_eeprom+0x52>
		{
			return 0 ;
     c6e:	1e 82       	std	Y+6, r1	; 0x06
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <check_pass_eeprom+0x62>

uint8 check_pass_eeprom(uint8* pass1 , uint8 memory_ptr)
{
	uint8 i ;
	uint8 data =0;
	for(i=0 ; i<5 ; i++)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	85 30       	cpi	r24, 0x05	; 5
     c7c:	f0 f2       	brcs	.-68     	; 0xc3a <check_pass_eeprom+0x1a>
		{
			return 0 ;
		}
	}

	return 1 ;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	8e 83       	std	Y+6, r24	; 0x06
     c82:	8e 81       	ldd	r24, Y+6	; 0x06
}
     c84:	26 96       	adiw	r28, 0x06	; 6
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <main>:

int main(void)

{
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	c1 55       	subi	r28, 0x51	; 81
     ca4:	d0 40       	sbci	r29, 0x00	; 0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61

	uint8 pass1[5]={0};
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	fe 01       	movw	r30, r28
     cb4:	bf 96       	adiw	r30, 0x2f	; 47
     cb6:	df 01       	movw	r26, r30
     cb8:	98 2f       	mov	r25, r24
     cba:	1d 92       	st	X+, r1
     cbc:	9a 95       	dec	r25
     cbe:	e9 f7       	brne	.-6      	; 0xcba <main+0x24>
	uint8 pass1_confirm[5]={0};
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	fe 01       	movw	r30, r28
     cc4:	f4 96       	adiw	r30, 0x34	; 52
     cc6:	df 01       	movw	r26, r30
     cc8:	98 2f       	mov	r25, r24
     cca:	1d 92       	st	X+, r1
     ccc:	9a 95       	dec	r25
     cce:	e9 f7       	brne	.-6      	; 0xcca <main+0x34>

	uint8 data = 0;
     cd0:	19 ae       	std	Y+57, r1	; 0x39
	uint16 memory_ptr = 0x0000;  /* address of MEMORY in EEPROM */
     cd2:	1e a6       	std	Y+46, r1	; 0x2e
     cd4:	1d a6       	std	Y+45, r1	; 0x2d
	uint8 i ;
	uint8 command =0;
     cd6:	1b a6       	std	Y+43, r1	; 0x2b


	/* set Configuration of Timer1
	 * every ISR = 1 second
	 * */
	Timer1_ConfigType timer_Config = {0 , 7813 ,clkI_1024 , CTC};
     cd8:	de 01       	movw	r26, r28
     cda:	da 96       	adiw	r26, 0x3a	; 58
     cdc:	2a 96       	adiw	r28, 0x0a	; 10
     cde:	bf af       	std	Y+63, r27	; 0x3f
     ce0:	ae af       	std	Y+62, r26	; 0x3e
     ce2:	2a 97       	sbiw	r28, 0x0a	; 10
     ce4:	e0 e7       	ldi	r30, 0x70	; 112
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	2c 96       	adiw	r28, 0x0c	; 12
     cea:	ff af       	std	Y+63, r31	; 0x3f
     cec:	ee af       	std	Y+62, r30	; 0x3e
     cee:	2c 97       	sbiw	r28, 0x0c	; 12
     cf0:	f6 e0       	ldi	r31, 0x06	; 6
     cf2:	2d 96       	adiw	r28, 0x0d	; 13
     cf4:	ff af       	std	Y+63, r31	; 0x3f
     cf6:	2d 97       	sbiw	r28, 0x0d	; 13
     cf8:	2c 96       	adiw	r28, 0x0c	; 12
     cfa:	ae ad       	ldd	r26, Y+62	; 0x3e
     cfc:	bf ad       	ldd	r27, Y+63	; 0x3f
     cfe:	2c 97       	sbiw	r28, 0x0c	; 12
     d00:	0c 90       	ld	r0, X
     d02:	2c 96       	adiw	r28, 0x0c	; 12
     d04:	ee ad       	ldd	r30, Y+62	; 0x3e
     d06:	ff ad       	ldd	r31, Y+63	; 0x3f
     d08:	2c 97       	sbiw	r28, 0x0c	; 12
     d0a:	31 96       	adiw	r30, 0x01	; 1
     d0c:	2c 96       	adiw	r28, 0x0c	; 12
     d0e:	ff af       	std	Y+63, r31	; 0x3f
     d10:	ee af       	std	Y+62, r30	; 0x3e
     d12:	2c 97       	sbiw	r28, 0x0c	; 12
     d14:	2a 96       	adiw	r28, 0x0a	; 10
     d16:	ae ad       	ldd	r26, Y+62	; 0x3e
     d18:	bf ad       	ldd	r27, Y+63	; 0x3f
     d1a:	2a 97       	sbiw	r28, 0x0a	; 10
     d1c:	0c 92       	st	X, r0
     d1e:	2a 96       	adiw	r28, 0x0a	; 10
     d20:	ee ad       	ldd	r30, Y+62	; 0x3e
     d22:	ff ad       	ldd	r31, Y+63	; 0x3f
     d24:	2a 97       	sbiw	r28, 0x0a	; 10
     d26:	31 96       	adiw	r30, 0x01	; 1
     d28:	2a 96       	adiw	r28, 0x0a	; 10
     d2a:	ff af       	std	Y+63, r31	; 0x3f
     d2c:	ee af       	std	Y+62, r30	; 0x3e
     d2e:	2a 97       	sbiw	r28, 0x0a	; 10
     d30:	2d 96       	adiw	r28, 0x0d	; 13
     d32:	ff ad       	ldd	r31, Y+63	; 0x3f
     d34:	2d 97       	sbiw	r28, 0x0d	; 13
     d36:	f1 50       	subi	r31, 0x01	; 1
     d38:	2d 96       	adiw	r28, 0x0d	; 13
     d3a:	ff af       	std	Y+63, r31	; 0x3f
     d3c:	2d 97       	sbiw	r28, 0x0d	; 13
     d3e:	2d 96       	adiw	r28, 0x0d	; 13
     d40:	8f ad       	ldd	r24, Y+63	; 0x3f
     d42:	2d 97       	sbiw	r28, 0x0d	; 13
     d44:	88 23       	and	r24, r24
     d46:	c1 f6       	brne	.-80     	; 0xcf8 <main+0x62>
	Timer1_init(&timer_Config);
     d48:	ce 01       	movw	r24, r28
     d4a:	ca 96       	adiw	r24, 0x3a	; 58
     d4c:	0e 94 84 13 	call	0x2708	; 0x2708 <Timer1_init>
	Timer1_setCallBack(tickk);
     d50:	83 ea       	ldi	r24, 0xA3	; 163
     d52:	95 e0       	ldi	r25, 0x05	; 5
     d54:	0e 94 de 13 	call	0x27bc	; 0x27bc <Timer1_setCallBack>
	/*******************/
	/* set Configuration of USART*/
	USART_ConfigType uart_config = {asynch , disabled ,one_bit ,eight_bit ,9600};
     d58:	de 01       	movw	r26, r28
     d5a:	a0 5c       	subi	r26, 0xC0	; 192
     d5c:	bf 4f       	sbci	r27, 0xFF	; 255
     d5e:	2f 96       	adiw	r28, 0x0f	; 15
     d60:	bf af       	std	Y+63, r27	; 0x3f
     d62:	ae af       	std	Y+62, r26	; 0x3e
     d64:	2f 97       	sbiw	r28, 0x0f	; 15
     d66:	e8 e6       	ldi	r30, 0x68	; 104
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	61 96       	adiw	r28, 0x11	; 17
     d6c:	ff af       	std	Y+63, r31	; 0x3f
     d6e:	ee af       	std	Y+62, r30	; 0x3e
     d70:	61 97       	sbiw	r28, 0x11	; 17
     d72:	f8 e0       	ldi	r31, 0x08	; 8
     d74:	62 96       	adiw	r28, 0x12	; 18
     d76:	ff af       	std	Y+63, r31	; 0x3f
     d78:	62 97       	sbiw	r28, 0x12	; 18
     d7a:	61 96       	adiw	r28, 0x11	; 17
     d7c:	ae ad       	ldd	r26, Y+62	; 0x3e
     d7e:	bf ad       	ldd	r27, Y+63	; 0x3f
     d80:	61 97       	sbiw	r28, 0x11	; 17
     d82:	0c 90       	ld	r0, X
     d84:	61 96       	adiw	r28, 0x11	; 17
     d86:	ee ad       	ldd	r30, Y+62	; 0x3e
     d88:	ff ad       	ldd	r31, Y+63	; 0x3f
     d8a:	61 97       	sbiw	r28, 0x11	; 17
     d8c:	31 96       	adiw	r30, 0x01	; 1
     d8e:	61 96       	adiw	r28, 0x11	; 17
     d90:	ff af       	std	Y+63, r31	; 0x3f
     d92:	ee af       	std	Y+62, r30	; 0x3e
     d94:	61 97       	sbiw	r28, 0x11	; 17
     d96:	2f 96       	adiw	r28, 0x0f	; 15
     d98:	ae ad       	ldd	r26, Y+62	; 0x3e
     d9a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d9c:	2f 97       	sbiw	r28, 0x0f	; 15
     d9e:	0c 92       	st	X, r0
     da0:	2f 96       	adiw	r28, 0x0f	; 15
     da2:	ee ad       	ldd	r30, Y+62	; 0x3e
     da4:	ff ad       	ldd	r31, Y+63	; 0x3f
     da6:	2f 97       	sbiw	r28, 0x0f	; 15
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	2f 96       	adiw	r28, 0x0f	; 15
     dac:	ff af       	std	Y+63, r31	; 0x3f
     dae:	ee af       	std	Y+62, r30	; 0x3e
     db0:	2f 97       	sbiw	r28, 0x0f	; 15
     db2:	62 96       	adiw	r28, 0x12	; 18
     db4:	ff ad       	ldd	r31, Y+63	; 0x3f
     db6:	62 97       	sbiw	r28, 0x12	; 18
     db8:	f1 50       	subi	r31, 0x01	; 1
     dba:	62 96       	adiw	r28, 0x12	; 18
     dbc:	ff af       	std	Y+63, r31	; 0x3f
     dbe:	62 97       	sbiw	r28, 0x12	; 18
     dc0:	62 96       	adiw	r28, 0x12	; 18
     dc2:	8f ad       	ldd	r24, Y+63	; 0x3f
     dc4:	62 97       	sbiw	r28, 0x12	; 18
     dc6:	88 23       	and	r24, r24
     dc8:	c1 f6       	brne	.-80     	; 0xd7a <main+0xe4>
	UART_init(&uart_config);
     dca:	ce 01       	movw	r24, r28
     dcc:	80 5c       	subi	r24, 0xC0	; 192
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	0e 94 6d 14 	call	0x28da	; 0x28da <UART_init>

	LCD_init();
     dd4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_init>


	DcMotor_Init();
     dd8:	0e 94 b9 09 	call	0x1372	; 0x1372 <DcMotor_Init>
	Buzzer_init();
     ddc:	0e 94 90 09 	call	0x1320	; 0x1320 <Buzzer_init>
	while(1)
	{
		command = UART_recieveByte();
     de0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
     de4:	8b a7       	std	Y+43, r24	; 0x2b

		if(command == '*')
     de6:	8b a5       	ldd	r24, Y+43	; 0x2b
     de8:	8a 32       	cpi	r24, 0x2A	; 42
     dea:	09 f0       	breq	.+2      	; 0xdee <main+0x158>
     dec:	1e c1       	rjmp	.+572    	; 0x102a <main+0x394>
		{


			/*Initialize pass ARRAYS*/
			for(i=0 ; i<5 ; i++)
     dee:	1c a6       	std	Y+44, r1	; 0x2c
     df0:	15 c0       	rjmp	.+42     	; 0xe1c <main+0x186>
			{
				pass1[i] = 0;
     df2:	8c a5       	ldd	r24, Y+44	; 0x2c
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	ce 01       	movw	r24, r28
     dfa:	8f 96       	adiw	r24, 0x2f	; 47
     dfc:	fc 01       	movw	r30, r24
     dfe:	e2 0f       	add	r30, r18
     e00:	f3 1f       	adc	r31, r19
     e02:	10 82       	st	Z, r1
				pass1_confirm[i] = 0;
     e04:	8c a5       	ldd	r24, Y+44	; 0x2c
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ce 01       	movw	r24, r28
     e0c:	c4 96       	adiw	r24, 0x34	; 52
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	10 82       	st	Z, r1
		if(command == '*')
		{


			/*Initialize pass ARRAYS*/
			for(i=0 ; i<5 ; i++)
     e16:	8c a5       	ldd	r24, Y+44	; 0x2c
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	8c a7       	std	Y+44, r24	; 0x2c
     e1c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e1e:	85 30       	cpi	r24, 0x05	; 5
     e20:	40 f3       	brcs	.-48     	; 0xdf2 <main+0x15c>
				pass1_confirm[i] = 0;
			}


			/*Receive first password in pass1*/
			for(i=0 ; i<5 ; i++)
     e22:	1c a6       	std	Y+44, r1	; 0x2c
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <main+0x1ae>
			{
				pass1[i] = UART_recieveByte();
     e26:	8c a5       	ldd	r24, Y+44	; 0x2c
     e28:	08 2f       	mov	r16, r24
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
     e30:	28 2f       	mov	r18, r24
     e32:	ce 01       	movw	r24, r28
     e34:	8f 96       	adiw	r24, 0x2f	; 47
     e36:	fc 01       	movw	r30, r24
     e38:	e0 0f       	add	r30, r16
     e3a:	f1 1f       	adc	r31, r17
     e3c:	20 83       	st	Z, r18
				pass1_confirm[i] = 0;
			}


			/*Receive first password in pass1*/
			for(i=0 ; i<5 ; i++)
     e3e:	8c a5       	ldd	r24, Y+44	; 0x2c
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	8c a7       	std	Y+44, r24	; 0x2c
     e44:	8c a5       	ldd	r24, Y+44	; 0x2c
     e46:	85 30       	cpi	r24, 0x05	; 5
     e48:	70 f3       	brcs	.-36     	; 0xe26 <main+0x190>
			{
				pass1[i] = UART_recieveByte();
			}

			/*Receive  password confirmation in pass1_confirm*/
			for(i=0 ; i<5 ; i++)
     e4a:	1c a6       	std	Y+44, r1	; 0x2c
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <main+0x1d6>
			{
				pass1_confirm[i] = UART_recieveByte();
     e4e:	8c a5       	ldd	r24, Y+44	; 0x2c
     e50:	08 2f       	mov	r16, r24
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
     e58:	28 2f       	mov	r18, r24
     e5a:	ce 01       	movw	r24, r28
     e5c:	c4 96       	adiw	r24, 0x34	; 52
     e5e:	fc 01       	movw	r30, r24
     e60:	e0 0f       	add	r30, r16
     e62:	f1 1f       	adc	r31, r17
     e64:	20 83       	st	Z, r18
			{
				pass1[i] = UART_recieveByte();
			}

			/*Receive  password confirmation in pass1_confirm*/
			for(i=0 ; i<5 ; i++)
     e66:	8c a5       	ldd	r24, Y+44	; 0x2c
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	8c a7       	std	Y+44, r24	; 0x2c
     e6c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	70 f3       	brcs	.-36     	; 0xe4e <main+0x1b8>
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			/******store pass in EEPROM***********/
			if( check_pass(pass1 ,pass1_confirm ) )
     e72:	ce 01       	movw	r24, r28
     e74:	8f 96       	adiw	r24, 0x2f	; 47
     e76:	9e 01       	movw	r18, r28
     e78:	2c 5c       	subi	r18, 0xCC	; 204
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	b9 01       	movw	r22, r18
     e7e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <check_pass>
     e82:	88 23       	and	r24, r24
     e84:	09 f4       	brne	.+2      	; 0xe88 <main+0x1f2>
     e86:	90 c0       	rjmp	.+288    	; 0xfa8 <main+0x312>
			{

				for(i=0 ; i<5 ; i++)
     e88:	1c a6       	std	Y+44, r1	; 0x2c
     e8a:	8a c0       	rjmp	.+276    	; 0xfa0 <main+0x30a>
				{
					EEPROM_writeByte(memory_ptr+i , pass1[i]);
     e8c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8d a5       	ldd	r24, Y+45	; 0x2d
     e94:	9e a5       	ldd	r25, Y+46	; 0x2e
     e96:	a9 01       	movw	r20, r18
     e98:	48 0f       	add	r20, r24
     e9a:	59 1f       	adc	r21, r25
     e9c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	8f 96       	adiw	r24, 0x2f	; 47
     ea6:	fc 01       	movw	r30, r24
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	20 81       	ld	r18, Z
     eae:	ca 01       	movw	r24, r20
     eb0:	62 2f       	mov	r22, r18
     eb2:	0e 94 07 0a 	call	0x140e	; 0x140e <EEPROM_writeByte>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e2       	ldi	r26, 0x20	; 32
     ebc:	b1 e4       	ldi	r27, 0x41	; 65
     ebe:	8f a3       	std	Y+39, r24	; 0x27
     ec0:	98 a7       	std	Y+40, r25	; 0x28
     ec2:	a9 a7       	std	Y+41, r26	; 0x29
     ec4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6f a1       	ldd	r22, Y+39	; 0x27
     ec8:	78 a5       	ldd	r23, Y+40	; 0x28
     eca:	89 a5       	ldd	r24, Y+41	; 0x29
     ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a ef       	ldi	r20, 0xFA	; 250
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8b a3       	std	Y+35, r24	; 0x23
     ee0:	9c a3       	std	Y+36, r25	; 0x24
     ee2:	ad a3       	std	Y+37, r26	; 0x25
     ee4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ee6:	6b a1       	ldd	r22, Y+35	; 0x23
     ee8:	7c a1       	ldd	r23, Y+36	; 0x24
     eea:	8d a1       	ldd	r24, Y+37	; 0x25
     eec:	9e a1       	ldd	r25, Y+38	; 0x26
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <main+0x272>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9a a3       	std	Y+34, r25	; 0x22
     f04:	89 a3       	std	Y+33, r24	; 0x21
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <main+0x2f0>
	else if (__tmp > 65535)
     f08:	6b a1       	ldd	r22, Y+35	; 0x23
     f0a:	7c a1       	ldd	r23, Y+36	; 0x24
     f0c:	8d a1       	ldd	r24, Y+37	; 0x25
     f0e:	9e a1       	ldd	r25, Y+38	; 0x26
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	6f a1       	ldd	r22, Y+39	; 0x27
     f22:	78 a5       	ldd	r23, Y+40	; 0x28
     f24:	89 a5       	ldd	r24, Y+41	; 0x29
     f26:	9a a5       	ldd	r25, Y+42	; 0x2a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9a a3       	std	Y+34, r25	; 0x22
     f46:	89 a3       	std	Y+33, r24	; 0x21
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <main+0x2d2>
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	98 a3       	std	Y+32, r25	; 0x20
     f50:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f54:	98 a1       	ldd	r25, Y+32	; 0x20
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <main+0x2c0>
     f5a:	98 a3       	std	Y+32, r25	; 0x20
     f5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	89 a1       	ldd	r24, Y+33	; 0x21
     f60:	9a a1       	ldd	r25, Y+34	; 0x22
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9a a3       	std	Y+34, r25	; 0x22
     f66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	89 a1       	ldd	r24, Y+33	; 0x21
     f6a:	9a a1       	ldd	r25, Y+34	; 0x22
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <main+0x2b4>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6b a1       	ldd	r22, Y+35	; 0x23
     f74:	7c a1       	ldd	r23, Y+36	; 0x24
     f76:	8d a1       	ldd	r24, Y+37	; 0x25
     f78:	9e a1       	ldd	r25, Y+38	; 0x26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9a a3       	std	Y+34, r25	; 0x22
     f84:	89 a3       	std	Y+33, r24	; 0x21
     f86:	89 a1       	ldd	r24, Y+33	; 0x21
     f88:	9a a1       	ldd	r25, Y+34	; 0x22
     f8a:	9e 8f       	std	Y+30, r25	; 0x1e
     f8c:	8d 8f       	std	Y+29, r24	; 0x1d
     f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <main+0x2fc>
     f96:	9e 8f       	std	Y+30, r25	; 0x1e
     f98:	8d 8f       	std	Y+29, r24	; 0x1d
			}
			/******store pass in EEPROM***********/
			if( check_pass(pass1 ,pass1_confirm ) )
			{

				for(i=0 ; i<5 ; i++)
     f9a:	8c a5       	ldd	r24, Y+44	; 0x2c
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	8c a7       	std	Y+44, r24	; 0x2c
     fa0:	8c a5       	ldd	r24, Y+44	; 0x2c
     fa2:	85 30       	cpi	r24, 0x05	; 5
     fa4:	08 f4       	brcc	.+2      	; 0xfa8 <main+0x312>
     fa6:	72 cf       	rjmp	.-284    	; 0xe8c <main+0x1f6>

				}

			}
			/*send the result of the match of two password*/
			UART_sendByte (check_pass(pass1 ,pass1_confirm ));
     fa8:	ce 01       	movw	r24, r28
     faa:	8f 96       	adiw	r24, 0x2f	; 47
     fac:	9e 01       	movw	r18, r28
     fae:	2c 5c       	subi	r18, 0xCC	; 204
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	b9 01       	movw	r22, r18
     fb4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <check_pass>
     fb8:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>



			/*******************/
			LCD_clearScreen();
     fbc:	0e 94 14 13 	call	0x2628	; 0x2628 <LCD_clearScreen>

			for(i=0 ; i<5 ; i++)
     fc0:	1c a6       	std	Y+44, r1	; 0x2c
     fc2:	15 c0       	rjmp	.+42     	; 0xfee <main+0x358>
			{
				EEPROM_readByte(memory_ptr+i,&data);
     fc4:	8c a5       	ldd	r24, Y+44	; 0x2c
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8d a5       	ldd	r24, Y+45	; 0x2d
     fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
     fce:	82 0f       	add	r24, r18
     fd0:	93 1f       	adc	r25, r19
     fd2:	9e 01       	movw	r18, r28
     fd4:	27 5c       	subi	r18, 0xC7	; 199
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	b9 01       	movw	r22, r18
     fda:	0e 94 48 0a 	call	0x1490	; 0x1490 <EEPROM_readByte>
				LCD_intgerToString(data);
     fde:	89 ad       	ldd	r24, Y+57	; 0x39
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <LCD_intgerToString>


			/*******************/
			LCD_clearScreen();

			for(i=0 ; i<5 ; i++)
     fe8:	8c a5       	ldd	r24, Y+44	; 0x2c
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8c a7       	std	Y+44, r24	; 0x2c
     fee:	8c a5       	ldd	r24, Y+44	; 0x2c
     ff0:	85 30       	cpi	r24, 0x05	; 5
     ff2:	40 f3       	brcs	.-48     	; 0xfc4 <main+0x32e>
			{
				EEPROM_readByte(memory_ptr+i,&data);
				LCD_intgerToString(data);
			}
			/*****************/
			LCD_moveCursor(1,0);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 96 12 	call	0x252c	; 0x252c <LCD_moveCursor>

			for(i=0 ; i<5 ; i++)
     ffc:	1c a6       	std	Y+44, r1	; 0x2c
     ffe:	10 c0       	rjmp	.+32     	; 0x1020 <main+0x38a>
			{
				LCD_intgerToString(pass1_confirm[i]);
    1000:	8c a5       	ldd	r24, Y+44	; 0x2c
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	ce 01       	movw	r24, r28
    1008:	c4 96       	adiw	r24, 0x34	; 52
    100a:	fc 01       	movw	r30, r24
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	80 81       	ld	r24, Z
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <LCD_intgerToString>
				LCD_intgerToString(data);
			}
			/*****************/
			LCD_moveCursor(1,0);

			for(i=0 ; i<5 ; i++)
    101a:	8c a5       	ldd	r24, Y+44	; 0x2c
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	8c a7       	std	Y+44, r24	; 0x2c
    1020:	8c a5       	ldd	r24, Y+44	; 0x2c
    1022:	85 30       	cpi	r24, 0x05	; 5
    1024:	68 f3       	brcs	.-38     	; 0x1000 <main+0x36a>
			{
				LCD_intgerToString(pass1_confirm[i]);
			}

			command=0;
    1026:	1b a6       	std	Y+43, r1	; 0x2b
    1028:	db ce       	rjmp	.-586    	; 0xde0 <main+0x14a>

		}
		/*********************************************************/
		/*door case*/
		else if(command == '#')
    102a:	8b a5       	ldd	r24, Y+43	; 0x2b
    102c:	83 32       	cpi	r24, 0x23	; 35
    102e:	09 f0       	breq	.+2      	; 0x1032 <main+0x39c>
    1030:	4e c0       	rjmp	.+156    	; 0x10ce <main+0x438>
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    1032:	1c a6       	std	Y+44, r1	; 0x2c
    1034:	0c c0       	rjmp	.+24     	; 0x104e <main+0x3b8>
			{
				pass1_confirm[i] = 0;
    1036:	8c a5       	ldd	r24, Y+44	; 0x2c
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	ce 01       	movw	r24, r28
    103e:	c4 96       	adiw	r24, 0x34	; 52
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	10 82       	st	Z, r1
		/*door case*/
		else if(command == '#')
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    1048:	8c a5       	ldd	r24, Y+44	; 0x2c
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8c a7       	std	Y+44, r24	; 0x2c
    104e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	88 f3       	brcs	.-30     	; 0x1036 <main+0x3a0>
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    1054:	1c a6       	std	Y+44, r1	; 0x2c
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <main+0x3e0>
			{
				pass1_confirm[i] = UART_recieveByte();
    1058:	8c a5       	ldd	r24, Y+44	; 0x2c
    105a:	08 2f       	mov	r16, r24
    105c:	10 e0       	ldi	r17, 0x00	; 0
    105e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    1062:	28 2f       	mov	r18, r24
    1064:	ce 01       	movw	r24, r28
    1066:	c4 96       	adiw	r24, 0x34	; 52
    1068:	fc 01       	movw	r30, r24
    106a:	e0 0f       	add	r30, r16
    106c:	f1 1f       	adc	r31, r17
    106e:	20 83       	st	Z, r18
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    1070:	8c a5       	ldd	r24, Y+44	; 0x2c
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	8c a7       	std	Y+44, r24	; 0x2c
    1076:	8c a5       	ldd	r24, Y+44	; 0x2c
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	70 f3       	brcs	.-36     	; 0x1058 <main+0x3c2>
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			/*check pass*/
			if ( check_pass_eeprom(pass1_confirm ,memory_ptr) )
    107c:	2d a5       	ldd	r18, Y+45	; 0x2d
    107e:	ce 01       	movw	r24, r28
    1080:	c4 96       	adiw	r24, 0x34	; 52
    1082:	62 2f       	mov	r22, r18
    1084:	0e 94 10 06 	call	0xc20	; 0xc20 <check_pass_eeprom>
    1088:	88 23       	and	r24, r24
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <main+0x42e>
			{

				UART_sendByte (1);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
				DcMotor_Rotate(CW);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DcMotor_Rotate>
				//_delay_ms(15000);
				delay_s(15);
    1098:	8f e0       	ldi	r24, 0x0F	; 15
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay_s>
				DcMotor_Rotate(STOP);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DcMotor_Rotate>
				//_delay_ms(3000);
				delay_s(3);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay_s>
				DcMotor_Rotate(ACW);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DcMotor_Rotate>
				//_delay_ms(15000);
				delay_s(15);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 b3 05 	call	0xb66	; 0xb66 <delay_s>
				DcMotor_Rotate(STOP);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DcMotor_Rotate>
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <main+0x434>

			}
			else
			{

				UART_sendByte (0);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
			}
			command = 0;
    10ca:	1b a6       	std	Y+43, r1	; 0x2b
    10cc:	89 ce       	rjmp	.-750    	; 0xde0 <main+0x14a>


		}
		/**************************************/

		else if (command == '$')
    10ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d0:	84 32       	cpi	r24, 0x24	; 36
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <main+0x440>
    10d4:	a9 c0       	rjmp	.+338    	; 0x1228 <main+0x592>
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    10d6:	1c a6       	std	Y+44, r1	; 0x2c
    10d8:	0c c0       	rjmp	.+24     	; 0x10f2 <main+0x45c>
			{
				pass1_confirm[i] = 0;
    10da:	8c a5       	ldd	r24, Y+44	; 0x2c
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	ce 01       	movw	r24, r28
    10e2:	c4 96       	adiw	r24, 0x34	; 52
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	10 82       	st	Z, r1

		else if (command == '$')
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    10ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	8c a7       	std	Y+44, r24	; 0x2c
    10f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    10f4:	85 30       	cpi	r24, 0x05	; 5
    10f6:	88 f3       	brcs	.-30     	; 0x10da <main+0x444>
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    10f8:	1c a6       	std	Y+44, r1	; 0x2c
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <main+0x484>
			{
				pass1_confirm[i] = UART_recieveByte();
    10fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    10fe:	08 2f       	mov	r16, r24
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    1106:	28 2f       	mov	r18, r24
    1108:	ce 01       	movw	r24, r28
    110a:	c4 96       	adiw	r24, 0x34	; 52
    110c:	fc 01       	movw	r30, r24
    110e:	e0 0f       	add	r30, r16
    1110:	f1 1f       	adc	r31, r17
    1112:	20 83       	st	Z, r18
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    1114:	8c a5       	ldd	r24, Y+44	; 0x2c
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	8c a7       	std	Y+44, r24	; 0x2c
    111a:	8c a5       	ldd	r24, Y+44	; 0x2c
    111c:	85 30       	cpi	r24, 0x05	; 5
    111e:	70 f3       	brcs	.-36     	; 0x10fc <main+0x466>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e2       	ldi	r26, 0x20	; 32
    1126:	b1 e4       	ldi	r27, 0x41	; 65
    1128:	89 8f       	std	Y+25, r24	; 0x19
    112a:	9a 8f       	std	Y+26, r25	; 0x1a
    112c:	ab 8f       	std	Y+27, r26	; 0x1b
    112e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1130:	69 8d       	ldd	r22, Y+25	; 0x19
    1132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a ef       	ldi	r20, 0xFA	; 250
    113e:	54 e4       	ldi	r21, 0x44	; 68
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	8d 8b       	std	Y+21, r24	; 0x15
    114a:	9e 8b       	std	Y+22, r25	; 0x16
    114c:	af 8b       	std	Y+23, r26	; 0x17
    114e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1150:	6d 89       	ldd	r22, Y+21	; 0x15
    1152:	7e 89       	ldd	r23, Y+22	; 0x16
    1154:	8f 89       	ldd	r24, Y+23	; 0x17
    1156:	98 8d       	ldd	r25, Y+24	; 0x18
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	5f e3       	ldi	r21, 0x3F	; 63
    1160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1164:	88 23       	and	r24, r24
    1166:	2c f4       	brge	.+10     	; 0x1172 <main+0x4dc>
		__ticks = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c 8b       	std	Y+20, r25	; 0x14
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <main+0x55a>
	else if (__tmp > 65535)
    1172:	6d 89       	ldd	r22, Y+21	; 0x15
    1174:	7e 89       	ldd	r23, Y+22	; 0x16
    1176:	8f 89       	ldd	r24, Y+23	; 0x17
    1178:	98 8d       	ldd	r25, Y+24	; 0x18
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	4f e7       	ldi	r20, 0x7F	; 127
    1180:	57 e4       	ldi	r21, 0x47	; 71
    1182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1186:	18 16       	cp	r1, r24
    1188:	4c f5       	brge	.+82     	; 0x11dc <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	69 8d       	ldd	r22, Y+25	; 0x19
    118c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e2       	ldi	r20, 0x20	; 32
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <main+0x53c>
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9a 8b       	std	Y+18, r25	; 0x12
    11ba:	89 8b       	std	Y+17, r24	; 0x11
    11bc:	89 89       	ldd	r24, Y+17	; 0x11
    11be:	9a 89       	ldd	r25, Y+18	; 0x12
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <main+0x52a>
    11c4:	9a 8b       	std	Y+18, r25	; 0x12
    11c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ca:	9c 89       	ldd	r25, Y+20	; 0x14
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	9c 89       	ldd	r25, Y+20	; 0x14
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	69 f7       	brne	.-38     	; 0x11b4 <main+0x51e>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <main+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	6d 89       	ldd	r22, Y+21	; 0x15
    11de:	7e 89       	ldd	r23, Y+22	; 0x16
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	98 8d       	ldd	r25, Y+24	; 0x18
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9c 8b       	std	Y+20, r25	; 0x14
    11ee:	8b 8b       	std	Y+19, r24	; 0x13
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	98 8b       	std	Y+16, r25	; 0x10
    11f6:	8f 87       	std	Y+15, r24	; 0x0f
    11f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fa:	98 89       	ldd	r25, Y+16	; 0x10
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <main+0x566>
    1200:	98 8b       	std	Y+16, r25	; 0x10
    1202:	8f 87       	std	Y+15, r24	; 0x0f
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			_delay_ms(10);
			/*check pass*/
			if ( check_pass_eeprom(pass1_confirm ,memory_ptr) )
    1204:	2d a5       	ldd	r18, Y+45	; 0x2d
    1206:	ce 01       	movw	r24, r28
    1208:	c4 96       	adiw	r24, 0x34	; 52
    120a:	62 2f       	mov	r22, r18
    120c:	0e 94 10 06 	call	0xc20	; 0xc20 <check_pass_eeprom>
    1210:	88 23       	and	r24, r24
    1212:	31 f0       	breq	.+12     	; 0x1220 <main+0x58a>
			{
				command = '*';
    1214:	8a e2       	ldi	r24, 0x2A	; 42
    1216:	8b a7       	std	Y+43, r24	; 0x2b
				UART_sendByte (1);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
    121e:	e0 cd       	rjmp	.-1088   	; 0xde0 <main+0x14a>

			}
			else
			{

				UART_sendByte (0);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
    1226:	dc cd       	rjmp	.-1096   	; 0xde0 <main+0x14a>
			}

		}
		/****ERROR CASE******/
		else if(command == 'E')
    1228:	8b a5       	ldd	r24, Y+43	; 0x2b
    122a:	85 34       	cpi	r24, 0x45	; 69
    122c:	09 f0       	breq	.+2      	; 0x1230 <main+0x59a>
    122e:	d8 cd       	rjmp	.-1104   	; 0xde0 <main+0x14a>
		{

			Buzzer_on();
    1230:	0e 94 a1 09 	call	0x1342	; 0x1342 <Buzzer_on>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	aa e7       	ldi	r26, 0x7A	; 122
    123a:	b4 e4       	ldi	r27, 0x44	; 68
    123c:	8b 87       	std	Y+11, r24	; 0x0b
    123e:	9c 87       	std	Y+12, r25	; 0x0c
    1240:	ad 87       	std	Y+13, r26	; 0x0d
    1242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1244:	6b 85       	ldd	r22, Y+11	; 0x0b
    1246:	7c 85       	ldd	r23, Y+12	; 0x0c
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a ef       	ldi	r20, 0xFA	; 250
    1252:	54 e4       	ldi	r21, 0x44	; 68
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8f 83       	std	Y+7, r24	; 0x07
    125e:	98 87       	std	Y+8, r25	; 0x08
    1260:	a9 87       	std	Y+9, r26	; 0x09
    1262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <main+0x5f0>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <main+0x66e>
	else if (__tmp > 65535)
    1286:	6f 81       	ldd	r22, Y+7	; 0x07
    1288:	78 85       	ldd	r23, Y+8	; 0x08
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	9a 85       	ldd	r25, Y+10	; 0x0a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	4c f5       	brge	.+82     	; 0x12f0 <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <main+0x650>
    12c8:	88 ec       	ldi	r24, 0xC8	; 200
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <main+0x63e>
    12d8:	9c 83       	std	Y+4, r25	; 0x04
    12da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <main+0x632>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <main+0x67a>
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Buzzer_off();
    1318:	0e 94 ad 09 	call	0x135a	; 0x135a <Buzzer_off>
			command = 0;
    131c:	1b a6       	std	Y+43, r1	; 0x2b
    131e:	60 cd       	rjmp	.-1344   	; 0xde0 <main+0x14a>

00001320 <Buzzer_init>:
⮚ Setup the direction for the buzzer pin as output pin through the
GPIO driver.
⮚ Turn off the buzzer through the GPIO.*/

void Buzzer_init(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);  /* set pin as output*/
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	63 e0       	ldi	r22, 0x03	; 3
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	63 e0       	ldi	r22, 0x03	; 3
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>

}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Buzzer_on>:
/*Description
⮚ Function to enable the Buzzer through the GPIO.*/


void Buzzer_on(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);/* turn ON BUZZER*/
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	63 e0       	ldi	r22, 0x03	; 3
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>

}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <Buzzer_off>:

/*Function to disable the Buzzer through the GPIO*/

void Buzzer_off(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	63 e0       	ldi	r22, 0x03	; 3
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <DcMotor_Init>:

/*********************FUNCTIONS_DEFINTIONS**********************/


void DcMotor_Init(void)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	/*set DC_PINS DIRECTIONS AS OUTPUT */
	GPIO_setupPinDirection(DC_PORT_ID , DC_PIN0_ID , PIN_OUTPUT);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT_ID , DC_PIN1_ID , PIN_OUTPUT);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	64 e0       	ldi	r22, 0x04	; 4
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_setupPinDirection>

	/*stop motor at beginning*/
	GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	63 e0       	ldi	r22, 0x03	; 3
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
	GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>


}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <DcMotor_Rotate>:

/************************************************/
void DcMotor_Rotate(DcMotor_State state)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	0f 92       	push	r0
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	89 83       	std	Y+1, r24	; 0x01

	/* set DC_MOTOR DIRECTION*/
	if(state == STOP)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	88 23       	and	r24, r24
    13b8:	59 f4       	brne	.+22     	; 0x13d0 <DcMotor_Rotate+0x28>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    13ce:	1b c0       	rjmp	.+54     	; 0x1406 <DcMotor_Rotate+0x5e>
	}
	else if(state == ACW)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	59 f4       	brne	.+22     	; 0x13ec <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_HIGH);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	64 e0       	ldi	r22, 0x04	; 4
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <DcMotor_Rotate+0x5e>

	}
	else if(state == CW)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	51 f4       	brne	.+20     	; 0x1406 <DcMotor_Rotate+0x5e>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	63 e0       	ldi	r22, 0x03	; 3
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_HIGH);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	64 e0       	ldi	r22, 0x04	; 4
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
	}




}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <EEPROM_writeByte+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <EEPROM_writeByte+0x8>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1420:	0e 94 06 14 	call	0x280c	; 0x280c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1424:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    1428:	88 30       	cpi	r24, 0x08	; 8
    142a:	11 f0       	breq	.+4      	; 0x1430 <EEPROM_writeByte+0x22>
        return ERROR;
    142c:	1c 82       	std	Y+4, r1	; 0x04
    142e:	28 c0       	rjmp	.+80     	; 0x1480 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	80 70       	andi	r24, 0x00	; 0
    1436:	97 70       	andi	r25, 0x07	; 7
    1438:	88 0f       	add	r24, r24
    143a:	89 2f       	mov	r24, r25
    143c:	88 1f       	adc	r24, r24
    143e:	99 0b       	sbc	r25, r25
    1440:	91 95       	neg	r25
    1442:	80 6a       	ori	r24, 0xA0	; 160
    1444:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1448:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    144c:	88 31       	cpi	r24, 0x18	; 24
    144e:	11 f0       	breq	.+4      	; 0x1454 <EEPROM_writeByte+0x46>
        return ERROR; 
    1450:	1c 82       	std	Y+4, r1	; 0x04
    1452:	16 c0       	rjmp	.+44     	; 0x1480 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    145a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    145e:	88 32       	cpi	r24, 0x28	; 40
    1460:	11 f0       	breq	.+4      	; 0x1466 <EEPROM_writeByte+0x58>
        return ERROR;
    1462:	1c 82       	std	Y+4, r1	; 0x04
    1464:	0d c0       	rjmp	.+26     	; 0x1480 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    146c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    1470:	88 32       	cpi	r24, 0x28	; 40
    1472:	11 f0       	breq	.+4      	; 0x1478 <EEPROM_writeByte+0x6a>
        return ERROR;
    1474:	1c 82       	std	Y+4, r1	; 0x04
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1478:	0e 94 16 14 	call	0x282c	; 0x282c <TWI_stop>
	
    return SUCCESS;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8c 83       	std	Y+4, r24	; 0x04
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <EEPROM_readByte+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <EEPROM_readByte+0x8>
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	7c 83       	std	Y+4, r23	; 0x04
    14a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14a6:	0e 94 06 14 	call	0x280c	; 0x280c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14aa:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <EEPROM_readByte+0x26>
        return ERROR;
    14b2:	1d 82       	std	Y+5, r1	; 0x05
    14b4:	44 c0       	rjmp	.+136    	; 0x153e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	80 70       	andi	r24, 0x00	; 0
    14bc:	97 70       	andi	r25, 0x07	; 7
    14be:	88 0f       	add	r24, r24
    14c0:	89 2f       	mov	r24, r25
    14c2:	88 1f       	adc	r24, r24
    14c4:	99 0b       	sbc	r25, r25
    14c6:	91 95       	neg	r25
    14c8:	80 6a       	ori	r24, 0xA0	; 160
    14ca:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14ce:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    14d2:	88 31       	cpi	r24, 0x18	; 24
    14d4:	11 f0       	breq	.+4      	; 0x14da <EEPROM_readByte+0x4a>
        return ERROR;
    14d6:	1d 82       	std	Y+5, r1	; 0x05
    14d8:	32 c0       	rjmp	.+100    	; 0x153e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14e0:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    14e4:	88 32       	cpi	r24, 0x28	; 40
    14e6:	11 f0       	breq	.+4      	; 0x14ec <EEPROM_readByte+0x5c>
        return ERROR;
    14e8:	1d 82       	std	Y+5, r1	; 0x05
    14ea:	29 c0       	rjmp	.+82     	; 0x153e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    14ec:	0e 94 06 14 	call	0x280c	; 0x280c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14f0:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    14f4:	80 31       	cpi	r24, 0x10	; 16
    14f6:	11 f0       	breq	.+4      	; 0x14fc <EEPROM_readByte+0x6c>
        return ERROR;
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    14fa:	21 c0       	rjmp	.+66     	; 0x153e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	80 70       	andi	r24, 0x00	; 0
    1502:	97 70       	andi	r25, 0x07	; 7
    1504:	88 0f       	add	r24, r24
    1506:	89 2f       	mov	r24, r25
    1508:	88 1f       	adc	r24, r24
    150a:	99 0b       	sbc	r25, r25
    150c:	91 95       	neg	r25
    150e:	81 6a       	ori	r24, 0xA1	; 161
    1510:	0e 94 21 14 	call	0x2842	; 0x2842 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1514:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    1518:	80 34       	cpi	r24, 0x40	; 64
    151a:	11 f0       	breq	.+4      	; 0x1520 <EEPROM_readByte+0x90>
        return ERROR;
    151c:	1d 82       	std	Y+5, r1	; 0x05
    151e:	0f c0       	rjmp	.+30     	; 0x153e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1520:	0e 94 4b 14 	call	0x2896	; 0x2896 <TWI_readByteWithNACK>
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    152a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TWI_getStatus>
    152e:	88 35       	cpi	r24, 0x58	; 88
    1530:	11 f0       	breq	.+4      	; 0x1536 <EEPROM_readByte+0xa6>
        return ERROR;
    1532:	1d 82       	std	Y+5, r1	; 0x05
    1534:	04 c0       	rjmp	.+8      	; 0x153e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1536:	0e 94 16 14 	call	0x282c	; 0x282c <TWI_stop>

    return SUCCESS;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction )
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <GPIO_setupPinDirection+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <GPIO_setupPinDirection+0x8>
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	6a 83       	std	Y+2, r22	; 0x02
    1562:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	08 f0       	brcs	.+2      	; 0x156c <GPIO_setupPinDirection+0x1c>
    156a:	d5 c0       	rjmp	.+426    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	88 30       	cpi	r24, 0x08	; 8
    1570:	08 f0       	brcs	.+2      	; 0x1574 <GPIO_setupPinDirection+0x24>
    1572:	d1 c0       	rjmp	.+418    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
	}
	else
	{


		switch(port_num)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3d 83       	std	Y+5, r19	; 0x05
    157c:	2c 83       	std	Y+4, r18	; 0x04
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <GPIO_setupPinDirection+0x3a>
    1588:	43 c0       	rjmp	.+134    	; 0x1610 <GPIO_setupPinDirection+0xc0>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <GPIO_setupPinDirection+0x4e>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	71 f0       	breq	.+28     	; 0x15b8 <GPIO_setupPinDirection+0x68>
    159c:	bc c0       	rjmp	.+376    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
    159e:	2c 81       	ldd	r18, Y+4	; 0x04
    15a0:	3d 81       	ldd	r19, Y+5	; 0x05
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <GPIO_setupPinDirection+0x5a>
    15a8:	5f c0       	rjmp	.+190    	; 0x1668 <GPIO_setupPinDirection+0x118>
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <GPIO_setupPinDirection+0x66>
    15b4:	85 c0       	rjmp	.+266    	; 0x16c0 <GPIO_setupPinDirection+0x170>
    15b6:	af c0       	rjmp	.+350    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15be:	aa e3       	ldi	r26, 0x3A	; 58
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ea e3       	ldi	r30, 0x3A	; 58
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_setupPinDirection+0x8c>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_setupPinDirection+0x88>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	98 c0       	rjmp	.+304    	; 0x1716 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15e6:	aa e3       	ldi	r26, 0x3A	; 58
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ea e3       	ldi	r30, 0x3A	; 58
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_setupPinDirection+0xb4>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_setupPinDirection+0xb0>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	83 c0       	rjmp	.+262    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1616:	a7 e3       	ldi	r26, 0x37	; 55
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e7 e3       	ldi	r30, 0x37	; 55
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_setupPinDirection+0xe4>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_setupPinDirection+0xe0>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	6c c0       	rjmp	.+216    	; 0x1716 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    163e:	a7 e3       	ldi	r26, 0x37	; 55
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e7 e3       	ldi	r30, 0x37	; 55
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <GPIO_setupPinDirection+0x10c>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <GPIO_setupPinDirection+0x108>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	57 c0       	rjmp	.+174    	; 0x1716 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	a1 f4       	brne	.+40     	; 0x1696 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    166e:	a4 e3       	ldi	r26, 0x34	; 52
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e4 e3       	ldi	r30, 0x34	; 52
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GPIO_setupPinDirection+0x13c>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <GPIO_setupPinDirection+0x138>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	40 c0       	rjmp	.+128    	; 0x1716 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1696:	a4 e3       	ldi	r26, 0x34	; 52
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_setupPinDirection+0x164>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_setupPinDirection+0x160>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	2b c0       	rjmp	.+86     	; 0x1716 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	a1 f4       	brne	.+40     	; 0x16ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16c6:	a1 e3       	ldi	r26, 0x31	; 49
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e1 e3       	ldi	r30, 0x31	; 49
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_setupPinDirection+0x194>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_setupPinDirection+0x190>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16ee:	a1 e3       	ldi	r26, 0x31	; 49
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e1 e3       	ldi	r30, 0x31	; 49
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_setupPinDirection+0x1bc>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_setupPinDirection+0x1b8>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24


		}
	}

}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <GPIO_writePin+0x6>
    172c:	00 d0       	rcall	.+0      	; 0x172e <GPIO_writePin+0x8>
    172e:	0f 92       	push	r0
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	6a 83       	std	Y+2, r22	; 0x02
    1738:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	08 f0       	brcs	.+2      	; 0x1742 <GPIO_writePin+0x1c>
    1740:	d5 c0       	rjmp	.+426    	; 0x18ec <GPIO_writePin+0x1c6>
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	88 30       	cpi	r24, 0x08	; 8
    1746:	08 f0       	brcs	.+2      	; 0x174a <GPIO_writePin+0x24>
    1748:	d1 c0       	rjmp	.+418    	; 0x18ec <GPIO_writePin+0x1c6>
	{
		/****do nothing***/
	}
	else
	{
		switch(port_num)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 83       	std	Y+5, r19	; 0x05
    1752:	2c 83       	std	Y+4, r18	; 0x04
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <GPIO_writePin+0x3a>
    175e:	43 c0       	rjmp	.+134    	; 0x17e6 <GPIO_writePin+0xc0>
    1760:	2c 81       	ldd	r18, Y+4	; 0x04
    1762:	3d 81       	ldd	r19, Y+5	; 0x05
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	2c f4       	brge	.+10     	; 0x1774 <GPIO_writePin+0x4e>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	71 f0       	breq	.+28     	; 0x178e <GPIO_writePin+0x68>
    1772:	bc c0       	rjmp	.+376    	; 0x18ec <GPIO_writePin+0x1c6>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <GPIO_writePin+0x5a>
    177e:	5f c0       	rjmp	.+190    	; 0x183e <GPIO_writePin+0x118>
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <GPIO_writePin+0x66>
    178a:	85 c0       	rjmp	.+266    	; 0x1896 <GPIO_writePin+0x170>
    178c:	af c0       	rjmp	.+350    	; 0x18ec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:


			if(value == LOGIC_HIGH)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA , pin_num);
    1794:	ab e3       	ldi	r26, 0x3B	; 59
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_writePin+0x8c>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_writePin+0x88>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	98 c0       	rjmp	.+304    	; 0x18ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA , pin_num);
    17bc:	ab e3       	ldi	r26, 0x3B	; 59
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	eb e3       	ldi	r30, 0x3B	; 59
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_writePin+0xb4>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_writePin+0xb0>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	83 c0       	rjmp	.+262    	; 0x18ec <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:


			if(value == LOGIC_HIGH)
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	a1 f4       	brne	.+40     	; 0x1814 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB , pin_num);
    17ec:	a8 e3       	ldi	r26, 0x38	; 56
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e8 e3       	ldi	r30, 0x38	; 56
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_writePin+0xe4>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_writePin+0xe0>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	6c c0       	rjmp	.+216    	; 0x18ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB , pin_num);
    1814:	a8 e3       	ldi	r26, 0x38	; 56
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e8 e3       	ldi	r30, 0x38	; 56
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <GPIO_writePin+0x10c>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <GPIO_writePin+0x108>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	57 c0       	rjmp	.+174    	; 0x18ec <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:


			if(value == LOGIC_HIGH)
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	a1 f4       	brne	.+40     	; 0x186c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC , pin_num);
    1844:	a5 e3       	ldi	r26, 0x35	; 53
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e5 e3       	ldi	r30, 0x35	; 53
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_writePin+0x13c>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_writePin+0x138>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	40 c0       	rjmp	.+128    	; 0x18ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC , pin_num);
    186c:	a5 e3       	ldi	r26, 0x35	; 53
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e3       	ldi	r30, 0x35	; 53
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_writePin+0x164>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_writePin+0x160>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	2b c0       	rjmp	.+86     	; 0x18ec <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:


			if(value == LOGIC_HIGH)
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD , pin_num);
    189c:	a2 e3       	ldi	r26, 0x32	; 50
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e2 e3       	ldi	r30, 0x32	; 50
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_writePin+0x194>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_writePin+0x190>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD , pin_num);
    18c4:	a2 e3       	ldi	r26, 0x32	; 50
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e2 e3       	ldi	r30, 0x32	; 50
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_writePin+0x1bc>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_writePin+0x1b8>
    18e6:	80 95       	com	r24
    18e8:	84 23       	and	r24, r20
    18ea:	8c 93       	st	X, r24



	}

}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <GPIO_readPin+0x6>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GPIO_readPin+0x8>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=0;
    190e:	19 82       	std	Y+1, r1	; 0x01

	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	08 f0       	brcs	.+2      	; 0x1918 <GPIO_readPin+0x1c>
    1916:	84 c0       	rjmp	.+264    	; 0x1a20 <GPIO_readPin+0x124>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 30       	cpi	r24, 0x08	; 8
    191c:	08 f0       	brcs	.+2      	; 0x1920 <GPIO_readPin+0x24>
    191e:	80 c0       	rjmp	.+256    	; 0x1a20 <GPIO_readPin+0x124>
	{
		/****return 0***/
	}
	else
	{
		switch(port_num)
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3d 83       	std	Y+5, r19	; 0x05
    1928:	2c 83       	std	Y+4, r18	; 0x04
    192a:	4c 81       	ldd	r20, Y+4	; 0x04
    192c:	5d 81       	ldd	r21, Y+5	; 0x05
    192e:	41 30       	cpi	r20, 0x01	; 1
    1930:	51 05       	cpc	r21, r1
    1932:	79 f1       	breq	.+94     	; 0x1992 <GPIO_readPin+0x96>
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	91 05       	cpc	r25, r1
    193c:	34 f4       	brge	.+12     	; 0x194a <GPIO_readPin+0x4e>
    193e:	2c 81       	ldd	r18, Y+4	; 0x04
    1940:	3d 81       	ldd	r19, Y+5	; 0x05
    1942:	21 15       	cp	r18, r1
    1944:	31 05       	cpc	r19, r1
    1946:	69 f0       	breq	.+26     	; 0x1962 <GPIO_readPin+0x66>
    1948:	6b c0       	rjmp	.+214    	; 0x1a20 <GPIO_readPin+0x124>
    194a:	4c 81       	ldd	r20, Y+4	; 0x04
    194c:	5d 81       	ldd	r21, Y+5	; 0x05
    194e:	42 30       	cpi	r20, 0x02	; 2
    1950:	51 05       	cpc	r21, r1
    1952:	b9 f1       	breq	.+110    	; 0x19c2 <GPIO_readPin+0xc6>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <GPIO_readPin+0x64>
    195e:	49 c0       	rjmp	.+146    	; 0x19f2 <GPIO_readPin+0xf6>
    1960:	5f c0       	rjmp	.+190    	; 0x1a20 <GPIO_readPin+0x124>
		{
		case PORTA_ID:

			if(BIT_IS_SET(PINA,pin_num))
    1962:	e9 e3       	ldi	r30, 0x39	; 57
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <GPIO_readPin+0x7e>
    1976:	55 95       	asr	r21
    1978:	47 95       	ror	r20
    197a:	8a 95       	dec	r24
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <GPIO_readPin+0x7a>
    197e:	ca 01       	movw	r24, r20
    1980:	81 70       	andi	r24, 0x01	; 1
    1982:	90 70       	andi	r25, 0x00	; 0
    1984:	88 23       	and	r24, r24
    1986:	19 f0       	breq	.+6      	; 0x198e <GPIO_readPin+0x92>
			{
				value=LOGIC_HIGH;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	49 c0       	rjmp	.+146    	; 0x1a20 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	47 c0       	rjmp	.+142    	; 0x1a20 <GPIO_readPin+0x124>
			}break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_readPin+0xae>
    19a6:	55 95       	asr	r21
    19a8:	47 95       	ror	r20
    19aa:	8a 95       	dec	r24
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_readPin+0xaa>
    19ae:	ca 01       	movw	r24, r20
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	88 23       	and	r24, r24
    19b6:	19 f0       	breq	.+6      	; 0x19be <GPIO_readPin+0xc2>
			{
				value=LOGIC_HIGH;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	31 c0       	rjmp	.+98     	; 0x1a20 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	2f c0       	rjmp	.+94     	; 0x1a20 <GPIO_readPin+0x124>
			}break;

		case PORTC_ID:

			if(BIT_IS_SET(PINC,pin_num))
    19c2:	e3 e3       	ldi	r30, 0x33	; 51
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a9 01       	movw	r20, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <GPIO_readPin+0xde>
    19d6:	55 95       	asr	r21
    19d8:	47 95       	ror	r20
    19da:	8a 95       	dec	r24
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <GPIO_readPin+0xda>
    19de:	ca 01       	movw	r24, r20
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <GPIO_readPin+0xf2>
			{
				value=LOGIC_HIGH;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	19 c0       	rjmp	.+50     	; 0x1a20 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	17 c0       	rjmp	.+46     	; 0x1a20 <GPIO_readPin+0x124>
			}break;
		case PORTD_ID:

			if(BIT_IS_SET(PIND,pin_num))
    19f2:	e0 e3       	ldi	r30, 0x30	; 48
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_readPin+0x10e>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_readPin+0x10a>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	90 70       	andi	r25, 0x00	; 0
    1a14:	88 23       	and	r24, r24
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <GPIO_readPin+0x122>
			{
				value=LOGIC_HIGH;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return value;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_setupPortDirection+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <GPIO_setupPortDirection+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	90 f5       	brcc	.+100    	; 0x1aac <GPIO_setupPortDirection+0x7a>
		/**do nothing**/
	}
	else
	{

		switch(port_num)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3c 83       	std	Y+4, r19	; 0x04
    1a50:	2b 83       	std	Y+3, r18	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	d1 f0       	breq	.+52     	; 0x1a90 <GPIO_setupPortDirection+0x5e>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <GPIO_setupPortDirection+0x3e>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <GPIO_setupPortDirection+0x54>
    1a6e:	1e c0       	rjmp	.+60     	; 0x1aac <GPIO_setupPortDirection+0x7a>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	81 f0       	breq	.+32     	; 0x1a9a <GPIO_setupPortDirection+0x68>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <GPIO_setupPortDirection+0x72>
    1a84:	13 c0       	rjmp	.+38     	; 0x1aac <GPIO_setupPortDirection+0x7a>
		{

		case PORTA_ID:DDRA=direction;break;
    1a86:	ea e3       	ldi	r30, 0x3A	; 58
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	80 83       	st	Z, r24
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <GPIO_setupPortDirection+0x7a>
		case PORTB_ID:DDRB=direction;break;
    1a90:	e7 e3       	ldi	r30, 0x37	; 55
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <GPIO_setupPortDirection+0x7a>
		case PORTC_ID:DDRC=direction;break;
    1a9a:	e4 e3       	ldi	r30, 0x34	; 52
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	80 83       	st	Z, r24
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <GPIO_setupPortDirection+0x7a>
		case PORTD_ID:DDRD=direction;break;
    1aa4:	e1 e3       	ldi	r30, 0x31	; 49
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	80 83       	st	Z, r24

	}
	}

}
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <GPIO_writePort+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <GPIO_writePort+0x8>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	84 30       	cpi	r24, 0x04	; 4
    1ace:	90 f5       	brcc	.+100    	; 0x1b34 <GPIO_writePort+0x7a>
			/**do nothing**/
		}
		else
		{

			switch(port_num)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3c 83       	std	Y+4, r19	; 0x04
    1ad8:	2b 83       	std	Y+3, r18	; 0x03
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	d1 f0       	breq	.+52     	; 0x1b18 <GPIO_writePort+0x5e>
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <GPIO_writePort+0x3e>
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <GPIO_writePort+0x54>
    1af6:	1e c0       	rjmp	.+60     	; 0x1b34 <GPIO_writePort+0x7a>
    1af8:	2b 81       	ldd	r18, Y+3	; 0x03
    1afa:	3c 81       	ldd	r19, Y+4	; 0x04
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	81 f0       	breq	.+32     	; 0x1b22 <GPIO_writePort+0x68>
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	91 05       	cpc	r25, r1
    1b0a:	81 f0       	breq	.+32     	; 0x1b2c <GPIO_writePort+0x72>
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:PORTA=value;break;
    1b0e:	eb e3       	ldi	r30, 0x3B	; 59
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
    1b16:	0e c0       	rjmp	.+28     	; 0x1b34 <GPIO_writePort+0x7a>
			case PORTB_ID:PORTB=value;break;
    1b18:	e8 e3       	ldi	r30, 0x38	; 56
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	80 83       	st	Z, r24
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <GPIO_writePort+0x7a>
			case PORTC_ID:PORTC=value;break;
    1b22:	e5 e3       	ldi	r30, 0x35	; 53
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	80 83       	st	Z, r24
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <GPIO_writePort+0x7a>
			case PORTD_ID:PORTD=value;break;
    1b2c:	e2 e3       	ldi	r30, 0x32	; 50
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	80 83       	st	Z, r24

			}
		}


}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <GPIO_readPort+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <GPIO_readPort+0x8>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    1b50:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	90 f5       	brcc	.+100    	; 0x1bbc <GPIO_readPort+0x7a>
			{
				/**retuen 0**/
			}
			else
			{
				switch(port_num)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	3c 83       	std	Y+4, r19	; 0x04
    1b60:	2b 83       	std	Y+3, r18	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <GPIO_readPort+0x5e>
    1b6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <GPIO_readPort+0x3e>
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <GPIO_readPort+0x54>
    1b7e:	1e c0       	rjmp	.+60     	; 0x1bbc <GPIO_readPort+0x7a>
    1b80:	2b 81       	ldd	r18, Y+3	; 0x03
    1b82:	3c 81       	ldd	r19, Y+4	; 0x04
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	81 f0       	breq	.+32     	; 0x1baa <GPIO_readPort+0x68>
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	81 f0       	breq	.+32     	; 0x1bb4 <GPIO_readPort+0x72>
    1b94:	13 c0       	rjmp	.+38     	; 0x1bbc <GPIO_readPort+0x7a>
				{
				case PORTA_ID : value = PINA;break;
    1b96:	e9 e3       	ldi	r30, 0x39	; 57
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	0e c0       	rjmp	.+28     	; 0x1bbc <GPIO_readPort+0x7a>
				case PORTB_ID : value = PINB;break;
    1ba0:	e6 e3       	ldi	r30, 0x36	; 54
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <GPIO_readPort+0x7a>
				case PORTC_ID : value = PINC;break;
    1baa:	e3 e3       	ldi	r30, 0x33	; 51
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <GPIO_readPort+0x7a>
				case PORTD_ID : value = PIND;break;
    1bb4:	e0 e3       	ldi	r30, 0x30	; 48
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	89 83       	std	Y+1, r24	; 0x01

				}
			}

	return value;
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01

			}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <LCD_init>:


/****************    Functions Definitions *******************/

void LCD_init(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	2e 97       	sbiw	r28, 0x0e	; 14
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
	/*set direction of screen pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT); /*LCD RS*/
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);  /*LCD E*/
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_setupPinDirection>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a0 ea       	ldi	r26, 0xA0	; 160
    1bfa:	b1 e4       	ldi	r27, 0x41	; 65
    1bfc:	8b 87       	std	Y+11, r24	; 0x0b
    1bfe:	9c 87       	std	Y+12, r25	; 0x0c
    1c00:	ad 87       	std	Y+13, r26	; 0x0d
    1c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8f 83       	std	Y+7, r24	; 0x07
    1c1e:	98 87       	std	Y+8, r25	; 0x08
    1c20:	a9 87       	std	Y+9, r26	; 0x09
    1c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_init+0x7a>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_init+0xda>
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_init+0xc8>
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <LCD_init+0xbc>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_init+0x104>
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
    1cd6:	89 83       	std	Y+1, r24	; 0x01

		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID ,PORT_OUTPUT);  /*data port*/
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_setupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ce0:	88 e3       	ldi	r24, 0x38	; 56
    1ce2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_sendCommand>
#endif


	/*5*7 dot display Mode */
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ce6:	8c e0       	ldi	r24, 0x0C	; 12
    1ce8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_sendCommand>

}
    1cf2:	2e 96       	adiw	r28, 0x0e	; 14
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <LCD_sendCommand>:

/**********************************************************************/


void LCD_sendCommand(uint8 command)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	e9 97       	sbiw	r28, 0x39	; 57
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_LOW);   /* write zero to RS pin to send instruction*/
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e8       	ldi	r26, 0x80	; 128
    1d2a:	bf e3       	ldi	r27, 0x3F	; 63
    1d2c:	8d ab       	std	Y+53, r24	; 0x35
    1d2e:	9e ab       	std	Y+54, r25	; 0x36
    1d30:	af ab       	std	Y+55, r26	; 0x37
    1d32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	6d a9       	ldd	r22, Y+53	; 0x35
    1d36:	7e a9       	ldd	r23, Y+54	; 0x36
    1d38:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a ef       	ldi	r20, 0xFA	; 250
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	89 ab       	std	Y+49, r24	; 0x31
    1d4e:	9a ab       	std	Y+50, r25	; 0x32
    1d50:	ab ab       	std	Y+51, r26	; 0x33
    1d52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d54:	69 a9       	ldd	r22, Y+49	; 0x31
    1d56:	7a a9       	ldd	r23, Y+50	; 0x32
    1d58:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <LCD_sendCommand+0x72>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1d76:	69 a9       	ldd	r22, Y+49	; 0x31
    1d78:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d90:	7e a9       	ldd	r23, Y+54	; 0x36
    1d92:	8f a9       	ldd	r24, Y+55	; 0x37
    1d94:	98 ad       	ldd	r25, Y+56	; 0x38
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	98 ab       	std	Y+48, r25	; 0x30
    1db4:	8f a7       	std	Y+47, r24	; 0x2f
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <LCD_sendCommand+0xd2>
    1db8:	88 ec       	ldi	r24, 0xC8	; 200
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e a7       	std	Y+46, r25	; 0x2e
    1dbe:	8d a7       	std	Y+45, r24	; 0x2d
    1dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_sendCommand+0xc0>
    1dc8:	9e a7       	std	Y+46, r25	; 0x2e
    1dca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dce:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	98 ab       	std	Y+48, r25	; 0x30
    1dd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <LCD_sendCommand+0xb4>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	69 a9       	ldd	r22, Y+49	; 0x31
    1de2:	7a a9       	ldd	r23, Y+50	; 0x32
    1de4:	8b a9       	ldd	r24, Y+51	; 0x33
    1de6:	9c a9       	ldd	r25, Y+52	; 0x34
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	9c a7       	std	Y+44, r25	; 0x2c
    1dfa:	8b a7       	std	Y+43, r24	; 0x2b
    1dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_sendCommand+0xfc>
    1e04:	9c a7       	std	Y+44, r25	; 0x2c
    1e06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to enable pin*/
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e8       	ldi	r26, 0x80	; 128
    1e18:	bf e3       	ldi	r27, 0x3F	; 63
    1e1a:	8f a3       	std	Y+39, r24	; 0x27
    1e1c:	98 a7       	std	Y+40, r25	; 0x28
    1e1e:	a9 a7       	std	Y+41, r26	; 0x29
    1e20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e22:	6f a1       	ldd	r22, Y+39	; 0x27
    1e24:	78 a5       	ldd	r23, Y+40	; 0x28
    1e26:	89 a5       	ldd	r24, Y+41	; 0x29
    1e28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a ef       	ldi	r20, 0xFA	; 250
    1e30:	54 e4       	ldi	r21, 0x44	; 68
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8b a3       	std	Y+35, r24	; 0x23
    1e3c:	9c a3       	std	Y+36, r25	; 0x24
    1e3e:	ad a3       	std	Y+37, r26	; 0x25
    1e40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e42:	6b a1       	ldd	r22, Y+35	; 0x23
    1e44:	7c a1       	ldd	r23, Y+36	; 0x24
    1e46:	8d a1       	ldd	r24, Y+37	; 0x25
    1e48:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e8       	ldi	r20, 0x80	; 128
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <LCD_sendCommand+0x160>
		__ticks = 1;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	3f c0       	rjmp	.+126    	; 0x1ee2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1e64:	6b a1       	ldd	r22, Y+35	; 0x23
    1e66:	7c a1       	ldd	r23, Y+36	; 0x24
    1e68:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	4c f5       	brge	.+82     	; 0x1ece <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e80:	89 a5       	ldd	r24, Y+41	; 0x29
    1e82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9a a3       	std	Y+34, r25	; 0x22
    1ea2:	89 a3       	std	Y+33, r24	; 0x21
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <LCD_sendCommand+0x1c0>
    1ea6:	88 ec       	ldi	r24, 0xC8	; 200
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	98 a3       	std	Y+32, r25	; 0x20
    1eac:	8f 8f       	std	Y+31, r24	; 0x1f
    1eae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb0:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_sendCommand+0x1ae>
    1eb6:	98 a3       	std	Y+32, r25	; 0x20
    1eb8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	9a a3       	std	Y+34, r25	; 0x22
    1ec2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	69 f7       	brne	.-38     	; 0x1ea6 <LCD_sendCommand+0x1a2>
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ece:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_sendCommand+0x1ea>
    1ef2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,command);   /*send command to screen*/
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	69 ad       	ldd	r22, Y+57	; 0x39
    1efa:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <GPIO_writePort>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e8       	ldi	r26, 0x80	; 128
    1f04:	bf e3       	ldi	r27, 0x3F	; 63
    1f06:	89 8f       	std	Y+25, r24	; 0x19
    1f08:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8d 8b       	std	Y+21, r24	; 0x15
    1f28:	9e 8b       	std	Y+22, r25	; 0x16
    1f2a:	af 8b       	std	Y+23, r26	; 0x17
    1f2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_sendCommand+0x2ac>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	89 89       	ldd	r24, Y+17	; 0x11
    1f9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_sendCommand+0x29a>
    1fa2:	9a 8b       	std	Y+18, r25	; 0x12
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_sendCommand+0x28e>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	98 89       	ldd	r25, Y+16	; 0x10
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_sendCommand+0x2d6>
    1fde:	98 8b       	std	Y+16, r25	; 0x10
    1fe0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	8b 87       	std	Y+11, r24	; 0x0b
    1ff6:	9c 87       	std	Y+12, r25	; 0x0c
    1ff8:	ad 87       	std	Y+13, r26	; 0x0d
    1ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8f 83       	std	Y+7, r24	; 0x07
    2016:	98 87       	std	Y+8, r25	; 0x08
    2018:	a9 87       	std	Y+9, r26	; 0x09
    201a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LCD_sendCommand+0x39a>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_sendCommand+0x388>
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <LCD_sendCommand+0x37c>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_sendCommand+0x3c4>
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif

}
    20d0:	e9 96       	adiw	r28, 0x39	; 57
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_displayCharacter>:

/**********************************************************************/


void LCD_displayCharacter(uint8 character)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	e9 97       	sbiw	r28, 0x39	; 57
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_HIGH);   /* write 1 to RS pin to send DATA*/
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	8d ab       	std	Y+53, r24	; 0x35
    210c:	9e ab       	std	Y+54, r25	; 0x36
    210e:	af ab       	std	Y+55, r26	; 0x37
    2110:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6d a9       	ldd	r22, Y+53	; 0x35
    2114:	7e a9       	ldd	r23, Y+54	; 0x36
    2116:	8f a9       	ldd	r24, Y+55	; 0x37
    2118:	98 ad       	ldd	r25, Y+56	; 0x38
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	89 ab       	std	Y+49, r24	; 0x31
    212c:	9a ab       	std	Y+50, r25	; 0x32
    212e:	ab ab       	std	Y+51, r26	; 0x33
    2130:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2132:	69 a9       	ldd	r22, Y+49	; 0x31
    2134:	7a a9       	ldd	r23, Y+50	; 0x32
    2136:	8b a9       	ldd	r24, Y+51	; 0x33
    2138:	9c a9       	ldd	r25, Y+52	; 0x34
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_displayCharacter+0x72>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	98 ab       	std	Y+48, r25	; 0x30
    2150:	8f a7       	std	Y+47, r24	; 0x2f
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2154:	69 a9       	ldd	r22, Y+49	; 0x31
    2156:	7a a9       	ldd	r23, Y+50	; 0x32
    2158:	8b a9       	ldd	r24, Y+51	; 0x33
    215a:	9c a9       	ldd	r25, Y+52	; 0x34
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6d a9       	ldd	r22, Y+53	; 0x35
    216e:	7e a9       	ldd	r23, Y+54	; 0x36
    2170:	8f a9       	ldd	r24, Y+55	; 0x37
    2172:	98 ad       	ldd	r25, Y+56	; 0x38
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_displayCharacter+0xd2>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9e a7       	std	Y+46, r25	; 0x2e
    219c:	8d a7       	std	Y+45, r24	; 0x2d
    219e:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_displayCharacter+0xc0>
    21a6:	9e a7       	std	Y+46, r25	; 0x2e
    21a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	98 a9       	ldd	r25, Y+48	; 0x30
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	98 ab       	std	Y+48, r25	; 0x30
    21b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b6:	98 a9       	ldd	r25, Y+48	; 0x30
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_displayCharacter+0xb4>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	69 a9       	ldd	r22, Y+49	; 0x31
    21c0:	7a a9       	ldd	r23, Y+50	; 0x32
    21c2:	8b a9       	ldd	r24, Y+51	; 0x33
    21c4:	9c a9       	ldd	r25, Y+52	; 0x34
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	9c a7       	std	Y+44, r25	; 0x2c
    21d8:	8b a7       	std	Y+43, r24	; 0x2b
    21da:	8b a5       	ldd	r24, Y+43	; 0x2b
    21dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_displayCharacter+0xfc>
    21e2:	9c a7       	std	Y+44, r25	; 0x2c
    21e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to  E enable pin*/
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e8       	ldi	r26, 0x80	; 128
    21f6:	bf e3       	ldi	r27, 0x3F	; 63
    21f8:	8f a3       	std	Y+39, r24	; 0x27
    21fa:	98 a7       	std	Y+40, r25	; 0x28
    21fc:	a9 a7       	std	Y+41, r26	; 0x29
    21fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a ef       	ldi	r20, 0xFA	; 250
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8b a3       	std	Y+35, r24	; 0x23
    221a:	9c a3       	std	Y+36, r25	; 0x24
    221c:	ad a3       	std	Y+37, r26	; 0x25
    221e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2220:	6b a1       	ldd	r22, Y+35	; 0x23
    2222:	7c a1       	ldd	r23, Y+36	; 0x24
    2224:	8d a1       	ldd	r24, Y+37	; 0x25
    2226:	9e a1       	ldd	r25, Y+38	; 0x26
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2242:	6b a1       	ldd	r22, Y+35	; 0x23
    2244:	7c a1       	ldd	r23, Y+36	; 0x24
    2246:	8d a1       	ldd	r24, Y+37	; 0x25
    2248:	9e a1       	ldd	r25, Y+38	; 0x26
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6f a1       	ldd	r22, Y+39	; 0x27
    225c:	78 a5       	ldd	r23, Y+40	; 0x28
    225e:	89 a5       	ldd	r24, Y+41	; 0x29
    2260:	9a a5       	ldd	r25, Y+42	; 0x2a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_displayCharacter+0x1c0>
    2284:	88 ec       	ldi	r24, 0xC8	; 200
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	98 a3       	std	Y+32, r25	; 0x20
    228a:	8f 8f       	std	Y+31, r24	; 0x1f
    228c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228e:	98 a1       	ldd	r25, Y+32	; 0x20
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_displayCharacter+0x1ae>
    2294:	98 a3       	std	Y+32, r25	; 0x20
    2296:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	89 a1       	ldd	r24, Y+33	; 0x21
    22a4:	9a a1       	ldd	r25, Y+34	; 0x22
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_displayCharacter+0x1a2>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6b a1       	ldd	r22, Y+35	; 0x23
    22ae:	7c a1       	ldd	r23, Y+36	; 0x24
    22b0:	8d a1       	ldd	r24, Y+37	; 0x25
    22b2:	9e a1       	ldd	r25, Y+38	; 0x26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	9e 8f       	std	Y+30, r25	; 0x1e
    22c6:	8d 8f       	std	Y+29, r24	; 0x1d
    22c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_displayCharacter+0x1ea>
    22d0:	9e 8f       	std	Y+30, r25	; 0x1e
    22d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,character);   /*send command to screen*/
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	69 ad       	ldd	r22, Y+57	; 0x39
    22d8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <GPIO_writePort>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 e8       	ldi	r26, 0x80	; 128
    22e2:	bf e3       	ldi	r27, 0x3F	; 63
    22e4:	89 8f       	std	Y+25, r24	; 0x19
    22e6:	9a 8f       	std	Y+26, r25	; 0x1a
    22e8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	69 8d       	ldd	r22, Y+25	; 0x19
    22ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	8d 8b       	std	Y+21, r24	; 0x15
    2306:	9e 8b       	std	Y+22, r25	; 0x16
    2308:	af 8b       	std	Y+23, r26	; 0x17
    230a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230c:	6d 89       	ldd	r22, Y+21	; 0x15
    230e:	7e 89       	ldd	r23, Y+22	; 0x16
    2310:	8f 89       	ldd	r24, Y+23	; 0x17
    2312:	98 8d       	ldd	r25, Y+24	; 0x18
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c 8b       	std	Y+20, r25	; 0x14
    232a:	8b 8b       	std	Y+19, r24	; 0x13
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    232e:	6d 89       	ldd	r22, Y+21	; 0x15
    2330:	7e 89       	ldd	r23, Y+22	; 0x16
    2332:	8f 89       	ldd	r24, Y+23	; 0x17
    2334:	98 8d       	ldd	r25, Y+24	; 0x18
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	69 8d       	ldd	r22, Y+25	; 0x19
    2348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
    236e:	0f c0       	rjmp	.+30     	; 0x238e <LCD_displayCharacter+0x2ac>
    2370:	88 ec       	ldi	r24, 0xC8	; 200
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9a 8b       	std	Y+18, r25	; 0x12
    2376:	89 8b       	std	Y+17, r24	; 0x11
    2378:	89 89       	ldd	r24, Y+17	; 0x11
    237a:	9a 89       	ldd	r25, Y+18	; 0x12
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <LCD_displayCharacter+0x29a>
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8b 89       	ldd	r24, Y+19	; 0x13
    2386:	9c 89       	ldd	r25, Y+20	; 0x14
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9c 8b       	std	Y+20, r25	; 0x14
    238c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	9c 89       	ldd	r25, Y+20	; 0x14
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <LCD_displayCharacter+0x28e>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	6d 89       	ldd	r22, Y+21	; 0x15
    239a:	7e 89       	ldd	r23, Y+22	; 0x16
    239c:	8f 89       	ldd	r24, Y+23	; 0x17
    239e:	98 8d       	ldd	r25, Y+24	; 0x18
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	98 8b       	std	Y+16, r25	; 0x10
    23b2:	8f 87       	std	Y+15, r24	; 0x0f
    23b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b6:	98 89       	ldd	r25, Y+16	; 0x10
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_displayCharacter+0x2d6>
    23bc:	98 8b       	std	Y+16, r25	; 0x10
    23be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	61 e0       	ldi	r22, 0x01	; 1
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 93 0b 	call	0x1726	; 0x1726 <GPIO_writePin>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e8       	ldi	r26, 0x80	; 128
    23d0:	bf e3       	ldi	r27, 0x3F	; 63
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_displayCharacter+0x39a>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_displayCharacter+0x388>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <LCD_displayCharacter+0x37c>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_displayCharacter+0x3c4>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif


}
    24ae:	e9 96       	adiw	r28, 0x39	; 57
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <LCD_displayString>:

/**********************************************************************/

void LCD_displayString(const char *Str)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <LCD_displayString+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <LCD_displayString+0x8>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <LCD_displayString+0xa>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
	uint32 i=0;
    24d2:	19 82       	std	Y+1, r1	; 0x01
    24d4:	1a 82       	std	Y+2, r1	; 0x02
    24d6:	1b 82       	std	Y+3, r1	; 0x03
    24d8:	1c 82       	std	Y+4, r1	; 0x04
    24da:	15 c0       	rjmp	.+42     	; 0x2506 <LCD_displayString+0x46>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24dc:	29 81       	ldd	r18, Y+1	; 0x01
    24de:	3a 81       	ldd	r19, Y+2	; 0x02
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	fc 01       	movw	r30, r24
    24e6:	e2 0f       	add	r30, r18
    24e8:	f3 1f       	adc	r31, r19
    24ea:	80 81       	ld	r24, Z
    24ec:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_displayCharacter>
		i++;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	ab 81       	ldd	r26, Y+3	; 0x03
    24f6:	bc 81       	ldd	r27, Y+4	; 0x04
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	a1 1d       	adc	r26, r1
    24fc:	b1 1d       	adc	r27, r1
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	ab 83       	std	Y+3, r26	; 0x03
    2504:	bc 83       	std	Y+4, r27	; 0x04
/**********************************************************************/

void LCD_displayString(const char *Str)
{
	uint32 i=0;
	while(Str[i] != '\0')
    2506:	29 81       	ldd	r18, Y+1	; 0x01
    2508:	3a 81       	ldd	r19, Y+2	; 0x02
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	80 81       	ld	r24, Z
    2516:	88 23       	and	r24, r24
    2518:	09 f7       	brne	.-62     	; 0x24dc <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    251a:	26 96       	adiw	r28, 0x06	; 6
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <LCD_moveCursor>:

/**********************************************************************/


void LCD_moveCursor(uint8 row,uint8 col)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <LCD_moveCursor+0x6>
    2532:	00 d0       	rcall	.+0      	; 0x2534 <LCD_moveCursor+0x8>
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	8a 83       	std	Y+2, r24	; 0x02
    253c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	3d 83       	std	Y+5, r19	; 0x05
    2546:	2c 83       	std	Y+4, r18	; 0x04
    2548:	8c 81       	ldd	r24, Y+4	; 0x04
    254a:	9d 81       	ldd	r25, Y+5	; 0x05
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	91 05       	cpc	r25, r1
    2550:	c1 f0       	breq	.+48     	; 0x2582 <LCD_moveCursor+0x56>
    2552:	2c 81       	ldd	r18, Y+4	; 0x04
    2554:	3d 81       	ldd	r19, Y+5	; 0x05
    2556:	22 30       	cpi	r18, 0x02	; 2
    2558:	31 05       	cpc	r19, r1
    255a:	2c f4       	brge	.+10     	; 0x2566 <LCD_moveCursor+0x3a>
    255c:	8c 81       	ldd	r24, Y+4	; 0x04
    255e:	9d 81       	ldd	r25, Y+5	; 0x05
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	61 f0       	breq	.+24     	; 0x257c <LCD_moveCursor+0x50>
    2564:	19 c0       	rjmp	.+50     	; 0x2598 <LCD_moveCursor+0x6c>
    2566:	2c 81       	ldd	r18, Y+4	; 0x04
    2568:	3d 81       	ldd	r19, Y+5	; 0x05
    256a:	22 30       	cpi	r18, 0x02	; 2
    256c:	31 05       	cpc	r19, r1
    256e:	69 f0       	breq	.+26     	; 0x258a <LCD_moveCursor+0x5e>
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	9d 81       	ldd	r25, Y+5	; 0x05
    2574:	83 30       	cpi	r24, 0x03	; 3
    2576:	91 05       	cpc	r25, r1
    2578:	61 f0       	breq	.+24     	; 0x2592 <LCD_moveCursor+0x66>
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <LCD_moveCursor+0x6c>
	{
	case 0 : lcd_memory_address= col;break;
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	0b c0       	rjmp	.+22     	; 0x2598 <LCD_moveCursor+0x6c>
	case 1:  lcd_memory_address= col+0x40;break;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	80 5c       	subi	r24, 0xC0	; 192
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <LCD_moveCursor+0x6c>
	case 2:  lcd_memory_address= col+0x10;break;
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	80 5f       	subi	r24, 0xF0	; 240
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <LCD_moveCursor+0x6c>
	case 3:  lcd_memory_address= col+0x50;break;
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	80 5b       	subi	r24, 0xB0	; 176
    2596:	89 83       	std	Y+1, r24	; 0x01


	}

	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);  /*address of cursor the MSB always be 1*/
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_sendCommand>
	/*so thats why we made address or with 0x80*/


}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <LCD_displayStringRowColumn>:

/**********************************************************************/

void LCD_displayStringRowColumn(uint8 row , uint8 col,const char *str)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <LCD_displayStringRowColumn+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <LCD_displayStringRowColumn+0x8>
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	6a 83       	std	Y+2, r22	; 0x02
    25c0:	5c 83       	std	Y+4, r21	; 0x04
    25c2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);  /*required position*/
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	6a 81       	ldd	r22, Y+2	; 0x02
    25c8:	0e 94 96 12 	call	0x252c	; 0x252c <LCD_moveCursor>
	LCD_displayString(str);  /*display string/*/
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_displayString>

}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <LCD_intgerToString>:
/**********************************************************************/

void LCD_intgerToString(int data)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	62 97       	sbiw	r28, 0x12	; 18
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	9a 8b       	std	Y+18, r25	; 0x12
    25f8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25fa:	89 89       	ldd	r24, Y+17	; 0x11
    25fc:	9a 89       	ldd	r25, Y+18	; 0x12
    25fe:	9e 01       	movw	r18, r28
    2600:	2f 5f       	subi	r18, 0xFF	; 255
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	b9 01       	movw	r22, r18
    2606:	4a e0       	ldi	r20, 0x0A	; 10
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	0e 94 04 16 	call	0x2c08	; 0x2c08 <itoa>
	LCD_displayString(buff);
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_displayString>
}
    2616:	62 96       	adiw	r28, 0x12	; 18
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <LCD_clearScreen>:

/**********************************************************************/

void LCD_clearScreen(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_sendCommand>
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <__vector_7>:

/************************  Interrupt Service Routines ****************************/

/*for CTC mode*/
ISR(TIMER1_COMPA_vect)
{
    263c:	1f 92       	push	r1
    263e:	0f 92       	push	r0
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	0f 92       	push	r0
    2644:	11 24       	eor	r1, r1
    2646:	2f 93       	push	r18
    2648:	3f 93       	push	r19
    264a:	4f 93       	push	r20
    264c:	5f 93       	push	r21
    264e:	6f 93       	push	r22
    2650:	7f 93       	push	r23
    2652:	8f 93       	push	r24
    2654:	9f 93       	push	r25
    2656:	af 93       	push	r26
    2658:	bf 93       	push	r27
    265a:	ef 93       	push	r30
    265c:	ff 93       	push	r31
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2666:	80 91 78 00 	lds	r24, 0x0078
    266a:	90 91 79 00 	lds	r25, 0x0079
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	29 f0       	breq	.+10     	; 0x267c <__vector_7+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    2672:	e0 91 78 00 	lds	r30, 0x0078
    2676:	f0 91 79 00 	lds	r31, 0x0079
    267a:	09 95       	icall
	}


}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	ff 91       	pop	r31
    2682:	ef 91       	pop	r30
    2684:	bf 91       	pop	r27
    2686:	af 91       	pop	r26
    2688:	9f 91       	pop	r25
    268a:	8f 91       	pop	r24
    268c:	7f 91       	pop	r23
    268e:	6f 91       	pop	r22
    2690:	5f 91       	pop	r21
    2692:	4f 91       	pop	r20
    2694:	3f 91       	pop	r19
    2696:	2f 91       	pop	r18
    2698:	0f 90       	pop	r0
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	0f 90       	pop	r0
    269e:	1f 90       	pop	r1
    26a0:	18 95       	reti

000026a2 <__vector_9>:

/* for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    26a2:	1f 92       	push	r1
    26a4:	0f 92       	push	r0
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	0f 92       	push	r0
    26aa:	11 24       	eor	r1, r1
    26ac:	2f 93       	push	r18
    26ae:	3f 93       	push	r19
    26b0:	4f 93       	push	r20
    26b2:	5f 93       	push	r21
    26b4:	6f 93       	push	r22
    26b6:	7f 93       	push	r23
    26b8:	8f 93       	push	r24
    26ba:	9f 93       	push	r25
    26bc:	af 93       	push	r26
    26be:	bf 93       	push	r27
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    26cc:	80 91 78 00 	lds	r24, 0x0078
    26d0:	90 91 79 00 	lds	r25, 0x0079
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	29 f0       	breq	.+10     	; 0x26e2 <__vector_9+0x40>
	{
		/*call application function*/
		(*g_callBackPtr)();
    26d8:	e0 91 78 00 	lds	r30, 0x0078
    26dc:	f0 91 79 00 	lds	r31, 0x0079
    26e0:	09 95       	icall
	}

}
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	7f 91       	pop	r23
    26f4:	6f 91       	pop	r22
    26f6:	5f 91       	pop	r21
    26f8:	4f 91       	pop	r20
    26fa:	3f 91       	pop	r19
    26fc:	2f 91       	pop	r18
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	0f 90       	pop	r0
    2704:	1f 90       	pop	r1
    2706:	18 95       	reti

00002708 <Timer1_init>:

/*****************FINCTION_DEFINTION***************************************/


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <Timer1_init+0x6>
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
	/**Normal port operation, OC1A/OC1B disconnected*/
	TCCR1A = (1<<FOC1A) ;
    2716:	ef e4       	ldi	r30, 0x4F	; 79
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	88 e0       	ldi	r24, 0x08	; 8
    271c:	80 83       	st	Z, r24

	TCCR1B = (TCCR1B &0xF7) |  ((Config_Ptr->mode) <<3 );   /* to set timer mode*/
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	28 2f       	mov	r18, r24
    272a:	27 7f       	andi	r18, 0xF7	; 247
    272c:	e9 81       	ldd	r30, Y+1	; 0x01
    272e:	fa 81       	ldd	r31, Y+2	; 0x02
    2730:	85 81       	ldd	r24, Z+5	; 0x05
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	82 2b       	or	r24, r18
    2744:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B &0xF8) |  ((Config_Ptr->prescaler) );  /* prescaler*/
    2746:	ae e4       	ldi	r26, 0x4E	; 78
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	ee e4       	ldi	r30, 0x4E	; 78
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	98 2f       	mov	r25, r24
    2752:	98 7f       	andi	r25, 0xF8	; 248
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	84 81       	ldd	r24, Z+4	; 0x04
    275a:	89 2b       	or	r24, r25
    275c:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    275e:	ac e4       	ldi	r26, 0x4C	; 76
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e9 81       	ldd	r30, Y+1	; 0x01
    2764:	fa 81       	ldd	r31, Y+2	; 0x02
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	11 96       	adiw	r26, 0x01	; 1
    276c:	9c 93       	st	X, r25
    276e:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == CTC )
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	85 81       	ldd	r24, Z+5	; 0x05
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	71 f4       	brne	.+28     	; 0x2796 <Timer1_init+0x8e>
	{
		OCR1A = Config_Ptr->compare_value ;
    277a:	aa e4       	ldi	r26, 0x4A	; 74
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	9c 93       	st	X, r25
    278a:	8e 93       	st	-X, r24
		TIMSK  = (1<<OCIE1A); /*Output Compare A Match Interrupt Enable*/
    278c:	e9 e5       	ldi	r30, 0x59	; 89
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 e1       	ldi	r24, 0x10	; 16
    2792:	80 83       	st	Z, r24
    2794:	04 c0       	rjmp	.+8      	; 0x279e <Timer1_init+0x96>
	}
	else
	{
		TIMSK  = (1<<TOIE1); /*Overflow Interrupt Enable*/
    2796:	e9 e5       	ldi	r30, 0x59	; 89
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	84 e0       	ldi	r24, 0x04	; 4
    279c:	80 83       	st	Z, r24

	}
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <Timer1_deInit>:

	/****************************************************************************/
	void Timer1_deInit(void)
	{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62

		TCCR1B = 0 ;  /*no clock*/
    27b0:	ee e4       	ldi	r30, 0x4E	; 78
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	10 82       	st	Z, r1

	}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <Timer1_setCallBack>:
	/**************************************************************/

	void Timer1_setCallBack( void(*a_ptr)(void) )
	{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <Timer1_setCallBack+0x6>
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
		{
			/* Save the address of the Call back function in a global variable */
			g_callBackPtr = a_ptr;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	90 93 79 00 	sts	0x0079, r25
    27d2:	80 93 78 00 	sts	0x0078, r24
		}

	}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    27e8:	e0 e2       	ldi	r30, 0x20	; 32
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	80 83       	st	Z, r24
	TWSR = 0x00;
    27f0:	e1 e2       	ldi	r30, 0x21	; 33
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    27f6:	e2 e2       	ldi	r30, 0x22	; 34
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	82 e0       	ldi	r24, 0x02	; 2
    27fc:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    27fe:	e6 e5       	ldi	r30, 0x56	; 86
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	80 83       	st	Z, r24
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <TWI_start>:

void TWI_start(void)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2814:	e6 e5       	ldi	r30, 0x56	; 86
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	84 ea       	ldi	r24, 0xA4	; 164
    281a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    281c:	e6 e5       	ldi	r30, 0x56	; 86
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	dc f7       	brge	.-10     	; 0x281c <TWI_start+0x10>
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <TWI_stop>:

void TWI_stop(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2834:	e6 e5       	ldi	r30, 0x56	; 86
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	84 e9       	ldi	r24, 0x94	; 148
    283a:	80 83       	st	Z, r24
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	0f 92       	push	r0
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    284e:	e3 e2       	ldi	r30, 0x23	; 35
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2856:	e6 e5       	ldi	r30, 0x56	; 86
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	84 e8       	ldi	r24, 0x84	; 132
    285c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    285e:	e6 e5       	ldi	r30, 0x56	; 86
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	88 23       	and	r24, r24
    2866:	dc f7       	brge	.-10     	; 0x285e <TWI_writeByte+0x1c>
}
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2878:	e6 e5       	ldi	r30, 0x56	; 86
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	84 ec       	ldi	r24, 0xC4	; 196
    287e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2880:	e6 e5       	ldi	r30, 0x56	; 86
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	88 23       	and	r24, r24
    2888:	dc f7       	brge	.-10     	; 0x2880 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    288a:	e3 e2       	ldi	r30, 0x23	; 35
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    289e:	e6 e5       	ldi	r30, 0x56	; 86
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	84 e8       	ldi	r24, 0x84	; 132
    28a4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28a6:	e6 e5       	ldi	r30, 0x56	; 86
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	88 23       	and	r24, r24
    28ae:	dc f7       	brge	.-10     	; 0x28a6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    28b0:	e3 e2       	ldi	r30, 0x23	; 35
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	0f 92       	push	r0
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    28c6:	e1 e2       	ldi	r30, 0x21	; 33
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	88 7f       	andi	r24, 0xF8	; 248
    28ce:	89 83       	std	Y+1, r24	; 0x01
    return status;
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <UART_init>:

/*****Function DEFINITIONS**************/


void UART_init(const USART_ConfigType* Config_Ptr )
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <UART_init+0x6>
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <UART_init+0x8>
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value =0;
    28ea:	1a 82       	std	Y+2, r1	; 0x02
    28ec:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X) ;   /* Double the USART Transmission Speed*/
    28ee:	eb e2       	ldi	r30, 0x2B	; 43
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);  /* enable UART*/
    28f6:	ea e2       	ldi	r30, 0x2A	; 42
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	88 e1       	ldi	r24, 0x18	; 24
    28fc:	80 83       	st	Z, r24

	UCSRB = (UCSRB&0xFB) | ((Config_Ptr->datasize) & 0x4) ;  /*  UCSZ2 for data size*/
    28fe:	aa e2       	ldi	r26, 0x2A	; 42
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	ea e2       	ldi	r30, 0x2A	; 42
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	98 2f       	mov	r25, r24
    290a:	9b 7f       	andi	r25, 0xFB	; 251
    290c:	eb 81       	ldd	r30, Y+3	; 0x03
    290e:	fc 81       	ldd	r31, Y+4	; 0x04
    2910:	83 81       	ldd	r24, Z+3	; 0x03
    2912:	84 70       	andi	r24, 0x04	; 4
    2914:	89 2b       	or	r24, r25
    2916:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL); /* to select UCSRC register*/
    2918:	a0 e4       	ldi	r26, 0x40	; 64
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e0 e4       	ldi	r30, 0x40	; 64
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	80 68       	ori	r24, 0x80	; 128
    2924:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);  /* to select USART MODE*/
    2926:	a0 e4       	ldi	r26, 0x40	; 64
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e0 e4       	ldi	r30, 0x40	; 64
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	28 2f       	mov	r18, r24
    2932:	2f 7b       	andi	r18, 0xBF	; 191
    2934:	eb 81       	ldd	r30, Y+3	; 0x03
    2936:	fc 81       	ldd	r31, Y+4	; 0x04
    2938:	80 81       	ld	r24, Z
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	00 24       	eor	r0, r0
    2940:	96 95       	lsr	r25
    2942:	87 95       	ror	r24
    2944:	07 94       	ror	r0
    2946:	96 95       	lsr	r25
    2948:	87 95       	ror	r24
    294a:	07 94       	ror	r0
    294c:	98 2f       	mov	r25, r24
    294e:	80 2d       	mov	r24, r0
    2950:	82 2b       	or	r24, r18
    2952:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)  << 4); /*Parity Mode*/
    2954:	a0 e4       	ldi	r26, 0x40	; 64
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e0 e4       	ldi	r30, 0x40	; 64
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	28 2f       	mov	r18, r24
    2960:	2f 7c       	andi	r18, 0xCF	; 207
    2962:	eb 81       	ldd	r30, Y+3	; 0x03
    2964:	fc 81       	ldd	r31, Y+4	; 0x04
    2966:	81 81       	ldd	r24, Z+1	; 0x01
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	82 95       	swap	r24
    296e:	92 95       	swap	r25
    2970:	90 7f       	andi	r25, 0xF0	; 240
    2972:	98 27       	eor	r25, r24
    2974:	80 7f       	andi	r24, 0xF0	; 240
    2976:	98 27       	eor	r25, r24
    2978:	82 2b       	or	r24, r18
    297a:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopbit)  << 3); /* stop bit*/
    297c:	a0 e4       	ldi	r26, 0x40	; 64
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e0 e4       	ldi	r30, 0x40	; 64
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	28 2f       	mov	r18, r24
    2988:	27 7f       	andi	r18, 0xF7	; 247
    298a:	eb 81       	ldd	r30, Y+3	; 0x03
    298c:	fc 81       	ldd	r31, Y+4	; 0x04
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	82 2b       	or	r24, r18
    29a2:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (( (Config_Ptr->datasize)& 0x3) <<1) ; /* for data size*/
    29a4:	a0 e4       	ldi	r26, 0x40	; 64
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e0 e4       	ldi	r30, 0x40	; 64
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	28 2f       	mov	r18, r24
    29b0:	29 7f       	andi	r18, 0xF9	; 249
    29b2:	eb 81       	ldd	r30, Y+3	; 0x03
    29b4:	fc 81       	ldd	r31, Y+4	; 0x04
    29b6:	83 81       	ldd	r24, Z+3	; 0x03
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	83 70       	andi	r24, 0x03	; 3
    29be:	90 70       	andi	r25, 0x00	; 0
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	82 2b       	or	r24, r18
    29c6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    29c8:	eb 81       	ldd	r30, Y+3	; 0x03
    29ca:	fc 81       	ldd	r31, Y+4	; 0x04
    29cc:	84 81       	ldd	r24, Z+4	; 0x04
    29ce:	95 81       	ldd	r25, Z+5	; 0x05
    29d0:	a6 81       	ldd	r26, Z+6	; 0x06
    29d2:	b7 81       	ldd	r27, Z+7	; 0x07
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	aa 1f       	adc	r26, r26
    29da:	bb 1f       	adc	r27, r27
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	aa 1f       	adc	r26, r26
    29ea:	bb 1f       	adc	r27, r27
    29ec:	9c 01       	movw	r18, r24
    29ee:	ad 01       	movw	r20, r26
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	92 e1       	ldi	r25, 0x12	; 18
    29f4:	aa e7       	ldi	r26, 0x7A	; 122
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__udivmodsi4>
    2a00:	da 01       	movw	r26, r20
    2a02:	c9 01       	movw	r24, r18
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a0a:	e0 e4       	ldi	r30, 0x40	; 64
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	89 2f       	mov	r24, r25
    2a14:	99 27       	eor	r25, r25
    2a16:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a18:	e9 e2       	ldi	r30, 0x29	; 41
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	80 83       	st	Z, r24

}
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <UART_sendByte>:
/***********************************************************************************************/

void UART_sendByte(const uint8 data)

{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}  /* wait until transmit is complete*/
    2a3a:	eb e2       	ldi	r30, 0x2B	; 43
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	80 72       	andi	r24, 0x20	; 32
    2a46:	90 70       	andi	r25, 0x00	; 0
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	b9 f3       	breq	.-18     	; 0x2a3a <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a4c:	ec e2       	ldi	r30, 0x2C	; 44
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 83       	st	Z, r24

}
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <UART_recieveByte>:
/*************************************************************************************************/

uint8 UART_recieveByte(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a64:	eb e2       	ldi	r30, 0x2B	; 43
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	dc f7       	brge	.-10     	; 0x2a64 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2a6e:	ec e2       	ldi	r30, 0x2C	; 44
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z

}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <UART_sendString>:
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <UART_sendString+0x6>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <UART_sendString+0x8>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i =0;
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <UART_sendString+0x34>
while(Str[i] != '\0')
{
	UART_sendByte(Str[i]);
    2a90:	2b 81       	ldd	r18, Y+3	; 0x03
    2a92:	3c 81       	ldd	r19, Y+4	; 0x04
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	f9 01       	movw	r30, r18
    2a9a:	e8 0f       	add	r30, r24
    2a9c:	f9 1f       	adc	r31, r25
    2a9e:	80 81       	ld	r24, Z
    2aa0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <UART_sendByte>
	i++;
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
}
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint16 i =0;
while(Str[i] != '\0')
    2aae:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	f9 01       	movw	r30, r18
    2ab8:	e8 0f       	add	r30, r24
    2aba:	f9 1f       	adc	r31, r25
    2abc:	80 81       	ld	r24, Z
    2abe:	88 23       	and	r24, r24
    2ac0:	39 f7       	brne	.-50     	; 0x2a90 <UART_sendString+0x16>
{
	UART_sendByte(Str[i]);
	i++;
}

}
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <UART_receiveString>:

/*******************************************************************************************/
void UART_receiveString(uint8 *Str)
{
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	00 d0       	rcall	.+0      	; 0x2ada <UART_receiveString+0xa>
    2ada:	0f 92       	push	r0
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	9b 83       	std	Y+3, r25	; 0x03
    2ae2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2ae4:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	8c 01       	movw	r16, r24
    2af2:	02 0f       	add	r16, r18
    2af4:	13 1f       	adc	r17, r19
    2af6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    2afa:	f8 01       	movw	r30, r16
    2afc:	80 83       	st	Z, r24
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	8f 5f       	subi	r24, 0xFF	; 255
    2b04:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b10:	8c 01       	movw	r16, r24
    2b12:	02 0f       	add	r16, r18
    2b14:	13 1f       	adc	r17, r19
    2b16:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_recieveByte>
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e2 0f       	add	r30, r18
    2b2c:	f3 1f       	adc	r31, r19
    2b2e:	80 81       	ld	r24, Z
    2b30:	83 32       	cpi	r24, 0x23	; 35
    2b32:	31 f7       	brne	.-52     	; 0x2b00 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	10 82       	st	Z, r1


}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <__udivmodsi4>:
    2b56:	a1 e2       	ldi	r26, 0x21	; 33
    2b58:	1a 2e       	mov	r1, r26
    2b5a:	aa 1b       	sub	r26, r26
    2b5c:	bb 1b       	sub	r27, r27
    2b5e:	fd 01       	movw	r30, r26
    2b60:	0d c0       	rjmp	.+26     	; 0x2b7c <__udivmodsi4_ep>

00002b62 <__udivmodsi4_loop>:
    2b62:	aa 1f       	adc	r26, r26
    2b64:	bb 1f       	adc	r27, r27
    2b66:	ee 1f       	adc	r30, r30
    2b68:	ff 1f       	adc	r31, r31
    2b6a:	a2 17       	cp	r26, r18
    2b6c:	b3 07       	cpc	r27, r19
    2b6e:	e4 07       	cpc	r30, r20
    2b70:	f5 07       	cpc	r31, r21
    2b72:	20 f0       	brcs	.+8      	; 0x2b7c <__udivmodsi4_ep>
    2b74:	a2 1b       	sub	r26, r18
    2b76:	b3 0b       	sbc	r27, r19
    2b78:	e4 0b       	sbc	r30, r20
    2b7a:	f5 0b       	sbc	r31, r21

00002b7c <__udivmodsi4_ep>:
    2b7c:	66 1f       	adc	r22, r22
    2b7e:	77 1f       	adc	r23, r23
    2b80:	88 1f       	adc	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	1a 94       	dec	r1
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <__udivmodsi4_loop>
    2b88:	60 95       	com	r22
    2b8a:	70 95       	com	r23
    2b8c:	80 95       	com	r24
    2b8e:	90 95       	com	r25
    2b90:	9b 01       	movw	r18, r22
    2b92:	ac 01       	movw	r20, r24
    2b94:	bd 01       	movw	r22, r26
    2b96:	cf 01       	movw	r24, r30
    2b98:	08 95       	ret

00002b9a <__prologue_saves__>:
    2b9a:	2f 92       	push	r2
    2b9c:	3f 92       	push	r3
    2b9e:	4f 92       	push	r4
    2ba0:	5f 92       	push	r5
    2ba2:	6f 92       	push	r6
    2ba4:	7f 92       	push	r7
    2ba6:	8f 92       	push	r8
    2ba8:	9f 92       	push	r9
    2baa:	af 92       	push	r10
    2bac:	bf 92       	push	r11
    2bae:	cf 92       	push	r12
    2bb0:	df 92       	push	r13
    2bb2:	ef 92       	push	r14
    2bb4:	ff 92       	push	r15
    2bb6:	0f 93       	push	r16
    2bb8:	1f 93       	push	r17
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	ca 1b       	sub	r28, r26
    2bc4:	db 0b       	sbc	r29, r27
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	09 94       	ijmp

00002bd2 <__epilogue_restores__>:
    2bd2:	2a 88       	ldd	r2, Y+18	; 0x12
    2bd4:	39 88       	ldd	r3, Y+17	; 0x11
    2bd6:	48 88       	ldd	r4, Y+16	; 0x10
    2bd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bda:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bde:	8c 84       	ldd	r8, Y+12	; 0x0c
    2be0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2be2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2be4:	b9 84       	ldd	r11, Y+9	; 0x09
    2be6:	c8 84       	ldd	r12, Y+8	; 0x08
    2be8:	df 80       	ldd	r13, Y+7	; 0x07
    2bea:	ee 80       	ldd	r14, Y+6	; 0x06
    2bec:	fd 80       	ldd	r15, Y+5	; 0x05
    2bee:	0c 81       	ldd	r16, Y+4	; 0x04
    2bf0:	1b 81       	ldd	r17, Y+3	; 0x03
    2bf2:	aa 81       	ldd	r26, Y+2	; 0x02
    2bf4:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf6:	ce 0f       	add	r28, r30
    2bf8:	d1 1d       	adc	r29, r1
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	ed 01       	movw	r28, r26
    2c06:	08 95       	ret

00002c08 <itoa>:
    2c08:	fb 01       	movw	r30, r22
    2c0a:	9f 01       	movw	r18, r30
    2c0c:	e8 94       	clt
    2c0e:	42 30       	cpi	r20, 0x02	; 2
    2c10:	c4 f0       	brlt	.+48     	; 0x2c42 <itoa+0x3a>
    2c12:	45 32       	cpi	r20, 0x25	; 37
    2c14:	b4 f4       	brge	.+44     	; 0x2c42 <itoa+0x3a>
    2c16:	4a 30       	cpi	r20, 0x0A	; 10
    2c18:	29 f4       	brne	.+10     	; 0x2c24 <itoa+0x1c>
    2c1a:	97 fb       	bst	r25, 7
    2c1c:	1e f4       	brtc	.+6      	; 0x2c24 <itoa+0x1c>
    2c1e:	90 95       	com	r25
    2c20:	81 95       	neg	r24
    2c22:	9f 4f       	sbci	r25, 0xFF	; 255
    2c24:	64 2f       	mov	r22, r20
    2c26:	77 27       	eor	r23, r23
    2c28:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__udivmodhi4>
    2c2c:	80 5d       	subi	r24, 0xD0	; 208
    2c2e:	8a 33       	cpi	r24, 0x3A	; 58
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <itoa+0x2c>
    2c32:	89 5d       	subi	r24, 0xD9	; 217
    2c34:	81 93       	st	Z+, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	a1 f7       	brne	.-24     	; 0x2c24 <itoa+0x1c>
    2c3c:	16 f4       	brtc	.+4      	; 0x2c42 <itoa+0x3a>
    2c3e:	5d e2       	ldi	r21, 0x2D	; 45
    2c40:	51 93       	st	Z+, r21
    2c42:	10 82       	st	Z, r1
    2c44:	c9 01       	movw	r24, r18
    2c46:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <strrev>

00002c4a <strrev>:
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	67 2f       	mov	r22, r23
    2c50:	71 91       	ld	r23, Z+
    2c52:	77 23       	and	r23, r23
    2c54:	e1 f7       	brne	.-8      	; 0x2c4e <strrev+0x4>
    2c56:	32 97       	sbiw	r30, 0x02	; 2
    2c58:	04 c0       	rjmp	.+8      	; 0x2c62 <strrev+0x18>
    2c5a:	7c 91       	ld	r23, X
    2c5c:	6d 93       	st	X+, r22
    2c5e:	70 83       	st	Z, r23
    2c60:	62 91       	ld	r22, -Z
    2c62:	ae 17       	cp	r26, r30
    2c64:	bf 07       	cpc	r27, r31
    2c66:	c8 f3       	brcs	.-14     	; 0x2c5a <strrev+0x10>
    2c68:	08 95       	ret

00002c6a <__udivmodhi4>:
    2c6a:	aa 1b       	sub	r26, r26
    2c6c:	bb 1b       	sub	r27, r27
    2c6e:	51 e1       	ldi	r21, 0x11	; 17
    2c70:	07 c0       	rjmp	.+14     	; 0x2c80 <__udivmodhi4_ep>

00002c72 <__udivmodhi4_loop>:
    2c72:	aa 1f       	adc	r26, r26
    2c74:	bb 1f       	adc	r27, r27
    2c76:	a6 17       	cp	r26, r22
    2c78:	b7 07       	cpc	r27, r23
    2c7a:	10 f0       	brcs	.+4      	; 0x2c80 <__udivmodhi4_ep>
    2c7c:	a6 1b       	sub	r26, r22
    2c7e:	b7 0b       	sbc	r27, r23

00002c80 <__udivmodhi4_ep>:
    2c80:	88 1f       	adc	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	5a 95       	dec	r21
    2c86:	a9 f7       	brne	.-22     	; 0x2c72 <__udivmodhi4_loop>
    2c88:	80 95       	com	r24
    2c8a:	90 95       	com	r25
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	08 95       	ret

00002c92 <_exit>:
    2c92:	f8 94       	cli

00002c94 <__stop_program>:
    2c94:	ff cf       	rjmp	.-2      	; 0x2c94 <__stop_program>
