
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002e14  00002e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002640  00000000  00000000  00002f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000103d  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006615  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000067b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000069a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 44 07 	call	0xe88	; 0xe88 <main>
      7a:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <check_pass>:
/* function to compare between to passwords
 * return 1 if they match
 * else return 0
 * */
uint8 check_pass(uint8* pass1  , uint8* pass1_confirm)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <check_pass+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <check_pass+0x8>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <check_pass+0xa>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	7d 83       	std	Y+5, r23	; 0x05
     e32:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0 ; i<5 ; i++)
     e34:	19 82       	std	Y+1, r1	; 0x01
     e36:	19 c0       	rjmp	.+50     	; 0xe6a <check_pass+0x4c>
	{
		if(pass1[i]  != pass1_confirm[i] )
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	40 81       	ld	r20, Z
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	fc 01       	movw	r30, r24
     e56:	e2 0f       	add	r30, r18
     e58:	f3 1f       	adc	r31, r19
     e5a:	80 81       	ld	r24, Z
     e5c:	48 17       	cp	r20, r24
     e5e:	11 f0       	breq	.+4      	; 0xe64 <check_pass+0x46>
		{
			return 0;
     e60:	1e 82       	std	Y+6, r1	; 0x06
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <check_pass+0x56>
 * else return 0
 * */
uint8 check_pass(uint8* pass1  , uint8* pass1_confirm)
{
	uint8 i;
	for(i=0 ; i<5 ; i++)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	20 f3       	brcs	.-56     	; 0xe38 <check_pass+0x1a>
		if(pass1[i]  != pass1_confirm[i] )
		{
			return 0;
		}
	}
	return 1 ;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	8e 83       	std	Y+6, r24	; 0x06
     e74:	8e 81       	ldd	r24, Y+6	; 0x06

}
     e76:	26 96       	adiw	r28, 0x06	; 6
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <main>:

int main(void)
{
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	cf 55       	subi	r28, 0x5F	; 95
     e96:	d0 40       	sbci	r29, 0x00	; 0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61

	USART_ConfigType uart_config = {asynch , disabled ,one_bit ,eight_bit ,9600};
     ea2:	ce 01       	movw	r24, r28
     ea4:	87 5b       	subi	r24, 0xB7	; 183
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	6d 96       	adiw	r28, 0x1d	; 29
     eaa:	9f af       	std	Y+63, r25	; 0x3f
     eac:	8e af       	std	Y+62, r24	; 0x3e
     eae:	6d 97       	sbiw	r28, 0x1d	; 29
     eb0:	88 e6       	ldi	r24, 0x68	; 104
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	6f 96       	adiw	r28, 0x1f	; 31
     eb6:	9f af       	std	Y+63, r25	; 0x3f
     eb8:	8e af       	std	Y+62, r24	; 0x3e
     eba:	6f 97       	sbiw	r28, 0x1f	; 31
     ebc:	98 e0       	ldi	r25, 0x08	; 8
     ebe:	a0 96       	adiw	r28, 0x20	; 32
     ec0:	9f af       	std	Y+63, r25	; 0x3f
     ec2:	a0 97       	sbiw	r28, 0x20	; 32
     ec4:	6f 96       	adiw	r28, 0x1f	; 31
     ec6:	ae ad       	ldd	r26, Y+62	; 0x3e
     ec8:	bf ad       	ldd	r27, Y+63	; 0x3f
     eca:	6f 97       	sbiw	r28, 0x1f	; 31
     ecc:	0c 90       	ld	r0, X
     ece:	6f 96       	adiw	r28, 0x1f	; 31
     ed0:	ee ad       	ldd	r30, Y+62	; 0x3e
     ed2:	ff ad       	ldd	r31, Y+63	; 0x3f
     ed4:	6f 97       	sbiw	r28, 0x1f	; 31
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	6f 96       	adiw	r28, 0x1f	; 31
     eda:	ff af       	std	Y+63, r31	; 0x3f
     edc:	ee af       	std	Y+62, r30	; 0x3e
     ede:	6f 97       	sbiw	r28, 0x1f	; 31
     ee0:	6d 96       	adiw	r28, 0x1d	; 29
     ee2:	ae ad       	ldd	r26, Y+62	; 0x3e
     ee4:	bf ad       	ldd	r27, Y+63	; 0x3f
     ee6:	6d 97       	sbiw	r28, 0x1d	; 29
     ee8:	0c 92       	st	X, r0
     eea:	6d 96       	adiw	r28, 0x1d	; 29
     eec:	ee ad       	ldd	r30, Y+62	; 0x3e
     eee:	ff ad       	ldd	r31, Y+63	; 0x3f
     ef0:	6d 97       	sbiw	r28, 0x1d	; 29
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	6d 96       	adiw	r28, 0x1d	; 29
     ef6:	ff af       	std	Y+63, r31	; 0x3f
     ef8:	ee af       	std	Y+62, r30	; 0x3e
     efa:	6d 97       	sbiw	r28, 0x1d	; 29
     efc:	a0 96       	adiw	r28, 0x20	; 32
     efe:	ff ad       	ldd	r31, Y+63	; 0x3f
     f00:	a0 97       	sbiw	r28, 0x20	; 32
     f02:	f1 50       	subi	r31, 0x01	; 1
     f04:	a0 96       	adiw	r28, 0x20	; 32
     f06:	ff af       	std	Y+63, r31	; 0x3f
     f08:	a0 97       	sbiw	r28, 0x20	; 32
     f0a:	a0 96       	adiw	r28, 0x20	; 32
     f0c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f0e:	a0 97       	sbiw	r28, 0x20	; 32
     f10:	88 23       	and	r24, r24
     f12:	c1 f6       	brne	.-80     	; 0xec4 <main+0x3c>
	LCD_init();
     f14:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_init>

	UART_init(&uart_config);
     f18:	ce 01       	movw	r24, r28
     f1a:	87 5b       	subi	r24, 0xB7	; 183
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <UART_init>
	uint8 pass1[5]={0};
     f22:	ce 01       	movw	r24, r28
     f24:	8f 5a       	subi	r24, 0xAF	; 175
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	25 e0       	ldi	r18, 0x05	; 5
     f2a:	fc 01       	movw	r30, r24
     f2c:	df 01       	movw	r26, r30
     f2e:	82 2f       	mov	r24, r18
     f30:	1d 92       	st	X+, r1
     f32:	8a 95       	dec	r24
     f34:	e9 f7       	brne	.-6      	; 0xf30 <main+0xa8>
	uint8 pass1_confirm[5]={0};
     f36:	ce 01       	movw	r24, r28
     f38:	8a 5a       	subi	r24, 0xAA	; 170
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	25 e0       	ldi	r18, 0x05	; 5
     f3e:	fc 01       	movw	r30, r24
     f40:	df 01       	movw	r26, r30
     f42:	82 2f       	mov	r24, r18
     f44:	1d 92       	st	X+, r1
     f46:	8a 95       	dec	r24
     f48:	e9 f7       	brne	.-6      	; 0xf44 <main+0xbc>
	uint8 i ;
	uint8 command =0;
     f4a:	fe 01       	movw	r30, r28
     f4c:	e9 5b       	subi	r30, 0xB9	; 185
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	10 82       	st	Z, r1
	DcMotor_Init();
     f52:	0e 94 0e 0c 	call	0x181c	; 0x181c <DcMotor_Init>
	Buzzer_init();
     f56:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <Buzzer_init>
	while(1)
	{
		command = UART_recieveByte();
     f5a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
     f5e:	fe 01       	movw	r30, r28
     f60:	e9 5b       	subi	r30, 0xB9	; 185
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 83       	st	Z, r24

		if(command == '*')
     f66:	fe 01       	movw	r30, r28
     f68:	e9 5b       	subi	r30, 0xB9	; 185
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	8a 32       	cpi	r24, 0x2A	; 42
     f70:	09 f0       	breq	.+2      	; 0xf74 <main+0xec>
     f72:	d6 c0       	rjmp	.+428    	; 0x1120 <main+0x298>
		{


			/*Initialize pass*/
			for(i=0 ; i<5 ; i++)
     f74:	fe 01       	movw	r30, r28
     f76:	e8 5b       	subi	r30, 0xB8	; 184
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	10 82       	st	Z, r1
     f7c:	23 c0       	rjmp	.+70     	; 0xfc4 <main+0x13c>
			{
				pass1[i] = 0;
     f7e:	fe 01       	movw	r30, r28
     f80:	e8 5b       	subi	r30, 0xB8	; 184
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	8f 5a       	subi	r24, 0xAF	; 175
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	fc 01       	movw	r30, r24
     f92:	e2 0f       	add	r30, r18
     f94:	f3 1f       	adc	r31, r19
     f96:	10 82       	st	Z, r1
				pass1_confirm[i] = 0;
     f98:	fe 01       	movw	r30, r28
     f9a:	e8 5b       	subi	r30, 0xB8	; 184
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	8a 5a       	subi	r24, 0xAA	; 170
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	10 82       	st	Z, r1
		if(command == '*')
		{


			/*Initialize pass*/
			for(i=0 ; i<5 ; i++)
     fb2:	de 01       	movw	r26, r28
     fb4:	a8 5b       	subi	r26, 0xB8	; 184
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	e8 5b       	subi	r30, 0xB8	; 184
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	8c 93       	st	X, r24
     fc4:	fe 01       	movw	r30, r28
     fc6:	e8 5b       	subi	r30, 0xB8	; 184
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	b8 f2       	brcs	.-82     	; 0xf7e <main+0xf6>
				pass1_confirm[i] = 0;
			}


			/*Receive first password*/
			for(i=0 ; i<5 ; i++)
     fd0:	fe 01       	movw	r30, r28
     fd2:	e8 5b       	subi	r30, 0xB8	; 184
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	10 82       	st	Z, r1
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <main+0x184>
			{
				pass1[i] = UART_recieveByte();
     fda:	fe 01       	movw	r30, r28
     fdc:	e8 5b       	subi	r30, 0xB8	; 184
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	08 2f       	mov	r16, r24
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
     fea:	28 2f       	mov	r18, r24
     fec:	ce 01       	movw	r24, r28
     fee:	8f 5a       	subi	r24, 0xAF	; 175
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	fc 01       	movw	r30, r24
     ff4:	e0 0f       	add	r30, r16
     ff6:	f1 1f       	adc	r31, r17
     ff8:	20 83       	st	Z, r18
				pass1_confirm[i] = 0;
			}


			/*Receive first password*/
			for(i=0 ; i<5 ; i++)
     ffa:	de 01       	movw	r26, r28
     ffc:	a8 5b       	subi	r26, 0xB8	; 184
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e8 5b       	subi	r30, 0xB8	; 184
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	8c 93       	st	X, r24
    100c:	fe 01       	movw	r30, r28
    100e:	e8 5b       	subi	r30, 0xB8	; 184
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	85 30       	cpi	r24, 0x05	; 5
    1016:	08 f3       	brcs	.-62     	; 0xfda <main+0x152>
			{
				pass1[i] = UART_recieveByte();
			}

			/*Receive  password confirmation*/
			for(i=0 ; i<5 ; i++)
    1018:	fe 01       	movw	r30, r28
    101a:	e8 5b       	subi	r30, 0xB8	; 184
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	10 82       	st	Z, r1
    1020:	19 c0       	rjmp	.+50     	; 0x1054 <main+0x1cc>
			{
				pass1_confirm[i] = UART_recieveByte();
    1022:	fe 01       	movw	r30, r28
    1024:	e8 5b       	subi	r30, 0xB8	; 184
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	08 2f       	mov	r16, r24
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    1032:	28 2f       	mov	r18, r24
    1034:	ce 01       	movw	r24, r28
    1036:	8a 5a       	subi	r24, 0xAA	; 170
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	fc 01       	movw	r30, r24
    103c:	e0 0f       	add	r30, r16
    103e:	f1 1f       	adc	r31, r17
    1040:	20 83       	st	Z, r18
			{
				pass1[i] = UART_recieveByte();
			}

			/*Receive  password confirmation*/
			for(i=0 ; i<5 ; i++)
    1042:	de 01       	movw	r26, r28
    1044:	a8 5b       	subi	r26, 0xB8	; 184
    1046:	bf 4f       	sbci	r27, 0xFF	; 255
    1048:	fe 01       	movw	r30, r28
    104a:	e8 5b       	subi	r30, 0xB8	; 184
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	8c 93       	st	X, r24
    1054:	fe 01       	movw	r30, r28
    1056:	e8 5b       	subi	r30, 0xB8	; 184
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	80 81       	ld	r24, Z
    105c:	85 30       	cpi	r24, 0x05	; 5
    105e:	08 f3       	brcs	.-62     	; 0x1022 <main+0x19a>
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			/*send the result of the match of two password*/
			UART_sendByte (check_pass(pass1 ,pass1_confirm ));
    1060:	ce 01       	movw	r24, r28
    1062:	8f 5a       	subi	r24, 0xAF	; 175
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	9e 01       	movw	r18, r28
    1068:	2a 5a       	subi	r18, 0xAA	; 170
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	b9 01       	movw	r22, r18
    106e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    1072:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>



			/*******************/
			LCD_clearScreen();
    1076:	0e 94 f5 14 	call	0x29ea	; 0x29ea <LCD_clearScreen>
			for(i=0 ; i<5 ; i++)
    107a:	fe 01       	movw	r30, r28
    107c:	e8 5b       	subi	r30, 0xB8	; 184
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	10 82       	st	Z, r1
    1082:	1a c0       	rjmp	.+52     	; 0x10b8 <main+0x230>
			{
				LCD_intgerToString(pass1[i]);
    1084:	fe 01       	movw	r30, r28
    1086:	e8 5b       	subi	r30, 0xB8	; 184
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	ce 01       	movw	r24, r28
    1092:	8f 5a       	subi	r24, 0xAF	; 175
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	fc 01       	movw	r30, r24
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	80 81       	ld	r24, Z
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <LCD_intgerToString>



			/*******************/
			LCD_clearScreen();
			for(i=0 ; i<5 ; i++)
    10a6:	de 01       	movw	r26, r28
    10a8:	a8 5b       	subi	r26, 0xB8	; 184
    10aa:	bf 4f       	sbci	r27, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	e8 5b       	subi	r30, 0xB8	; 184
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	8c 93       	st	X, r24
    10b8:	fe 01       	movw	r30, r28
    10ba:	e8 5b       	subi	r30, 0xB8	; 184
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 81       	ld	r24, Z
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	00 f3       	brcs	.-64     	; 0x1084 <main+0x1fc>
			{
				LCD_intgerToString(pass1[i]);
			}
			LCD_moveCursor(1,0);
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_moveCursor>

			for(i=0 ; i<5 ; i++)
    10cc:	fe 01       	movw	r30, r28
    10ce:	e8 5b       	subi	r30, 0xB8	; 184
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	10 82       	st	Z, r1
    10d4:	1a c0       	rjmp	.+52     	; 0x110a <main+0x282>
			{
				LCD_intgerToString(pass1_confirm[i]);
    10d6:	fe 01       	movw	r30, r28
    10d8:	e8 5b       	subi	r30, 0xB8	; 184
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	ce 01       	movw	r24, r28
    10e4:	8a 5a       	subi	r24, 0xAA	; 170
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	80 81       	ld	r24, Z
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <LCD_intgerToString>
			{
				LCD_intgerToString(pass1[i]);
			}
			LCD_moveCursor(1,0);

			for(i=0 ; i<5 ; i++)
    10f8:	de 01       	movw	r26, r28
    10fa:	a8 5b       	subi	r26, 0xB8	; 184
    10fc:	bf 4f       	sbci	r27, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	e8 5b       	subi	r30, 0xB8	; 184
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	8c 93       	st	X, r24
    110a:	fe 01       	movw	r30, r28
    110c:	e8 5b       	subi	r30, 0xB8	; 184
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 81       	ld	r24, Z
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	00 f3       	brcs	.-64     	; 0x10d6 <main+0x24e>
			{
				LCD_intgerToString(pass1_confirm[i]);
			}

			command=0;
    1116:	fe 01       	movw	r30, r28
    1118:	e9 5b       	subi	r30, 0xB9	; 185
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	10 82       	st	Z, r1
    111e:	1d cf       	rjmp	.-454    	; 0xf5a <main+0xd2>

		}
		/*********************************************************/
		/*door case*/
		else if(command == '#')
    1120:	fe 01       	movw	r30, r28
    1122:	e9 5b       	subi	r30, 0xB9	; 185
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	83 32       	cpi	r24, 0x23	; 35
    112a:	09 f0       	breq	.+2      	; 0x112e <main+0x2a6>
    112c:	e6 c1       	rjmp	.+972    	; 0x14fa <main+0x672>
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    112e:	fe 01       	movw	r30, r28
    1130:	e8 5b       	subi	r30, 0xB8	; 184
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	10 82       	st	Z, r1
    1136:	16 c0       	rjmp	.+44     	; 0x1164 <main+0x2dc>
			{
				pass1_confirm[i] = 0;
    1138:	fe 01       	movw	r30, r28
    113a:	e8 5b       	subi	r30, 0xB8	; 184
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	ce 01       	movw	r24, r28
    1146:	8a 5a       	subi	r24, 0xAA	; 170
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	fc 01       	movw	r30, r24
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	10 82       	st	Z, r1
		/*door case*/
		else if(command == '#')
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    1152:	de 01       	movw	r26, r28
    1154:	a8 5b       	subi	r26, 0xB8	; 184
    1156:	bf 4f       	sbci	r27, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	e8 5b       	subi	r30, 0xB8	; 184
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	8c 93       	st	X, r24
    1164:	fe 01       	movw	r30, r28
    1166:	e8 5b       	subi	r30, 0xB8	; 184
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	85 30       	cpi	r24, 0x05	; 5
    116e:	20 f3       	brcs	.-56     	; 0x1138 <main+0x2b0>
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    1170:	fe 01       	movw	r30, r28
    1172:	e8 5b       	subi	r30, 0xB8	; 184
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	10 82       	st	Z, r1
    1178:	19 c0       	rjmp	.+50     	; 0x11ac <main+0x324>
			{
				pass1_confirm[i] = UART_recieveByte();
    117a:	fe 01       	movw	r30, r28
    117c:	e8 5b       	subi	r30, 0xB8	; 184
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	08 2f       	mov	r16, r24
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    118a:	28 2f       	mov	r18, r24
    118c:	ce 01       	movw	r24, r28
    118e:	8a 5a       	subi	r24, 0xAA	; 170
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	fc 01       	movw	r30, r24
    1194:	e0 0f       	add	r30, r16
    1196:	f1 1f       	adc	r31, r17
    1198:	20 83       	st	Z, r18
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    119a:	de 01       	movw	r26, r28
    119c:	a8 5b       	subi	r26, 0xB8	; 184
    119e:	bf 4f       	sbci	r27, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e8 5b       	subi	r30, 0xB8	; 184
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	8c 93       	st	X, r24
    11ac:	fe 01       	movw	r30, r28
    11ae:	e8 5b       	subi	r30, 0xB8	; 184
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	85 30       	cpi	r24, 0x05	; 5
    11b6:	08 f3       	brcs	.-62     	; 0x117a <main+0x2f2>
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			/*check pass*/
			if ( check_pass(pass1 ,pass1_confirm) )
    11b8:	ce 01       	movw	r24, r28
    11ba:	8f 5a       	subi	r24, 0xAF	; 175
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	9e 01       	movw	r18, r28
    11c0:	2a 5a       	subi	r18, 0xAA	; 170
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	b9 01       	movw	r22, r18
    11c6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <main+0x348>
    11ce:	85 c1       	rjmp	.+778    	; 0x14da <main+0x652>
			{

				UART_sendByte (check_pass(pass1 ,pass1_confirm ));
    11d0:	ce 01       	movw	r24, r28
    11d2:	8f 5a       	subi	r24, 0xAF	; 175
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	9e 01       	movw	r18, r28
    11d8:	2a 5a       	subi	r18, 0xAA	; 170
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	b9 01       	movw	r22, r18
    11de:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    11e2:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
				DcMotor_Rotate(CW,100);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	64 e6       	ldi	r22, 0x64	; 100
    11ea:	0e 94 29 0c 	call	0x1852	; 0x1852 <DcMotor_Rotate>
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 5b       	subi	r30, 0xBD	; 189
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	aa e7       	ldi	r26, 0x7A	; 122
    11fa:	b4 e4       	ldi	r27, 0x44	; 68
    11fc:	80 83       	st	Z, r24
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	a2 83       	std	Z+2, r26	; 0x02
    1202:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1204:	8e 01       	movw	r16, r28
    1206:	01 5c       	subi	r16, 0xC1	; 193
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	fe 01       	movw	r30, r28
    120c:	ed 5b       	subi	r30, 0xBD	; 189
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	4a ef       	ldi	r20, 0xFA	; 250
    121e:	54 e4       	ldi	r21, 0x44	; 68
    1220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	f8 01       	movw	r30, r16
    122a:	80 83       	st	Z, r24
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	a2 83       	std	Z+2, r26	; 0x02
    1230:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1232:	fe 01       	movw	r30, r28
    1234:	ff 96       	adiw	r30, 0x3f	; 63
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    124a:	88 23       	and	r24, r24
    124c:	2c f4       	brge	.+10     	; 0x1258 <main+0x3d0>
		__ticks = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9e af       	std	Y+62, r25	; 0x3e
    1254:	8d af       	std	Y+61, r24	; 0x3d
    1256:	46 c0       	rjmp	.+140    	; 0x12e4 <main+0x45c>
	else if (__tmp > 65535)
    1258:	fe 01       	movw	r30, r28
    125a:	ff 96       	adiw	r30, 0x3f	; 63
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	64 f5       	brge	.+88     	; 0x12cc <main+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	fe 01       	movw	r30, r28
    1276:	ed 5b       	subi	r30, 0xBD	; 189
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e af       	std	Y+62, r25	; 0x3e
    12a0:	8d af       	std	Y+61, r24	; 0x3d
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <main+0x43a>
    12a4:	88 ec       	ldi	r24, 0xC8	; 200
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c af       	std	Y+60, r25	; 0x3c
    12aa:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    12ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <main+0x428>
    12b4:	9c af       	std	Y+60, r25	; 0x3c
    12b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9e af       	std	Y+62, r25	; 0x3e
    12c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <main+0x41c>
    12ca:	16 c0       	rjmp	.+44     	; 0x12f8 <main+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	fe 01       	movw	r30, r28
    12ce:	ff 96       	adiw	r30, 0x3f	; 63
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9e af       	std	Y+62, r25	; 0x3e
    12e2:	8d af       	std	Y+61, r24	; 0x3d
    12e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12e8:	9a af       	std	Y+58, r25	; 0x3a
    12ea:	89 af       	std	Y+57, r24	; 0x39
    12ec:	89 ad       	ldd	r24, Y+57	; 0x39
    12ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <main+0x468>
    12f4:	9a af       	std	Y+58, r25	; 0x3a
    12f6:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				DcMotor_Rotate(STOP,100);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	64 e6       	ldi	r22, 0x64	; 100
    12fc:	0e 94 29 0c 	call	0x1852	; 0x1852 <DcMotor_Rotate>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	aa ef       	ldi	r26, 0xFA	; 250
    1306:	b4 e4       	ldi	r27, 0x44	; 68
    1308:	8d ab       	std	Y+53, r24	; 0x35
    130a:	9e ab       	std	Y+54, r25	; 0x36
    130c:	af ab       	std	Y+55, r26	; 0x37
    130e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	6d a9       	ldd	r22, Y+53	; 0x35
    1312:	7e a9       	ldd	r23, Y+54	; 0x36
    1314:	8f a9       	ldd	r24, Y+55	; 0x37
    1316:	98 ad       	ldd	r25, Y+56	; 0x38
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	89 ab       	std	Y+49, r24	; 0x31
    132a:	9a ab       	std	Y+50, r25	; 0x32
    132c:	ab ab       	std	Y+51, r26	; 0x33
    132e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <main+0x4ca>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	98 ab       	std	Y+48, r25	; 0x30
    134e:	8f a7       	std	Y+47, r24	; 0x2f
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <main+0x548>
	else if (__tmp > 65535)
    1352:	69 a9       	ldd	r22, Y+49	; 0x31
    1354:	7a a9       	ldd	r23, Y+50	; 0x32
    1356:	8b a9       	ldd	r24, Y+51	; 0x33
    1358:	9c a9       	ldd	r25, Y+52	; 0x34
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <main+0x534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	6d a9       	ldd	r22, Y+53	; 0x35
    136c:	7e a9       	ldd	r23, Y+54	; 0x36
    136e:	8f a9       	ldd	r24, Y+55	; 0x37
    1370:	98 ad       	ldd	r25, Y+56	; 0x38
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	51 e4       	ldi	r21, 0x41	; 65
    137a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <main+0x52a>
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9e a7       	std	Y+46, r25	; 0x2e
    139a:	8d a7       	std	Y+45, r24	; 0x2d
    139c:	8d a5       	ldd	r24, Y+45	; 0x2d
    139e:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <main+0x518>
    13a4:	9e a7       	std	Y+46, r25	; 0x2e
    13a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13aa:	98 a9       	ldd	r25, Y+48	; 0x30
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	98 ab       	std	Y+48, r25	; 0x30
    13b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b4:	98 a9       	ldd	r25, Y+48	; 0x30
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	69 f7       	brne	.-38     	; 0x1394 <main+0x50c>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <main+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	69 a9       	ldd	r22, Y+49	; 0x31
    13be:	7a a9       	ldd	r23, Y+50	; 0x32
    13c0:	8b a9       	ldd	r24, Y+51	; 0x33
    13c2:	9c a9       	ldd	r25, Y+52	; 0x34
    13c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	98 ab       	std	Y+48, r25	; 0x30
    13ce:	8f a7       	std	Y+47, r24	; 0x2f
    13d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d2:	98 a9       	ldd	r25, Y+48	; 0x30
    13d4:	9c a7       	std	Y+44, r25	; 0x2c
    13d6:	8b a7       	std	Y+43, r24	; 0x2b
    13d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13da:	9c a5       	ldd	r25, Y+44	; 0x2c
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <main+0x554>
    13e0:	9c a7       	std	Y+44, r25	; 0x2c
    13e2:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);
				DcMotor_Rotate(ACW,100);
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	64 e6       	ldi	r22, 0x64	; 100
    13e8:	0e 94 29 0c 	call	0x1852	; 0x1852 <DcMotor_Rotate>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	aa e7       	ldi	r26, 0x7A	; 122
    13f2:	b4 e4       	ldi	r27, 0x44	; 68
    13f4:	8f a3       	std	Y+39, r24	; 0x27
    13f6:	98 a7       	std	Y+40, r25	; 0x28
    13f8:	a9 a7       	std	Y+41, r26	; 0x29
    13fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	6f a1       	ldd	r22, Y+39	; 0x27
    13fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1400:	89 a5       	ldd	r24, Y+41	; 0x29
    1402:	9a a5       	ldd	r25, Y+42	; 0x2a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8b a3       	std	Y+35, r24	; 0x23
    1416:	9c a3       	std	Y+36, r25	; 0x24
    1418:	ad a3       	std	Y+37, r26	; 0x25
    141a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    141c:	6b a1       	ldd	r22, Y+35	; 0x23
    141e:	7c a1       	ldd	r23, Y+36	; 0x24
    1420:	8d a1       	ldd	r24, Y+37	; 0x25
    1422:	9e a1       	ldd	r25, Y+38	; 0x26
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <main+0x5b6>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a a3       	std	Y+34, r25	; 0x22
    143a:	89 a3       	std	Y+33, r24	; 0x21
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <main+0x634>
	else if (__tmp > 65535)
    143e:	6b a1       	ldd	r22, Y+35	; 0x23
    1440:	7c a1       	ldd	r23, Y+36	; 0x24
    1442:	8d a1       	ldd	r24, Y+37	; 0x25
    1444:	9e a1       	ldd	r25, Y+38	; 0x26
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <main+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	6f a1       	ldd	r22, Y+39	; 0x27
    1458:	78 a5       	ldd	r23, Y+40	; 0x28
    145a:	89 a5       	ldd	r24, Y+41	; 0x29
    145c:	9a a5       	ldd	r25, Y+42	; 0x2a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9a a3       	std	Y+34, r25	; 0x22
    147c:	89 a3       	std	Y+33, r24	; 0x21
    147e:	0f c0       	rjmp	.+30     	; 0x149e <main+0x616>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	98 a3       	std	Y+32, r25	; 0x20
    1486:	8f 8f       	std	Y+31, r24	; 0x1f
    1488:	8f 8d       	ldd	r24, Y+31	; 0x1f
    148a:	98 a1       	ldd	r25, Y+32	; 0x20
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <main+0x604>
    1490:	98 a3       	std	Y+32, r25	; 0x20
    1492:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	89 a1       	ldd	r24, Y+33	; 0x21
    1496:	9a a1       	ldd	r25, Y+34	; 0x22
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9a a3       	std	Y+34, r25	; 0x22
    149c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	89 a1       	ldd	r24, Y+33	; 0x21
    14a0:	9a a1       	ldd	r25, Y+34	; 0x22
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <main+0x5f8>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <main+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6b a1       	ldd	r22, Y+35	; 0x23
    14aa:	7c a1       	ldd	r23, Y+36	; 0x24
    14ac:	8d a1       	ldd	r24, Y+37	; 0x25
    14ae:	9e a1       	ldd	r25, Y+38	; 0x26
    14b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9a a3       	std	Y+34, r25	; 0x22
    14ba:	89 a3       	std	Y+33, r24	; 0x21
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	9a a1       	ldd	r25, Y+34	; 0x22
    14c0:	9e 8f       	std	Y+30, r25	; 0x1e
    14c2:	8d 8f       	std	Y+29, r24	; 0x1d
    14c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <main+0x640>
    14cc:	9e 8f       	std	Y+30, r25	; 0x1e
    14ce:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				DcMotor_Rotate(STOP,100);
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	64 e6       	ldi	r22, 0x64	; 100
    14d4:	0e 94 29 0c 	call	0x1852	; 0x1852 <DcMotor_Rotate>
    14d8:	0b c0       	rjmp	.+22     	; 0x14f0 <main+0x668>

			}
			else
			{

				UART_sendByte (check_pass(pass1 ,pass1_confirm ));
    14da:	ce 01       	movw	r24, r28
    14dc:	8f 5a       	subi	r24, 0xAF	; 175
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	9e 01       	movw	r18, r28
    14e2:	2a 5a       	subi	r18, 0xAA	; 170
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    14ec:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
			}
			command = 0;
    14f0:	fe 01       	movw	r30, r28
    14f2:	e9 5b       	subi	r30, 0xB9	; 185
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	10 82       	st	Z, r1
    14f8:	30 cd       	rjmp	.-1440   	; 0xf5a <main+0xd2>


		}
		/**************************************/

		else if (command == '$')
    14fa:	fe 01       	movw	r30, r28
    14fc:	e9 5b       	subi	r30, 0xB9	; 185
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	84 32       	cpi	r24, 0x24	; 36
    1504:	09 f0       	breq	.+2      	; 0x1508 <main+0x680>
    1506:	df c0       	rjmp	.+446    	; 0x16c6 <main+0x83e>
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    1508:	fe 01       	movw	r30, r28
    150a:	e8 5b       	subi	r30, 0xB8	; 184
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	10 82       	st	Z, r1
    1510:	16 c0       	rjmp	.+44     	; 0x153e <main+0x6b6>
			{
				pass1_confirm[i] = 0;
    1512:	fe 01       	movw	r30, r28
    1514:	e8 5b       	subi	r30, 0xB8	; 184
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	ce 01       	movw	r24, r28
    1520:	8a 5a       	subi	r24, 0xAA	; 170
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	fc 01       	movw	r30, r24
    1526:	e2 0f       	add	r30, r18
    1528:	f3 1f       	adc	r31, r19
    152a:	10 82       	st	Z, r1

		else if (command == '$')
		{
			/*intialize pass1*/

			for(i=0 ; i<5 ; i++)
    152c:	de 01       	movw	r26, r28
    152e:	a8 5b       	subi	r26, 0xB8	; 184
    1530:	bf 4f       	sbci	r27, 0xFF	; 255
    1532:	fe 01       	movw	r30, r28
    1534:	e8 5b       	subi	r30, 0xB8	; 184
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8c 93       	st	X, r24
    153e:	fe 01       	movw	r30, r28
    1540:	e8 5b       	subi	r30, 0xB8	; 184
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	85 30       	cpi	r24, 0x05	; 5
    1548:	20 f3       	brcs	.-56     	; 0x1512 <main+0x68a>
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    154a:	fe 01       	movw	r30, r28
    154c:	e8 5b       	subi	r30, 0xB8	; 184
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	10 82       	st	Z, r1
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <main+0x6fe>
			{
				pass1_confirm[i] = UART_recieveByte();
    1554:	fe 01       	movw	r30, r28
    1556:	e8 5b       	subi	r30, 0xB8	; 184
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	08 2f       	mov	r16, r24
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    1564:	28 2f       	mov	r18, r24
    1566:	ce 01       	movw	r24, r28
    1568:	8a 5a       	subi	r24, 0xAA	; 170
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	e0 0f       	add	r30, r16
    1570:	f1 1f       	adc	r31, r17
    1572:	20 83       	st	Z, r18
			{
				pass1_confirm[i] = 0;
			}

			/*Receive pass*/
			for(i=0 ; i<5 ; i++)
    1574:	de 01       	movw	r26, r28
    1576:	a8 5b       	subi	r26, 0xB8	; 184
    1578:	bf 4f       	sbci	r27, 0xFF	; 255
    157a:	fe 01       	movw	r30, r28
    157c:	e8 5b       	subi	r30, 0xB8	; 184
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 81       	ld	r24, Z
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	8c 93       	st	X, r24
    1586:	fe 01       	movw	r30, r28
    1588:	e8 5b       	subi	r30, 0xB8	; 184
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	85 30       	cpi	r24, 0x05	; 5
    1590:	08 f3       	brcs	.-62     	; 0x1554 <main+0x6cc>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e2       	ldi	r26, 0x20	; 32
    1598:	b1 e4       	ldi	r27, 0x41	; 65
    159a:	89 8f       	std	Y+25, r24	; 0x19
    159c:	9a 8f       	std	Y+26, r25	; 0x1a
    159e:	ab 8f       	std	Y+27, r26	; 0x1b
    15a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	69 8d       	ldd	r22, Y+25	; 0x19
    15a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d 8b       	std	Y+21, r24	; 0x15
    15bc:	9e 8b       	std	Y+22, r25	; 0x16
    15be:	af 8b       	std	Y+23, r26	; 0x17
    15c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	7e 89       	ldd	r23, Y+22	; 0x16
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <main+0x75c>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <main+0x7da>
	else if (__tmp > 65535)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <main+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	69 8d       	ldd	r22, Y+25	; 0x19
    15fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9c 8b       	std	Y+20, r25	; 0x14
    1622:	8b 8b       	std	Y+19, r24	; 0x13
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <main+0x7bc>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9a 8b       	std	Y+18, r25	; 0x12
    162c:	89 8b       	std	Y+17, r24	; 0x11
    162e:	89 89       	ldd	r24, Y+17	; 0x11
    1630:	9a 89       	ldd	r25, Y+18	; 0x12
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <main+0x7aa>
    1636:	9a 8b       	std	Y+18, r25	; 0x12
    1638:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9c 8b       	std	Y+20, r25	; 0x14
    1642:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8b 89       	ldd	r24, Y+19	; 0x13
    1646:	9c 89       	ldd	r25, Y+20	; 0x14
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <main+0x79e>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <main+0x7ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6d 89       	ldd	r22, Y+21	; 0x15
    1650:	7e 89       	ldd	r23, Y+22	; 0x16
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9c 8b       	std	Y+20, r25	; 0x14
    1660:	8b 8b       	std	Y+19, r24	; 0x13
    1662:	8b 89       	ldd	r24, Y+19	; 0x13
    1664:	9c 89       	ldd	r25, Y+20	; 0x14
    1666:	98 8b       	std	Y+16, r25	; 0x10
    1668:	8f 87       	std	Y+15, r24	; 0x0f
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <main+0x7e6>
    1672:	98 8b       	std	Y+16, r25	; 0x10
    1674:	8f 87       	std	Y+15, r24	; 0x0f
			{
				pass1_confirm[i] = UART_recieveByte();
			}
			_delay_ms(10);
			/*check pass*/
			if ( check_pass(pass1 ,pass1_confirm) )
    1676:	ce 01       	movw	r24, r28
    1678:	8f 5a       	subi	r24, 0xAF	; 175
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	9e 01       	movw	r18, r28
    167e:	2a 5a       	subi	r18, 0xAA	; 170
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    1688:	88 23       	and	r24, r24
    168a:	89 f0       	breq	.+34     	; 0x16ae <main+0x826>
			{
				command = '*';
    168c:	fe 01       	movw	r30, r28
    168e:	e9 5b       	subi	r30, 0xB9	; 185
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	8a e2       	ldi	r24, 0x2A	; 42
    1694:	80 83       	st	Z, r24
				UART_sendByte (check_pass(pass1 ,pass1_confirm ));
    1696:	ce 01       	movw	r24, r28
    1698:	8f 5a       	subi	r24, 0xAF	; 175
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	9e 01       	movw	r18, r28
    169e:	2a 5a       	subi	r18, 0xAA	; 170
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	b9 01       	movw	r22, r18
    16a4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    16a8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
    16ac:	56 cc       	rjmp	.-1876   	; 0xf5a <main+0xd2>

			}
			else
			{

				UART_sendByte (check_pass(pass1 ,pass1_confirm ));
    16ae:	ce 01       	movw	r24, r28
    16b0:	8f 5a       	subi	r24, 0xAF	; 175
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	9e 01       	movw	r18, r28
    16b6:	2a 5a       	subi	r18, 0xAA	; 170
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	b9 01       	movw	r22, r18
    16bc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <check_pass>
    16c0:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
    16c4:	4a cc       	rjmp	.-1900   	; 0xf5a <main+0xd2>
			}

		}
		/****ERROR CASE******/
		else if(command == 'E')
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 5b       	subi	r30, 0xB9	; 185
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	85 34       	cpi	r24, 0x45	; 69
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <main+0x84c>
    16d2:	43 cc       	rjmp	.-1914   	; 0xf5a <main+0xd2>
		{

			Buzzer_on();
    16d4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <Buzzer_on>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	aa e7       	ldi	r26, 0x7A	; 122
    16de:	b4 e4       	ldi	r27, 0x44	; 68
    16e0:	8b 87       	std	Y+11, r24	; 0x0b
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	ad 87       	std	Y+13, r26	; 0x0d
    16e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <main+0x8a2>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <main+0x920>
	else if (__tmp > 65535)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <main+0x90c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	0f c0       	rjmp	.+30     	; 0x178a <main+0x902>
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <main+0x8f0>
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <main+0x8e4>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <main+0x934>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <main+0x92c>
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Buzzer_off();
    17bc:	0e 94 02 0c 	call	0x1804	; 0x1804 <Buzzer_off>
			command = 0;
    17c0:	fe 01       	movw	r30, r28
    17c2:	e9 5b       	subi	r30, 0xB9	; 185
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	10 82       	st	Z, r1
    17c8:	c8 cb       	rjmp	.-2160   	; 0xf5a <main+0xd2>

000017ca <Buzzer_init>:
⮚ Setup the direction for the buzzer pin as output pin through the
GPIO driver.
⮚ Turn off the buzzer through the GPIO.*/

void Buzzer_init(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);  /* set pin as output*/
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 89 0c 	call	0x1912	; 0x1912 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	63 e0       	ldi	r22, 0x03	; 3
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>

}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <Buzzer_on>:
/*Description
⮚ Function to enable the Buzzer through the GPIO.*/


void Buzzer_on(void)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);/* turn ON BUZZER*/
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	63 e0       	ldi	r22, 0x03	; 3
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>

}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <Buzzer_off>:

/*Function to disable the Buzzer through the GPIO*/

void Buzzer_off(void)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);    /* turn off BUZZER*/
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <DcMotor_Init>:

/*********************FUNCTIONS_DEFINTIONS**********************/


void DcMotor_Init(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	/*set DC_PINS DIRECTIONS AS OUTPUT */
	GPIO_setupPinDirection(DC_PORT_ID , DC_PIN0_ID , PIN_OUTPUT);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 89 0c 	call	0x1912	; 0x1912 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT_ID , DC_PIN1_ID , PIN_OUTPUT);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 89 0c 	call	0x1912	; 0x1912 <GPIO_setupPinDirection>

	/*stop motor at beginning*/
	GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	63 e0       	ldi	r22, 0x03	; 3
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
	GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	64 e0       	ldi	r22, 0x04	; 4
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>


}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <DcMotor_Rotate>:

/************************************************/
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <DcMotor_Rotate+0x6>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	6b 83       	std	Y+3, r22	; 0x03

	/* set DC_MOTOR DIRECTION*/
	if(state == STOP)
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	88 23       	and	r24, r24
    1866:	59 f4       	brne	.+22     	; 0x187e <DcMotor_Rotate+0x2c>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	63 e0       	ldi	r22, 0x03	; 3
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	64 e0       	ldi	r22, 0x04	; 4
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    187c:	1b c0       	rjmp	.+54     	; 0x18b4 <DcMotor_Rotate+0x62>
	}
	else if(state == ACW)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	59 f4       	brne	.+22     	; 0x189a <DcMotor_Rotate+0x48>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_HIGH);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_LOW);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	64 e0       	ldi	r22, 0x04	; 4
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <DcMotor_Rotate+0x62>

	}
	else if(state == CW)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	51 f4       	brne	.+20     	; 0x18b4 <DcMotor_Rotate+0x62>
	{
		GPIO_writePin(DC_PORT_ID , DC_PIN0_ID , LOGIC_LOW);
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	63 e0       	ldi	r22, 0x03	; 3
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID , DC_PIN1_ID , LOGIC_HIGH);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>

	/*set MOTOR SPEED*/

	uint8 duty_cycl ;

	duty_cycl = (255 *((float)speed/100));
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	48 ec       	ldi	r20, 0xC8	; 200
    18d4:	52 e4       	ldi	r21, 0x42	; 66
    18d6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	53 e4       	ldi	r21, 0x43	; 67
    18ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Duty_cycle(duty_cycl);
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <PWM_Timer0_Duty_cycle>



}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction )
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <GPIO_setupPinDirection+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <GPIO_setupPinDirection+0x8>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	6a 83       	std	Y+2, r22	; 0x02
    1924:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f0       	brcs	.+2      	; 0x192e <GPIO_setupPinDirection+0x1c>
    192c:	d5 c0       	rjmp	.+426    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	08 f0       	brcs	.+2      	; 0x1936 <GPIO_setupPinDirection+0x24>
    1934:	d1 c0       	rjmp	.+418    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
	}
	else
	{


		switch(port_num)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3d 83       	std	Y+5, r19	; 0x05
    193e:	2c 83       	std	Y+4, r18	; 0x04
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <GPIO_setupPinDirection+0x3a>
    194a:	43 c0       	rjmp	.+134    	; 0x19d2 <GPIO_setupPinDirection+0xc0>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <GPIO_setupPinDirection+0x4e>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	71 f0       	breq	.+28     	; 0x197a <GPIO_setupPinDirection+0x68>
    195e:	bc c0       	rjmp	.+376    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <GPIO_setupPinDirection+0x5a>
    196a:	5f c0       	rjmp	.+190    	; 0x1a2a <GPIO_setupPinDirection+0x118>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <GPIO_setupPinDirection+0x66>
    1976:	85 c0       	rjmp	.+266    	; 0x1a82 <GPIO_setupPinDirection+0x170>
    1978:	af c0       	rjmp	.+350    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1980:	aa e3       	ldi	r26, 0x3A	; 58
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_setupPinDirection+0x8c>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_setupPinDirection+0x88>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	98 c0       	rjmp	.+304    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19a8:	aa e3       	ldi	r26, 0x3A	; 58
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_setupPinDirection+0xb4>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_setupPinDirection+0xb0>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	83 c0       	rjmp	.+262    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	a1 f4       	brne	.+40     	; 0x1a00 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19d8:	a7 e3       	ldi	r26, 0x37	; 55
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e7 e3       	ldi	r30, 0x37	; 55
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_setupPinDirection+0xe4>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_setupPinDirection+0xe0>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
    19fe:	6c c0       	rjmp	.+216    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a00:	a7 e3       	ldi	r26, 0x37	; 55
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e7 e3       	ldi	r30, 0x37	; 55
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_setupPinDirection+0x10c>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_setupPinDirection+0x108>
    1a22:	80 95       	com	r24
    1a24:	84 23       	and	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	57 c0       	rjmp	.+174    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	a1 f4       	brne	.+40     	; 0x1a58 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <GPIO_setupPinDirection+0x13c>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <GPIO_setupPinDirection+0x138>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	40 c0       	rjmp	.+128    	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_setupPinDirection+0x164>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_setupPinDirection+0x160>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	2b c0       	rjmp	.+86     	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a88:	a1 e3       	ldi	r26, 0x31	; 49
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e1 e3       	ldi	r30, 0x31	; 49
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <GPIO_setupPinDirection+0x194>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <GPIO_setupPinDirection+0x190>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <GPIO_setupPinDirection+0x1c6>

			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ab0:	a1 e3       	ldi	r26, 0x31	; 49
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e1 e3       	ldi	r30, 0x31	; 49
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_setupPinDirection+0x1bc>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_setupPinDirection+0x1b8>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24


		}
	}

}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <GPIO_writePin+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <GPIO_writePin+0x8>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	6a 83       	std	Y+2, r22	; 0x02
    1afa:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <GPIO_writePin+0x1c>
    1b02:	d5 c0       	rjmp	.+426    	; 0x1cae <GPIO_writePin+0x1c6>
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	88 30       	cpi	r24, 0x08	; 8
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <GPIO_writePin+0x24>
    1b0a:	d1 c0       	rjmp	.+418    	; 0x1cae <GPIO_writePin+0x1c6>
	{
		/****do nothing***/
	}
	else
	{
		switch(port_num)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3d 83       	std	Y+5, r19	; 0x05
    1b14:	2c 83       	std	Y+4, r18	; 0x04
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <GPIO_writePin+0x3a>
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <GPIO_writePin+0xc0>
    1b22:	2c 81       	ldd	r18, Y+4	; 0x04
    1b24:	3d 81       	ldd	r19, Y+5	; 0x05
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <GPIO_writePin+0x4e>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <GPIO_writePin+0x68>
    1b34:	bc c0       	rjmp	.+376    	; 0x1cae <GPIO_writePin+0x1c6>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <GPIO_writePin+0x5a>
    1b40:	5f c0       	rjmp	.+190    	; 0x1c00 <GPIO_writePin+0x118>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GPIO_writePin+0x66>
    1b4c:	85 c0       	rjmp	.+266    	; 0x1c58 <GPIO_writePin+0x170>
    1b4e:	af c0       	rjmp	.+350    	; 0x1cae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:


			if(value == LOGIC_HIGH)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	a1 f4       	brne	.+40     	; 0x1b7e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA , pin_num);
    1b56:	ab e3       	ldi	r26, 0x3B	; 59
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	eb e3       	ldi	r30, 0x3B	; 59
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <GPIO_writePin+0x8c>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <GPIO_writePin+0x88>
    1b78:	84 2b       	or	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	98 c0       	rjmp	.+304    	; 0x1cae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA , pin_num);
    1b7e:	ab e3       	ldi	r26, 0x3B	; 59
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	eb e3       	ldi	r30, 0x3B	; 59
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <GPIO_writePin+0xb4>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <GPIO_writePin+0xb0>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	83 c0       	rjmp	.+262    	; 0x1cae <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:


			if(value == LOGIC_HIGH)
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	a1 f4       	brne	.+40     	; 0x1bd6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB , pin_num);
    1bae:	a8 e3       	ldi	r26, 0x38	; 56
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e8 e3       	ldi	r30, 0x38	; 56
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <GPIO_writePin+0xe4>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <GPIO_writePin+0xe0>
    1bd0:	84 2b       	or	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	6c c0       	rjmp	.+216    	; 0x1cae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB , pin_num);
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_writePin+0x10c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_writePin+0x108>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	57 c0       	rjmp	.+174    	; 0x1cae <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:


			if(value == LOGIC_HIGH)
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	a1 f4       	brne	.+40     	; 0x1c2e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC , pin_num);
    1c06:	a5 e3       	ldi	r26, 0x35	; 53
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e3       	ldi	r30, 0x35	; 53
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <GPIO_writePin+0x13c>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <GPIO_writePin+0x138>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	40 c0       	rjmp	.+128    	; 0x1cae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC , pin_num);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_writePin+0x164>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_writePin+0x160>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	2b c0       	rjmp	.+86     	; 0x1cae <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:


			if(value == LOGIC_HIGH)
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	a1 f4       	brne	.+40     	; 0x1c86 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD , pin_num);
    1c5e:	a2 e3       	ldi	r26, 0x32	; 50
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e2 e3       	ldi	r30, 0x32	; 50
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <GPIO_writePin+0x194>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <GPIO_writePin+0x190>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD , pin_num);
    1c86:	a2 e3       	ldi	r26, 0x32	; 50
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e2 e3       	ldi	r30, 0x32	; 50
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <GPIO_writePin+0x1bc>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <GPIO_writePin+0x1b8>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24



	}

}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <GPIO_readPin+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <GPIO_readPin+0x8>
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=0;
    1cd0:	19 82       	std	Y+1, r1	; 0x01

	if(port_num>=NUM_OF_PORTS  || pin_num>= NUM_OF_PINS_PER_PORT)
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <GPIO_readPin+0x1c>
    1cd8:	84 c0       	rjmp	.+264    	; 0x1de2 <GPIO_readPin+0x124>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	88 30       	cpi	r24, 0x08	; 8
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <GPIO_readPin+0x24>
    1ce0:	80 c0       	rjmp	.+256    	; 0x1de2 <GPIO_readPin+0x124>
	{
		/****return 0***/
	}
	else
	{
		switch(port_num)
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3d 83       	std	Y+5, r19	; 0x05
    1cea:	2c 83       	std	Y+4, r18	; 0x04
    1cec:	4c 81       	ldd	r20, Y+4	; 0x04
    1cee:	5d 81       	ldd	r21, Y+5	; 0x05
    1cf0:	41 30       	cpi	r20, 0x01	; 1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	79 f1       	breq	.+94     	; 0x1d54 <GPIO_readPin+0x96>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <GPIO_readPin+0x4e>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	21 15       	cp	r18, r1
    1d06:	31 05       	cpc	r19, r1
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <GPIO_readPin+0x66>
    1d0a:	6b c0       	rjmp	.+214    	; 0x1de2 <GPIO_readPin+0x124>
    1d0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d10:	42 30       	cpi	r20, 0x02	; 2
    1d12:	51 05       	cpc	r21, r1
    1d14:	b9 f1       	breq	.+110    	; 0x1d84 <GPIO_readPin+0xc6>
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <GPIO_readPin+0x64>
    1d20:	49 c0       	rjmp	.+146    	; 0x1db4 <GPIO_readPin+0xf6>
    1d22:	5f c0       	rjmp	.+190    	; 0x1de2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:

			if(BIT_IS_SET(PINA,pin_num))
    1d24:	e9 e3       	ldi	r30, 0x39	; 57
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_readPin+0x7e>
    1d38:	55 95       	asr	r21
    1d3a:	47 95       	ror	r20
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_readPin+0x7a>
    1d40:	ca 01       	movw	r24, r20
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	90 70       	andi	r25, 0x00	; 0
    1d46:	88 23       	and	r24, r24
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <GPIO_readPin+0x92>
			{
				value=LOGIC_HIGH;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	49 c0       	rjmp	.+146    	; 0x1de2 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	47 c0       	rjmp	.+142    	; 0x1de2 <GPIO_readPin+0x124>
			}break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d54:	e6 e3       	ldi	r30, 0x36	; 54
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a9 01       	movw	r20, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_readPin+0xae>
    1d68:	55 95       	asr	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_readPin+0xaa>
    1d70:	ca 01       	movw	r24, r20
    1d72:	81 70       	andi	r24, 0x01	; 1
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	88 23       	and	r24, r24
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <GPIO_readPin+0xc2>
			{
				value=LOGIC_HIGH;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	31 c0       	rjmp	.+98     	; 0x1de2 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1d80:	19 82       	std	Y+1, r1	; 0x01
    1d82:	2f c0       	rjmp	.+94     	; 0x1de2 <GPIO_readPin+0x124>
			}break;

		case PORTC_ID:

			if(BIT_IS_SET(PINC,pin_num))
    1d84:	e3 e3       	ldi	r30, 0x33	; 51
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a9 01       	movw	r20, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_readPin+0xde>
    1d98:	55 95       	asr	r21
    1d9a:	47 95       	ror	r20
    1d9c:	8a 95       	dec	r24
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_readPin+0xda>
    1da0:	ca 01       	movw	r24, r20
    1da2:	81 70       	andi	r24, 0x01	; 1
    1da4:	90 70       	andi	r25, 0x00	; 0
    1da6:	88 23       	and	r24, r24
    1da8:	19 f0       	breq	.+6      	; 0x1db0 <GPIO_readPin+0xf2>
			{
				value=LOGIC_HIGH;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	19 c0       	rjmp	.+50     	; 0x1de2 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1db0:	19 82       	std	Y+1, r1	; 0x01
    1db2:	17 c0       	rjmp	.+46     	; 0x1de2 <GPIO_readPin+0x124>
			}break;
		case PORTD_ID:

			if(BIT_IS_SET(PIND,pin_num))
    1db4:	e0 e3       	ldi	r30, 0x30	; 48
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_readPin+0x10e>
    1dc8:	55 95       	asr	r21
    1dca:	47 95       	ror	r20
    1dcc:	8a 95       	dec	r24
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_readPin+0x10a>
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	81 70       	andi	r24, 0x01	; 1
    1dd4:	90 70       	andi	r25, 0x00	; 0
    1dd6:	88 23       	and	r24, r24
    1dd8:	19 f0       	breq	.+6      	; 0x1de0 <GPIO_readPin+0x122>
			{
				value=LOGIC_HIGH;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1de0:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return value;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <GPIO_setupPortDirection+0x6>
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_setupPortDirection+0x8>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	90 f5       	brcc	.+100    	; 0x1e6e <GPIO_setupPortDirection+0x7a>
		/**do nothing**/
	}
	else
	{

		switch(port_num)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3c 83       	std	Y+4, r19	; 0x04
    1e12:	2b 83       	std	Y+3, r18	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	d1 f0       	breq	.+52     	; 0x1e52 <GPIO_setupPortDirection+0x5e>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <GPIO_setupPortDirection+0x3e>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <GPIO_setupPortDirection+0x54>
    1e30:	1e c0       	rjmp	.+60     	; 0x1e6e <GPIO_setupPortDirection+0x7a>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <GPIO_setupPortDirection+0x68>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	81 f0       	breq	.+32     	; 0x1e66 <GPIO_setupPortDirection+0x72>
    1e46:	13 c0       	rjmp	.+38     	; 0x1e6e <GPIO_setupPortDirection+0x7a>
		{

		case PORTA_ID:DDRA=direction;break;
    1e48:	ea e3       	ldi	r30, 0x3A	; 58
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	80 83       	st	Z, r24
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <GPIO_setupPortDirection+0x7a>
		case PORTB_ID:DDRB=direction;break;
    1e52:	e7 e3       	ldi	r30, 0x37	; 55
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	80 83       	st	Z, r24
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <GPIO_setupPortDirection+0x7a>
		case PORTC_ID:DDRC=direction;break;
    1e5c:	e4 e3       	ldi	r30, 0x34	; 52
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <GPIO_setupPortDirection+0x7a>
		case PORTD_ID:DDRD=direction;break;
    1e66:	e1 e3       	ldi	r30, 0x31	; 49
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24

	}
	}

}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <GPIO_writePort+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <GPIO_writePort+0x8>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	90 f5       	brcc	.+100    	; 0x1ef6 <GPIO_writePort+0x7a>
			/**do nothing**/
		}
		else
		{

			switch(port_num)
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3c 83       	std	Y+4, r19	; 0x04
    1e9a:	2b 83       	std	Y+3, r18	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	d1 f0       	breq	.+52     	; 0x1eda <GPIO_writePort+0x5e>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	2c f4       	brge	.+10     	; 0x1eba <GPIO_writePort+0x3e>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <GPIO_writePort+0x54>
    1eb8:	1e c0       	rjmp	.+60     	; 0x1ef6 <GPIO_writePort+0x7a>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <GPIO_writePort+0x68>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <GPIO_writePort+0x72>
    1ece:	13 c0       	rjmp	.+38     	; 0x1ef6 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:PORTA=value;break;
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 83       	st	Z, r24
    1ed8:	0e c0       	rjmp	.+28     	; 0x1ef6 <GPIO_writePort+0x7a>
			case PORTB_ID:PORTB=value;break;
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	80 83       	st	Z, r24
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <GPIO_writePort+0x7a>
			case PORTC_ID:PORTC=value;break;
    1ee4:	e5 e3       	ldi	r30, 0x35	; 53
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	80 83       	st	Z, r24
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <GPIO_writePort+0x7a>
			case PORTD_ID:PORTD=value;break;
    1eee:	e2 e3       	ldi	r30, 0x32	; 50
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	80 83       	st	Z, r24

			}
		}


}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <GPIO_readPort+0x6>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <GPIO_readPort+0x8>
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    1f12:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	90 f5       	brcc	.+100    	; 0x1f7e <GPIO_readPort+0x7a>
			{
				/**retuen 0**/
			}
			else
			{
				switch(port_num)
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3c 83       	std	Y+4, r19	; 0x04
    1f22:	2b 83       	std	Y+3, r18	; 0x03
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	d1 f0       	breq	.+52     	; 0x1f62 <GPIO_readPort+0x5e>
    1f2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f30:	3c 81       	ldd	r19, Y+4	; 0x04
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <GPIO_readPort+0x3e>
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <GPIO_readPort+0x54>
    1f40:	1e c0       	rjmp	.+60     	; 0x1f7e <GPIO_readPort+0x7a>
    1f42:	2b 81       	ldd	r18, Y+3	; 0x03
    1f44:	3c 81       	ldd	r19, Y+4	; 0x04
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	81 f0       	breq	.+32     	; 0x1f6c <GPIO_readPort+0x68>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <GPIO_readPort+0x72>
    1f56:	13 c0       	rjmp	.+38     	; 0x1f7e <GPIO_readPort+0x7a>
				{
				case PORTA_ID : value = PINA;break;
    1f58:	e9 e3       	ldi	r30, 0x39	; 57
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <GPIO_readPort+0x7a>
				case PORTB_ID : value = PINB;break;
    1f62:	e6 e3       	ldi	r30, 0x36	; 54
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	09 c0       	rjmp	.+18     	; 0x1f7e <GPIO_readPort+0x7a>
				case PORTC_ID : value = PINC;break;
    1f6c:	e3 e3       	ldi	r30, 0x33	; 51
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <GPIO_readPort+0x7a>
				case PORTD_ID : value = PIND;break;
    1f76:	e0 e3       	ldi	r30, 0x30	; 48
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	89 83       	std	Y+1, r24	; 0x01

				}
			}

	return value;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01

			}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_init>:


/****************    Functions Definitions *******************/

void LCD_init(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	2e 97       	sbiw	r28, 0x0e	; 14
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
	/*set direction of screen pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT); /*LCD RS*/
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 89 0c 	call	0x1912	; 0x1912 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);  /*LCD E*/
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 89 0c 	call	0x1912	; 0x1912 <GPIO_setupPinDirection>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 ea       	ldi	r26, 0xA0	; 160
    1fbc:	b1 e4       	ldi	r27, 0x41	; 65
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_init+0x7a>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_init+0xda>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_init+0xc8>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_init+0xbc>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_init+0x104>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01

		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID ,PORT_OUTPUT);  /*data port*/
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	6f ef       	ldi	r22, 0xFF	; 255
    209e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <GPIO_setupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20a2:	88 e3       	ldi	r24, 0x38	; 56
    20a4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <LCD_sendCommand>
#endif


	/*5*7 dot display Mode */
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20a8:	8c e0       	ldi	r24, 0x0C	; 12
    20aa:	0e 94 63 10 	call	0x20c6	; 0x20c6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <LCD_sendCommand>

}
    20b4:	2e 96       	adiw	r28, 0x0e	; 14
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <LCD_sendCommand>:

/**********************************************************************/


void LCD_sendCommand(uint8 command)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	e9 97       	sbiw	r28, 0x39	; 57
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_LOW);   /* write zero to RS pin to send instruction*/
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e8       	ldi	r26, 0x80	; 128
    20ec:	bf e3       	ldi	r27, 0x3F	; 63
    20ee:	8d ab       	std	Y+53, r24	; 0x35
    20f0:	9e ab       	std	Y+54, r25	; 0x36
    20f2:	af ab       	std	Y+55, r26	; 0x37
    20f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	6d a9       	ldd	r22, Y+53	; 0x35
    20f8:	7e a9       	ldd	r23, Y+54	; 0x36
    20fa:	8f a9       	ldd	r24, Y+55	; 0x37
    20fc:	98 ad       	ldd	r25, Y+56	; 0x38
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	89 ab       	std	Y+49, r24	; 0x31
    2110:	9a ab       	std	Y+50, r25	; 0x32
    2112:	ab ab       	std	Y+51, r26	; 0x33
    2114:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2116:	69 a9       	ldd	r22, Y+49	; 0x31
    2118:	7a a9       	ldd	r23, Y+50	; 0x32
    211a:	8b a9       	ldd	r24, Y+51	; 0x33
    211c:	9c a9       	ldd	r25, Y+52	; 0x34
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <LCD_sendCommand+0x72>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	98 ab       	std	Y+48, r25	; 0x30
    2134:	8f a7       	std	Y+47, r24	; 0x2f
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2138:	69 a9       	ldd	r22, Y+49	; 0x31
    213a:	7a a9       	ldd	r23, Y+50	; 0x32
    213c:	8b a9       	ldd	r24, Y+51	; 0x33
    213e:	9c a9       	ldd	r25, Y+52	; 0x34
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	6d a9       	ldd	r22, Y+53	; 0x35
    2152:	7e a9       	ldd	r23, Y+54	; 0x36
    2154:	8f a9       	ldd	r24, Y+55	; 0x37
    2156:	98 ad       	ldd	r25, Y+56	; 0x38
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	98 ab       	std	Y+48, r25	; 0x30
    2176:	8f a7       	std	Y+47, r24	; 0x2f
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <LCD_sendCommand+0xd2>
    217a:	88 ec       	ldi	r24, 0xC8	; 200
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e a7       	std	Y+46, r25	; 0x2e
    2180:	8d a7       	std	Y+45, r24	; 0x2d
    2182:	8d a5       	ldd	r24, Y+45	; 0x2d
    2184:	9e a5       	ldd	r25, Y+46	; 0x2e
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_sendCommand+0xc0>
    218a:	9e a7       	std	Y+46, r25	; 0x2e
    218c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2190:	98 a9       	ldd	r25, Y+48	; 0x30
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	98 ab       	std	Y+48, r25	; 0x30
    2196:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8f a5       	ldd	r24, Y+47	; 0x2f
    219a:	98 a9       	ldd	r25, Y+48	; 0x30
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <LCD_sendCommand+0xb4>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	69 a9       	ldd	r22, Y+49	; 0x31
    21a4:	7a a9       	ldd	r23, Y+50	; 0x32
    21a6:	8b a9       	ldd	r24, Y+51	; 0x33
    21a8:	9c a9       	ldd	r25, Y+52	; 0x34
    21aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
    21b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ba:	9c a7       	std	Y+44, r25	; 0x2c
    21bc:	8b a7       	std	Y+43, r24	; 0x2b
    21be:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_sendCommand+0xfc>
    21c6:	9c a7       	std	Y+44, r25	; 0x2c
    21c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to enable pin*/
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e8       	ldi	r26, 0x80	; 128
    21da:	bf e3       	ldi	r27, 0x3F	; 63
    21dc:	8f a3       	std	Y+39, r24	; 0x27
    21de:	98 a7       	std	Y+40, r25	; 0x28
    21e0:	a9 a7       	std	Y+41, r26	; 0x29
    21e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6f a1       	ldd	r22, Y+39	; 0x27
    21e6:	78 a5       	ldd	r23, Y+40	; 0x28
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8b a3       	std	Y+35, r24	; 0x23
    21fe:	9c a3       	std	Y+36, r25	; 0x24
    2200:	ad a3       	std	Y+37, r26	; 0x25
    2202:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2204:	6b a1       	ldd	r22, Y+35	; 0x23
    2206:	7c a1       	ldd	r23, Y+36	; 0x24
    2208:	8d a1       	ldd	r24, Y+37	; 0x25
    220a:	9e a1       	ldd	r25, Y+38	; 0x26
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_sendCommand+0x160>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2226:	6b a1       	ldd	r22, Y+35	; 0x23
    2228:	7c a1       	ldd	r23, Y+36	; 0x24
    222a:	8d a1       	ldd	r24, Y+37	; 0x25
    222c:	9e a1       	ldd	r25, Y+38	; 0x26
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6f a1       	ldd	r22, Y+39	; 0x27
    2240:	78 a5       	ldd	r23, Y+40	; 0x28
    2242:	89 a5       	ldd	r24, Y+41	; 0x29
    2244:	9a a5       	ldd	r25, Y+42	; 0x2a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_sendCommand+0x1c0>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	98 a3       	std	Y+32, r25	; 0x20
    226e:	8f 8f       	std	Y+31, r24	; 0x1f
    2270:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2272:	98 a1       	ldd	r25, Y+32	; 0x20
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_sendCommand+0x1ae>
    2278:	98 a3       	std	Y+32, r25	; 0x20
    227a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	89 a1       	ldd	r24, Y+33	; 0x21
    227e:	9a a1       	ldd	r25, Y+34	; 0x22
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9a a3       	std	Y+34, r25	; 0x22
    2284:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	89 a1       	ldd	r24, Y+33	; 0x21
    2288:	9a a1       	ldd	r25, Y+34	; 0x22
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_sendCommand+0x1a2>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	89 a1       	ldd	r24, Y+33	; 0x21
    22a6:	9a a1       	ldd	r25, Y+34	; 0x22
    22a8:	9e 8f       	std	Y+30, r25	; 0x1e
    22aa:	8d 8f       	std	Y+29, r24	; 0x1d
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendCommand+0x1ea>
    22b4:	9e 8f       	std	Y+30, r25	; 0x1e
    22b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,command);   /*send command to screen*/
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	69 ad       	ldd	r22, Y+57	; 0x39
    22bc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePort>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e8       	ldi	r26, 0x80	; 128
    22c6:	bf e3       	ldi	r27, 0x3F	; 63
    22c8:	89 8f       	std	Y+25, r24	; 0x19
    22ca:	9a 8f       	std	Y+26, r25	; 0x1a
    22cc:	ab 8f       	std	Y+27, r26	; 0x1b
    22ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	69 8d       	ldd	r22, Y+25	; 0x19
    22d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a ef       	ldi	r20, 0xFA	; 250
    22de:	54 e4       	ldi	r21, 0x44	; 68
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8d 8b       	std	Y+21, r24	; 0x15
    22ea:	9e 8b       	std	Y+22, r25	; 0x16
    22ec:	af 8b       	std	Y+23, r26	; 0x17
    22ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9c 8b       	std	Y+20, r25	; 0x14
    230e:	8b 8b       	std	Y+19, r24	; 0x13
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2312:	6d 89       	ldd	r22, Y+21	; 0x15
    2314:	7e 89       	ldd	r23, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	69 8d       	ldd	r22, Y+25	; 0x19
    232c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <LCD_sendCommand+0x2ac>
    2354:	88 ec       	ldi	r24, 0xC8	; 200
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9a 8b       	std	Y+18, r25	; 0x12
    235a:	89 8b       	std	Y+17, r24	; 0x11
    235c:	89 89       	ldd	r24, Y+17	; 0x11
    235e:	9a 89       	ldd	r25, Y+18	; 0x12
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_sendCommand+0x29a>
    2364:	9a 8b       	std	Y+18, r25	; 0x12
    2366:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8b 89       	ldd	r24, Y+19	; 0x13
    236a:	9c 89       	ldd	r25, Y+20	; 0x14
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <LCD_sendCommand+0x28e>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	98 8b       	std	Y+16, r25	; 0x10
    2396:	8f 87       	std	Y+15, r24	; 0x0f
    2398:	8f 85       	ldd	r24, Y+15	; 0x0f
    239a:	98 89       	ldd	r25, Y+16	; 0x10
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_sendCommand+0x2d6>
    23a0:	98 8b       	std	Y+16, r25	; 0x10
    23a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e8       	ldi	r26, 0x80	; 128
    23b4:	bf e3       	ldi	r27, 0x3F	; 63
    23b6:	8b 87       	std	Y+11, r24	; 0x0b
    23b8:	9c 87       	std	Y+12, r25	; 0x0c
    23ba:	ad 87       	std	Y+13, r26	; 0x0d
    23bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a ef       	ldi	r20, 0xFA	; 250
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <LCD_sendCommand+0x33a>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <LCD_sendCommand+0x39a>
    2442:	88 ec       	ldi	r24, 0xC8	; 200
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_sendCommand+0x388>
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <LCD_sendCommand+0x37c>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_sendCommand+0x3c4>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif

}
    2492:	e9 96       	adiw	r28, 0x39	; 57
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <LCD_displayCharacter>:

/**********************************************************************/


void LCD_displayCharacter(uint8 character)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	e9 97       	sbiw	r28, 0x39	; 57
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID, LOGIC_HIGH);   /* write 1 to RS pin to send DATA*/
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	8d ab       	std	Y+53, r24	; 0x35
    24ce:	9e ab       	std	Y+54, r25	; 0x36
    24d0:	af ab       	std	Y+55, r26	; 0x37
    24d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6d a9       	ldd	r22, Y+53	; 0x35
    24d6:	7e a9       	ldd	r23, Y+54	; 0x36
    24d8:	8f a9       	ldd	r24, Y+55	; 0x37
    24da:	98 ad       	ldd	r25, Y+56	; 0x38
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a ef       	ldi	r20, 0xFA	; 250
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	89 ab       	std	Y+49, r24	; 0x31
    24ee:	9a ab       	std	Y+50, r25	; 0x32
    24f0:	ab ab       	std	Y+51, r26	; 0x33
    24f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f4:	69 a9       	ldd	r22, Y+49	; 0x31
    24f6:	7a a9       	ldd	r23, Y+50	; 0x32
    24f8:	8b a9       	ldd	r24, Y+51	; 0x33
    24fa:	9c a9       	ldd	r25, Y+52	; 0x34
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <LCD_displayCharacter+0x72>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	98 ab       	std	Y+48, r25	; 0x30
    2512:	8f a7       	std	Y+47, r24	; 0x2f
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2516:	69 a9       	ldd	r22, Y+49	; 0x31
    2518:	7a a9       	ldd	r23, Y+50	; 0x32
    251a:	8b a9       	ldd	r24, Y+51	; 0x33
    251c:	9c a9       	ldd	r25, Y+52	; 0x34
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6d a9       	ldd	r22, Y+53	; 0x35
    2530:	7e a9       	ldd	r23, Y+54	; 0x36
    2532:	8f a9       	ldd	r24, Y+55	; 0x37
    2534:	98 ad       	ldd	r25, Y+56	; 0x38
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	98 ab       	std	Y+48, r25	; 0x30
    2554:	8f a7       	std	Y+47, r24	; 0x2f
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <LCD_displayCharacter+0xd2>
    2558:	88 ec       	ldi	r24, 0xC8	; 200
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9e a7       	std	Y+46, r25	; 0x2e
    255e:	8d a7       	std	Y+45, r24	; 0x2d
    2560:	8d a5       	ldd	r24, Y+45	; 0x2d
    2562:	9e a5       	ldd	r25, Y+46	; 0x2e
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_displayCharacter+0xc0>
    2568:	9e a7       	std	Y+46, r25	; 0x2e
    256a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8f a5       	ldd	r24, Y+47	; 0x2f
    256e:	98 a9       	ldd	r25, Y+48	; 0x30
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	98 ab       	std	Y+48, r25	; 0x30
    2574:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8f a5       	ldd	r24, Y+47	; 0x2f
    2578:	98 a9       	ldd	r25, Y+48	; 0x30
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <LCD_displayCharacter+0xb4>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	69 a9       	ldd	r22, Y+49	; 0x31
    2582:	7a a9       	ldd	r23, Y+50	; 0x32
    2584:	8b a9       	ldd	r24, Y+51	; 0x33
    2586:	9c a9       	ldd	r25, Y+52	; 0x34
    2588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	98 ab       	std	Y+48, r25	; 0x30
    2592:	8f a7       	std	Y+47, r24	; 0x2f
    2594:	8f a5       	ldd	r24, Y+47	; 0x2f
    2596:	98 a9       	ldd	r25, Y+48	; 0x30
    2598:	9c a7       	std	Y+44, r25	; 0x2c
    259a:	8b a7       	std	Y+43, r24	; 0x2b
    259c:	8b a5       	ldd	r24, Y+43	; 0x2b
    259e:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_displayCharacter+0xfc>
    25a4:	9c a7       	std	Y+44, r25	; 0x2c
    25a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /* tas = 50 nsec*/

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_HIGH );   /* write 1 to  E enable pin*/
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e8       	ldi	r26, 0x80	; 128
    25b8:	bf e3       	ldi	r27, 0x3F	; 63
    25ba:	8f a3       	std	Y+39, r24	; 0x27
    25bc:	98 a7       	std	Y+40, r25	; 0x28
    25be:	a9 a7       	std	Y+41, r26	; 0x29
    25c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6f a1       	ldd	r22, Y+39	; 0x27
    25c4:	78 a5       	ldd	r23, Y+40	; 0x28
    25c6:	89 a5       	ldd	r24, Y+41	; 0x29
    25c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a ef       	ldi	r20, 0xFA	; 250
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8b a3       	std	Y+35, r24	; 0x23
    25dc:	9c a3       	std	Y+36, r25	; 0x24
    25de:	ad a3       	std	Y+37, r26	; 0x25
    25e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e2:	6b a1       	ldd	r22, Y+35	; 0x23
    25e4:	7c a1       	ldd	r23, Y+36	; 0x24
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <LCD_displayCharacter+0x160>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2604:	6b a1       	ldd	r22, Y+35	; 0x23
    2606:	7c a1       	ldd	r23, Y+36	; 0x24
    2608:	8d a1       	ldd	r24, Y+37	; 0x25
    260a:	9e a1       	ldd	r25, Y+38	; 0x26
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6f a1       	ldd	r22, Y+39	; 0x27
    261e:	78 a5       	ldd	r23, Y+40	; 0x28
    2620:	89 a5       	ldd	r24, Y+41	; 0x29
    2622:	9a a5       	ldd	r25, Y+42	; 0x2a
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9a a3       	std	Y+34, r25	; 0x22
    2642:	89 a3       	std	Y+33, r24	; 0x21
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <LCD_displayCharacter+0x1c0>
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	98 a3       	std	Y+32, r25	; 0x20
    264c:	8f 8f       	std	Y+31, r24	; 0x1f
    264e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2650:	98 a1       	ldd	r25, Y+32	; 0x20
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_displayCharacter+0x1ae>
    2656:	98 a3       	std	Y+32, r25	; 0x20
    2658:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	89 a1       	ldd	r24, Y+33	; 0x21
    265c:	9a a1       	ldd	r25, Y+34	; 0x22
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9a a3       	std	Y+34, r25	; 0x22
    2662:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	89 a1       	ldd	r24, Y+33	; 0x21
    2666:	9a a1       	ldd	r25, Y+34	; 0x22
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <LCD_displayCharacter+0x1a2>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6b a1       	ldd	r22, Y+35	; 0x23
    2670:	7c a1       	ldd	r23, Y+36	; 0x24
    2672:	8d a1       	ldd	r24, Y+37	; 0x25
    2674:	9e a1       	ldd	r25, Y+38	; 0x26
    2676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	89 a1       	ldd	r24, Y+33	; 0x21
    2684:	9a a1       	ldd	r25, Y+34	; 0x22
    2686:	9e 8f       	std	Y+30, r25	; 0x1e
    2688:	8d 8f       	std	Y+29, r24	; 0x1d
    268a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_displayCharacter+0x1ea>
    2692:	9e 8f       	std	Y+30, r25	; 0x1e
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*  Th = 13ns */


#elif(LCD_DATA_BITS_MODE ==8 )

	GPIO_writePort(LCD_DATA_PORT_ID,character);   /*send command to screen*/
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	69 ad       	ldd	r22, Y+57	; 0x39
    269a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <GPIO_writePort>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e8       	ldi	r26, 0x80	; 128
    26a4:	bf e3       	ldi	r27, 0x3F	; 63
    26a6:	89 8f       	std	Y+25, r24	; 0x19
    26a8:	9a 8f       	std	Y+26, r25	; 0x1a
    26aa:	ab 8f       	std	Y+27, r26	; 0x1b
    26ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	69 8d       	ldd	r22, Y+25	; 0x19
    26b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8d 8b       	std	Y+21, r24	; 0x15
    26c8:	9e 8b       	std	Y+22, r25	; 0x16
    26ca:	af 8b       	std	Y+23, r26	; 0x17
    26cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	69 8d       	ldd	r22, Y+25	; 0x19
    270a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9c 8b       	std	Y+20, r25	; 0x14
    272e:	8b 8b       	std	Y+19, r24	; 0x13
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <LCD_displayCharacter+0x2ac>
    2732:	88 ec       	ldi	r24, 0xC8	; 200
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9a 8b       	std	Y+18, r25	; 0x12
    2738:	89 8b       	std	Y+17, r24	; 0x11
    273a:	89 89       	ldd	r24, Y+17	; 0x11
    273c:	9a 89       	ldd	r25, Y+18	; 0x12
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_displayCharacter+0x29a>
    2742:	9a 8b       	std	Y+18, r25	; 0x12
    2744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9c 8b       	std	Y+20, r25	; 0x14
    274e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <LCD_displayCharacter+0x28e>
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9c 8b       	std	Y+20, r25	; 0x14
    276c:	8b 8b       	std	Y+19, r24	; 0x13
    276e:	8b 89       	ldd	r24, Y+19	; 0x13
    2770:	9c 89       	ldd	r25, Y+20	; 0x14
    2772:	98 8b       	std	Y+16, r25	; 0x10
    2774:	8f 87       	std	Y+15, r24	; 0x0f
    2776:	8f 85       	ldd	r24, Y+15	; 0x0f
    2778:	98 89       	ldd	r25, Y+16	; 0x10
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_displayCharacter+0x2d6>
    277e:	98 8b       	std	Y+16, r25	; 0x10
    2780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);  /*disable screen*/
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <GPIO_writePin>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e8       	ldi	r26, 0x80	; 128
    2792:	bf e3       	ldi	r27, 0x3F	; 63
    2794:	8b 87       	std	Y+11, r24	; 0x0b
    2796:	9c 87       	std	Y+12, r25	; 0x0c
    2798:	ad 87       	std	Y+13, r26	; 0x0d
    279a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	6b 85       	ldd	r22, Y+11	; 0x0b
    279e:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a ef       	ldi	r20, 0xFA	; 250
    27aa:	54 e4       	ldi	r21, 0x44	; 68
    27ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8f 83       	std	Y+7, r24	; 0x07
    27b6:	98 87       	std	Y+8, r25	; 0x08
    27b8:	a9 87       	std	Y+9, r26	; 0x09
    27ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <LCD_displayCharacter+0x33a>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	4f e7       	ldi	r20, 0x7F	; 127
    27ec:	57 e4       	ldi	r21, 0x47	; 71
    27ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	4c f5       	brge	.+82     	; 0x2848 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
    281e:	0f c0       	rjmp	.+30     	; 0x283e <LCD_displayCharacter+0x39a>
    2820:	88 ec       	ldi	r24, 0xC8	; 200
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_displayCharacter+0x388>
    2830:	9c 83       	std	Y+4, r25	; 0x04
    2832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	69 f7       	brne	.-38     	; 0x2820 <LCD_displayCharacter+0x37c>
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	6f 81       	ldd	r22, Y+7	; 0x07
    284a:	78 85       	ldd	r23, Y+8	; 0x08
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_displayCharacter+0x3c4>
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*  Th = 13ns */
#endif


}
    2870:	e9 96       	adiw	r28, 0x39	; 57
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <LCD_displayString>:

/**********************************************************************/

void LCD_displayString(const char *Str)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <LCD_displayString+0x6>
    2888:	00 d0       	rcall	.+0      	; 0x288a <LCD_displayString+0x8>
    288a:	00 d0       	rcall	.+0      	; 0x288c <LCD_displayString+0xa>
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
	uint32 i=0;
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	1a 82       	std	Y+2, r1	; 0x02
    2898:	1b 82       	std	Y+3, r1	; 0x03
    289a:	1c 82       	std	Y+4, r1	; 0x04
    289c:	15 c0       	rjmp	.+42     	; 0x28c8 <LCD_displayString+0x46>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    289e:	29 81       	ldd	r18, Y+1	; 0x01
    28a0:	3a 81       	ldd	r19, Y+2	; 0x02
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 0f       	add	r30, r18
    28aa:	f3 1f       	adc	r31, r19
    28ac:	80 81       	ld	r24, Z
    28ae:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_displayCharacter>
		i++;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	ab 81       	ldd	r26, Y+3	; 0x03
    28b8:	bc 81       	ldd	r27, Y+4	; 0x04
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	a1 1d       	adc	r26, r1
    28be:	b1 1d       	adc	r27, r1
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	ab 83       	std	Y+3, r26	; 0x03
    28c6:	bc 83       	std	Y+4, r27	; 0x04
/**********************************************************************/

void LCD_displayString(const char *Str)
{
	uint32 i=0;
	while(Str[i] != '\0')
    28c8:	29 81       	ldd	r18, Y+1	; 0x01
    28ca:	3a 81       	ldd	r19, Y+2	; 0x02
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	fc 01       	movw	r30, r24
    28d2:	e2 0f       	add	r30, r18
    28d4:	f3 1f       	adc	r31, r19
    28d6:	80 81       	ld	r24, Z
    28d8:	88 23       	and	r24, r24
    28da:	09 f7       	brne	.-62     	; 0x289e <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    28dc:	26 96       	adiw	r28, 0x06	; 6
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_moveCursor>:

/**********************************************************************/


void LCD_moveCursor(uint8 row,uint8 col)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_moveCursor+0x6>
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <LCD_moveCursor+0x8>
    28f6:	0f 92       	push	r0
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	3d 83       	std	Y+5, r19	; 0x05
    2908:	2c 83       	std	Y+4, r18	; 0x04
    290a:	8c 81       	ldd	r24, Y+4	; 0x04
    290c:	9d 81       	ldd	r25, Y+5	; 0x05
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	91 05       	cpc	r25, r1
    2912:	c1 f0       	breq	.+48     	; 0x2944 <LCD_moveCursor+0x56>
    2914:	2c 81       	ldd	r18, Y+4	; 0x04
    2916:	3d 81       	ldd	r19, Y+5	; 0x05
    2918:	22 30       	cpi	r18, 0x02	; 2
    291a:	31 05       	cpc	r19, r1
    291c:	2c f4       	brge	.+10     	; 0x2928 <LCD_moveCursor+0x3a>
    291e:	8c 81       	ldd	r24, Y+4	; 0x04
    2920:	9d 81       	ldd	r25, Y+5	; 0x05
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	61 f0       	breq	.+24     	; 0x293e <LCD_moveCursor+0x50>
    2926:	19 c0       	rjmp	.+50     	; 0x295a <LCD_moveCursor+0x6c>
    2928:	2c 81       	ldd	r18, Y+4	; 0x04
    292a:	3d 81       	ldd	r19, Y+5	; 0x05
    292c:	22 30       	cpi	r18, 0x02	; 2
    292e:	31 05       	cpc	r19, r1
    2930:	69 f0       	breq	.+26     	; 0x294c <LCD_moveCursor+0x5e>
    2932:	8c 81       	ldd	r24, Y+4	; 0x04
    2934:	9d 81       	ldd	r25, Y+5	; 0x05
    2936:	83 30       	cpi	r24, 0x03	; 3
    2938:	91 05       	cpc	r25, r1
    293a:	61 f0       	breq	.+24     	; 0x2954 <LCD_moveCursor+0x66>
    293c:	0e c0       	rjmp	.+28     	; 0x295a <LCD_moveCursor+0x6c>
	{
	case 0 : lcd_memory_address= col;break;
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	0b c0       	rjmp	.+22     	; 0x295a <LCD_moveCursor+0x6c>
	case 1:  lcd_memory_address= col+0x40;break;
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	80 5c       	subi	r24, 0xC0	; 192
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	07 c0       	rjmp	.+14     	; 0x295a <LCD_moveCursor+0x6c>
	case 2:  lcd_memory_address= col+0x10;break;
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	80 5f       	subi	r24, 0xF0	; 240
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	03 c0       	rjmp	.+6      	; 0x295a <LCD_moveCursor+0x6c>
	case 3:  lcd_memory_address= col+0x50;break;
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	80 5b       	subi	r24, 0xB0	; 176
    2958:	89 83       	std	Y+1, r24	; 0x01


	}

	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);  /*address of cursor the MSB always be 1*/
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	80 68       	ori	r24, 0x80	; 128
    295e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <LCD_sendCommand>
	/*so thats why we made address or with 0x80*/


}
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LCD_displayStringRowColumn>:

/**********************************************************************/

void LCD_displayStringRowColumn(uint8 row , uint8 col,const char *str)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <LCD_displayStringRowColumn+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <LCD_displayStringRowColumn+0x8>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	6a 83       	std	Y+2, r22	; 0x02
    2982:	5c 83       	std	Y+4, r21	; 0x04
    2984:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);  /*required position*/
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	6a 81       	ldd	r22, Y+2	; 0x02
    298a:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_moveCursor>
	LCD_displayString(str);  /*display string/*/
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_displayString>

}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <LCD_intgerToString>:
/**********************************************************************/

void LCD_intgerToString(int data)
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	62 97       	sbiw	r28, 0x12	; 18
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
    29ba:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29bc:	89 89       	ldd	r24, Y+17	; 0x11
    29be:	9a 89       	ldd	r25, Y+18	; 0x12
    29c0:	9e 01       	movw	r18, r28
    29c2:	2f 5f       	subi	r18, 0xFF	; 255
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	b9 01       	movw	r22, r18
    29c8:	4a e0       	ldi	r20, 0x0A	; 10
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <itoa>
	LCD_displayString(buff);
    29d0:	ce 01       	movw	r24, r28
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_displayString>
}
    29d8:	62 96       	adiw	r28, 0x12	; 18
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <LCD_clearScreen>:

/**********************************************************************/

void LCD_clearScreen(void)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <LCD_sendCommand>
}
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <PWM_Timer0_Start>:


/*function DEFINITION****/

void PWM_Timer0_Start(uint8 duty_cycle)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	0f 92       	push	r0
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	89 83       	std	Y+1, r24	; 0x01
	/*Setup the PWM mode with Non-Inverting.
      Setup the prescaler with F_CPU/8*/
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    2a0a:	e3 e5       	ldi	r30, 0x53	; 83
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	8a e6       	ldi	r24, 0x6A	; 106
    2a10:	80 83       	st	Z, r24


	TCNT0 = 0;
    2a12:	e2 e5       	ldi	r30, 0x52	; 82
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	10 82       	st	Z, r1
	OCR0 = duty_cycle ;
    2a18:	ec e5       	ldi	r30, 0x5C	; 92
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin*/
    2a20:	a7 e3       	ldi	r26, 0x37	; 55
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e7 e3       	ldi	r30, 0x37	; 55
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 60       	ori	r24, 0x08	; 8
    2a2c:	8c 93       	st	X, r24

}
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <PWM_Timer0_Duty_cycle>:

void PWM_Timer0_Duty_cycle(uint8 duty_cycle)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	0f 92       	push	r0
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    2a42:	e2 e5       	ldi	r30, 0x52	; 82
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	10 82       	st	Z, r1
		OCR0 = duty_cycle ;
    2a48:	ec e5       	ldi	r30, 0x5C	; 92
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	80 83       	st	Z, r24

}
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <UART_init>:

/*****Function DEFINITIONS**************/


void UART_init(const USART_ConfigType* Config_Ptr )
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <UART_init+0x6>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <UART_init+0x8>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value =0;
    2a68:	1a 82       	std	Y+2, r1	; 0x02
    2a6a:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X) ;   /* Double the USART Transmission Speed*/
    2a6c:	eb e2       	ldi	r30, 0x2B	; 43
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);  /* enable UART*/
    2a74:	ea e2       	ldi	r30, 0x2A	; 42
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	88 e1       	ldi	r24, 0x18	; 24
    2a7a:	80 83       	st	Z, r24

	UCSRB = (UCSRB&0xFB) | ((Config_Ptr->datasize) & 0x4) ;  /*  UCSZ2 for data size*/
    2a7c:	aa e2       	ldi	r26, 0x2A	; 42
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	ea e2       	ldi	r30, 0x2A	; 42
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	98 2f       	mov	r25, r24
    2a88:	9b 7f       	andi	r25, 0xFB	; 251
    2a8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8e:	83 81       	ldd	r24, Z+3	; 0x03
    2a90:	84 70       	andi	r24, 0x04	; 4
    2a92:	89 2b       	or	r24, r25
    2a94:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL); /* to select UCSRC register*/
    2a96:	a0 e4       	ldi	r26, 0x40	; 64
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e0 e4       	ldi	r30, 0x40	; 64
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 68       	ori	r24, 0x80	; 128
    2aa2:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);  /* to select USART MODE*/
    2aa4:	a0 e4       	ldi	r26, 0x40	; 64
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e0 e4       	ldi	r30, 0x40	; 64
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	28 2f       	mov	r18, r24
    2ab0:	2f 7b       	andi	r18, 0xBF	; 191
    2ab2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	00 24       	eor	r0, r0
    2abe:	96 95       	lsr	r25
    2ac0:	87 95       	ror	r24
    2ac2:	07 94       	ror	r0
    2ac4:	96 95       	lsr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	07 94       	ror	r0
    2aca:	98 2f       	mov	r25, r24
    2acc:	80 2d       	mov	r24, r0
    2ace:	82 2b       	or	r24, r18
    2ad0:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)  << 4); /*Parity Mode*/
    2ad2:	a0 e4       	ldi	r26, 0x40	; 64
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e0 e4       	ldi	r30, 0x40	; 64
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	28 2f       	mov	r18, r24
    2ade:	2f 7c       	andi	r18, 0xCF	; 207
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	81 81       	ldd	r24, Z+1	; 0x01
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	82 95       	swap	r24
    2aec:	92 95       	swap	r25
    2aee:	90 7f       	andi	r25, 0xF0	; 240
    2af0:	98 27       	eor	r25, r24
    2af2:	80 7f       	andi	r24, 0xF0	; 240
    2af4:	98 27       	eor	r25, r24
    2af6:	82 2b       	or	r24, r18
    2af8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopbit)  << 3); /* stop bit*/
    2afa:	a0 e4       	ldi	r26, 0x40	; 64
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e0 e4       	ldi	r30, 0x40	; 64
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	28 2f       	mov	r18, r24
    2b06:	27 7f       	andi	r18, 0xF7	; 247
    2b08:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	82 2b       	or	r24, r18
    2b20:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | (( (Config_Ptr->datasize)& 0x3) <<1) ; /* for data size*/
    2b22:	a0 e4       	ldi	r26, 0x40	; 64
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e0 e4       	ldi	r30, 0x40	; 64
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	29 7f       	andi	r18, 0xF9	; 249
    2b30:	eb 81       	ldd	r30, Y+3	; 0x03
    2b32:	fc 81       	ldd	r31, Y+4	; 0x04
    2b34:	83 81       	ldd	r24, Z+3	; 0x03
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	83 70       	andi	r24, 0x03	; 3
    2b3c:	90 70       	andi	r25, 0x00	; 0
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	82 2b       	or	r24, r18
    2b44:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2b46:	eb 81       	ldd	r30, Y+3	; 0x03
    2b48:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4a:	84 81       	ldd	r24, Z+4	; 0x04
    2b4c:	95 81       	ldd	r25, Z+5	; 0x05
    2b4e:	a6 81       	ldd	r26, Z+6	; 0x06
    2b50:	b7 81       	ldd	r27, Z+7	; 0x07
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	aa 1f       	adc	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	aa 1f       	adc	r26, r26
    2b60:	bb 1f       	adc	r27, r27
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	aa 1f       	adc	r26, r26
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	9c 01       	movw	r18, r24
    2b6c:	ad 01       	movw	r20, r26
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	92 e1       	ldi	r25, 0x12	; 18
    2b72:	aa e7       	ldi	r26, 0x7A	; 122
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__udivmodsi4>
    2b7e:	da 01       	movw	r26, r20
    2b80:	c9 01       	movw	r24, r18
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b88:	e0 e4       	ldi	r30, 0x40	; 64
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	89 2f       	mov	r24, r25
    2b92:	99 27       	eor	r25, r25
    2b94:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b96:	e9 e2       	ldi	r30, 0x29	; 41
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 83       	st	Z, r24

}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <UART_sendByte>:
/***********************************************************************************************/

void UART_sendByte(const uint8 data)

{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	0f 92       	push	r0
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}  /* wait until transmit is complete*/
    2bb8:	eb e2       	ldi	r30, 0x2B	; 43
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	80 72       	andi	r24, 0x20	; 32
    2bc4:	90 70       	andi	r25, 0x00	; 0
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	b9 f3       	breq	.-18     	; 0x2bb8 <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bca:	ec e2       	ldi	r30, 0x2C	; 44
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	80 83       	st	Z, r24

}
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <UART_recieveByte>:
/*************************************************************************************************/

uint8 UART_recieveByte(void)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2be2:	eb e2       	ldi	r30, 0x2B	; 43
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	88 23       	and	r24, r24
    2bea:	dc f7       	brge	.-10     	; 0x2be2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2bec:	ec e2       	ldi	r30, 0x2C	; 44
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z

}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <UART_sendString>:
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <UART_sendString+0x6>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <UART_sendString+0x8>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i =0;
    2c08:	1a 82       	std	Y+2, r1	; 0x02
    2c0a:	19 82       	std	Y+1, r1	; 0x01
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <UART_sendString+0x34>
while(Str[i] != '\0')
{
	UART_sendByte(Str[i]);
    2c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c10:	3c 81       	ldd	r19, Y+4	; 0x04
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
    2c16:	f9 01       	movw	r30, r18
    2c18:	e8 0f       	add	r30, r24
    2c1a:	f9 1f       	adc	r31, r25
    2c1c:	80 81       	ld	r24, Z
    2c1e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
	i++;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	01 96       	adiw	r24, 0x01	; 1
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
}
/*******************************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint16 i =0;
while(Str[i] != '\0')
    2c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	f9 01       	movw	r30, r18
    2c36:	e8 0f       	add	r30, r24
    2c38:	f9 1f       	adc	r31, r25
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	39 f7       	brne	.-50     	; 0x2c0e <UART_sendString+0x16>
{
	UART_sendByte(Str[i]);
	i++;
}

}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <UART_receiveString>:

/*******************************************************************************************/
void UART_receiveString(uint8 *Str)
{
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <UART_receiveString+0xa>
    2c58:	0f 92       	push	r0
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	9b 83       	std	Y+3, r25	; 0x03
    2c60:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2c62:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6e:	8c 01       	movw	r16, r24
    2c70:	02 0f       	add	r16, r18
    2c72:	13 1f       	adc	r17, r19
    2c74:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    2c78:	f8 01       	movw	r30, r16
    2c7a:	80 83       	st	Z, r24
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8e:	8c 01       	movw	r16, r24
    2c90:	02 0f       	add	r16, r18
    2c92:	13 1f       	adc	r17, r19
    2c94:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    2c98:	f8 01       	movw	r30, r16
    2c9a:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e2 0f       	add	r30, r18
    2caa:	f3 1f       	adc	r31, r19
    2cac:	80 81       	ld	r24, Z
    2cae:	83 32       	cpi	r24, 0x23	; 35
    2cb0:	31 f7       	brne	.-52     	; 0x2c7e <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	10 82       	st	Z, r1


}
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <__udivmodsi4>:
    2cd4:	a1 e2       	ldi	r26, 0x21	; 33
    2cd6:	1a 2e       	mov	r1, r26
    2cd8:	aa 1b       	sub	r26, r26
    2cda:	bb 1b       	sub	r27, r27
    2cdc:	fd 01       	movw	r30, r26
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <__udivmodsi4_ep>

00002ce0 <__udivmodsi4_loop>:
    2ce0:	aa 1f       	adc	r26, r26
    2ce2:	bb 1f       	adc	r27, r27
    2ce4:	ee 1f       	adc	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	a2 17       	cp	r26, r18
    2cea:	b3 07       	cpc	r27, r19
    2cec:	e4 07       	cpc	r30, r20
    2cee:	f5 07       	cpc	r31, r21
    2cf0:	20 f0       	brcs	.+8      	; 0x2cfa <__udivmodsi4_ep>
    2cf2:	a2 1b       	sub	r26, r18
    2cf4:	b3 0b       	sbc	r27, r19
    2cf6:	e4 0b       	sbc	r30, r20
    2cf8:	f5 0b       	sbc	r31, r21

00002cfa <__udivmodsi4_ep>:
    2cfa:	66 1f       	adc	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	88 1f       	adc	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	1a 94       	dec	r1
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <__udivmodsi4_loop>
    2d06:	60 95       	com	r22
    2d08:	70 95       	com	r23
    2d0a:	80 95       	com	r24
    2d0c:	90 95       	com	r25
    2d0e:	9b 01       	movw	r18, r22
    2d10:	ac 01       	movw	r20, r24
    2d12:	bd 01       	movw	r22, r26
    2d14:	cf 01       	movw	r24, r30
    2d16:	08 95       	ret

00002d18 <__prologue_saves__>:
    2d18:	2f 92       	push	r2
    2d1a:	3f 92       	push	r3
    2d1c:	4f 92       	push	r4
    2d1e:	5f 92       	push	r5
    2d20:	6f 92       	push	r6
    2d22:	7f 92       	push	r7
    2d24:	8f 92       	push	r8
    2d26:	9f 92       	push	r9
    2d28:	af 92       	push	r10
    2d2a:	bf 92       	push	r11
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	ca 1b       	sub	r28, r26
    2d42:	db 0b       	sbc	r29, r27
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	09 94       	ijmp

00002d50 <__epilogue_restores__>:
    2d50:	2a 88       	ldd	r2, Y+18	; 0x12
    2d52:	39 88       	ldd	r3, Y+17	; 0x11
    2d54:	48 88       	ldd	r4, Y+16	; 0x10
    2d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d62:	b9 84       	ldd	r11, Y+9	; 0x09
    2d64:	c8 84       	ldd	r12, Y+8	; 0x08
    2d66:	df 80       	ldd	r13, Y+7	; 0x07
    2d68:	ee 80       	ldd	r14, Y+6	; 0x06
    2d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2d70:	aa 81       	ldd	r26, Y+2	; 0x02
    2d72:	b9 81       	ldd	r27, Y+1	; 0x01
    2d74:	ce 0f       	add	r28, r30
    2d76:	d1 1d       	adc	r29, r1
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	ed 01       	movw	r28, r26
    2d84:	08 95       	ret

00002d86 <itoa>:
    2d86:	fb 01       	movw	r30, r22
    2d88:	9f 01       	movw	r18, r30
    2d8a:	e8 94       	clt
    2d8c:	42 30       	cpi	r20, 0x02	; 2
    2d8e:	c4 f0       	brlt	.+48     	; 0x2dc0 <itoa+0x3a>
    2d90:	45 32       	cpi	r20, 0x25	; 37
    2d92:	b4 f4       	brge	.+44     	; 0x2dc0 <itoa+0x3a>
    2d94:	4a 30       	cpi	r20, 0x0A	; 10
    2d96:	29 f4       	brne	.+10     	; 0x2da2 <itoa+0x1c>
    2d98:	97 fb       	bst	r25, 7
    2d9a:	1e f4       	brtc	.+6      	; 0x2da2 <itoa+0x1c>
    2d9c:	90 95       	com	r25
    2d9e:	81 95       	neg	r24
    2da0:	9f 4f       	sbci	r25, 0xFF	; 255
    2da2:	64 2f       	mov	r22, r20
    2da4:	77 27       	eor	r23, r23
    2da6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__udivmodhi4>
    2daa:	80 5d       	subi	r24, 0xD0	; 208
    2dac:	8a 33       	cpi	r24, 0x3A	; 58
    2dae:	0c f0       	brlt	.+2      	; 0x2db2 <itoa+0x2c>
    2db0:	89 5d       	subi	r24, 0xD9	; 217
    2db2:	81 93       	st	Z+, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	a1 f7       	brne	.-24     	; 0x2da2 <itoa+0x1c>
    2dba:	16 f4       	brtc	.+4      	; 0x2dc0 <itoa+0x3a>
    2dbc:	5d e2       	ldi	r21, 0x2D	; 45
    2dbe:	51 93       	st	Z+, r21
    2dc0:	10 82       	st	Z, r1
    2dc2:	c9 01       	movw	r24, r18
    2dc4:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <strrev>

00002dc8 <strrev>:
    2dc8:	dc 01       	movw	r26, r24
    2dca:	fc 01       	movw	r30, r24
    2dcc:	67 2f       	mov	r22, r23
    2dce:	71 91       	ld	r23, Z+
    2dd0:	77 23       	and	r23, r23
    2dd2:	e1 f7       	brne	.-8      	; 0x2dcc <strrev+0x4>
    2dd4:	32 97       	sbiw	r30, 0x02	; 2
    2dd6:	04 c0       	rjmp	.+8      	; 0x2de0 <strrev+0x18>
    2dd8:	7c 91       	ld	r23, X
    2dda:	6d 93       	st	X+, r22
    2ddc:	70 83       	st	Z, r23
    2dde:	62 91       	ld	r22, -Z
    2de0:	ae 17       	cp	r26, r30
    2de2:	bf 07       	cpc	r27, r31
    2de4:	c8 f3       	brcs	.-14     	; 0x2dd8 <strrev+0x10>
    2de6:	08 95       	ret

00002de8 <__udivmodhi4>:
    2de8:	aa 1b       	sub	r26, r26
    2dea:	bb 1b       	sub	r27, r27
    2dec:	51 e1       	ldi	r21, 0x11	; 17
    2dee:	07 c0       	rjmp	.+14     	; 0x2dfe <__udivmodhi4_ep>

00002df0 <__udivmodhi4_loop>:
    2df0:	aa 1f       	adc	r26, r26
    2df2:	bb 1f       	adc	r27, r27
    2df4:	a6 17       	cp	r26, r22
    2df6:	b7 07       	cpc	r27, r23
    2df8:	10 f0       	brcs	.+4      	; 0x2dfe <__udivmodhi4_ep>
    2dfa:	a6 1b       	sub	r26, r22
    2dfc:	b7 0b       	sbc	r27, r23

00002dfe <__udivmodhi4_ep>:
    2dfe:	88 1f       	adc	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	5a 95       	dec	r21
    2e04:	a9 f7       	brne	.-22     	; 0x2df0 <__udivmodhi4_loop>
    2e06:	80 95       	com	r24
    2e08:	90 95       	com	r25
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	08 95       	ret

00002e10 <_exit>:
    2e10:	f8 94       	cli

00002e12 <__stop_program>:
    2e12:	ff cf       	rjmp	.-2      	; 0x2e12 <__stop_program>
